{"version":3,"sources":["View/Game/Navigation/BoardGamePad.tsx","View/Game/Navigation/BoardKeyboard.tsx","View/Game/Navigation/BoardNavigator.tsx","View/Game/Dealer.tsx","View/Game/BlinkingComponent.tsx","View/Game/StackDescription.ts","View/Game/Card.tsx","View/Game/Hand.tsx","View/Game/StackBase.tsx","View/Game/Foundation.tsx","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","View/UI/Menu.tsx","View/Game/usePrevious.ts","View/Game/Stock.tsx","View/Game/Tableau.tsx","View/Game/Waste.tsx","View/Game/Board.tsx","View/UI/EndScreen.js","Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/BasicStack.ts","Model/Game/HandHoldingStack.ts","Model/Game/Foundation.ts","Model/Business/Foundation.ts","Model/Game/Rating.ts","Model/Game/TimeMachine.ts","Model/Game/Game.ts","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.ts","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/Tableau.ts","Model/Game/Waste.ts","Model/Model.ts","View/Game/BoardWrap.tsx"],"names":["BoardGamePad","props","state","React","useContext","GlobalContext","player","BoardContext","isGamePadDriven","settings","launchSettings","inputMode","isSinglePlayer","boardMode","GameModes","SINGLEPLAYER","switchToGamePad","ctx","focus","isKeyBoard","GamePad","gamepadIndex","players","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","layout","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","BoardNavigator","updateContext","updateGameContext","replaceContext","paused","PauseContext","before","x","navigator","currentIndex","y","z","isPaused","handlers","modifier","moveLeft","moveRight","moveUp","moveDown","handler","pressCurrent","hand","stack","length","onClick","isKeyboard","togglePause","suggestionMode","supportsHints","isTemporary","isVisible","isDisabled","enableHint","_state","previous","game","timemachine","popPreviousState","previousStates","rating","penalize","Dealer","timeouts","quickDeal","dealer","isDealt","dealAll","deal","dealt","push","setTimeout","dealOne","useEffect","forEach","timeout","clearTimeout","BlinkingComponent","selector","this","context","blinkFor","unblink","Component","contextType","getStackLabel","source","names","map","id","label","split","parseInt","Card","pause","inputEl","useRef","isFocused","hasCard","model","current","card","isHidden","type","icon","face","style","pointerEvents","className","onFocus","onBlur","zIndex","offsetTop","top","entropyStyle","offsetLeft","left","getCardStyle","ref","hasSuggestion","isSuggested","suggestion","isSelected","blink","canClick","getClassName","e","preventDefault","clientX","clientY","ele","target","includes","offsetParent","rect","getBoundingClientRect","position","click","ownerDocument","defaultView","pageXOffset","pageYOffset","element","disabled","tabIndex","aria-label","title","Hand","parentModel","index","StackBase","classname","hasStack","clickEmpty","children","Foundation","s","foundation","stacks","Stacks","Clock","getElapsed","useState","elapsed","setElapsed","interval","setInterval","started","clearInterval","Hearts","recyclingMode","stock","passes","createString","Array","from","keys","join","getHearts","Hint","Points","points","ToggleMenu","Undo","Math","pow","multiplicator","Header","mode","Menu","restart","NavigationContext","navigation","setNavigation","switchToMenu","menu","pos","screeen","mainMenu","showMenu","remaining","allowed","pauses","announcement","keyboardLayout","pausedBy","MenuTitle","MenuTree","MenuButton","sm","SuggestionModes","next","key","setSuggestionMode","val","toggleMainMenu","toggled","EntropyLevels","baseEntropy","lvl","setEntropy","interactionEntropy","skip","_Menu","screen","navigationContext","value","usePrevious","Renderer","InnerRenderer","speed","waste","isFromWaste","putDownHand","addAll","popTop","canRecycle","recycle","Stock","Tableau","tableau","getOffset","i","parent","Waste","drawMode","isHoldingCard","additionalOffset","Board","EndScreen","isEnded","getTimePenalty","end","Date","now","getBonusPoints","getTotal","Blinker","startBlink","registerBlink","stopBlink","dispatchPutDown","wouldAcceptHand","src","registerMove","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","uncover","registerUncover","dealingAt","callback","newCard","popOne","isFirst","Dispatcher","clickHandler","getHandler","Focus","keyboard","validSettings","setCard","unsetCard","equals","unsetStack","setStack","BasicStack","getTop","getClickable","filter","HandHoldingStack","getHandContent","FoundationStack","setOnClick","acceptedCards","usedCards","color","p","sindex","getCurrentAccepted","currentFoundation","hasMoreThanOneCard","accepts","currentCard","add","putDown","currentAccepted","cards","causeEntropy","min","pop","remove","getPreviousUsed","countCards","f","reduce","a","b","Object","Suits","suit","getFoundationOrder","template","copy","orig","origStack","copyAll","tryDetectEnd","_card","Rating","registerHint","disableHint","currentMove","rateMove","registerRecycle","console","debug","other","undoPenalty","penalty","done","hintPenalty","start","secondsToFinish","trunc","round","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","memorable","modified","pushPreviousState","modelEquals","isRequested","popPrevious","stackEquals","every","stacksEqual","Game","c","splice","_onClick","isHoldingKing","isFromCurrentSource","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","Navigator","rows","getZindex","elem","targets","update","row","j","finishNav","valid","direction","undefined","clickable","toggleRow","pickLast","last","Settings","suggestionModes","get","getHintMode","allSuggestionModes","recyclings","reverse","setCardProperties","isOnTop","result","_position","moveToWaste","recycleWaste","Suggestions","evaluateOptions","disableAllSuggestions","NONE","getUncoverOptions","getPutdownSuggestions","getPickupOptions","FULL","SCORED","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","onClickhidden","canUncover","getStack","canPutDown","range","getTableauOrder","indexOf","getCard","stackEntropy","entropy","concat","offset","canAdd","suggestor","withSuggestions","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","createContext","BoardProvider","Provider","BoardWrap","setState","render"],"mappings":"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","file":"static/js/5.287711d8.chunk.js","sourcesContent":["import { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GamePad from \"../../../common/GamePad\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardGamePad = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isGamePadDriven = state.settings.launchSettings.inputMode == \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n\n    const switchToGamePad = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight(switchToGamePad)}\n            onUp={() => props.onUp(switchToGamePad)}\n            onDown={() => props.onDown(switchToGamePad)}\n            onAction={() => props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToGamePad)}\n            onMenu={() => props.onMenu(switchToGamePad)}\n        />\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"../../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GlobalContext from \"../../Context\";\nimport Keyboard from \"../../../common/Keyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardKeyboard = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isKeyboardDriven = state.settings.launchSettings.inputMode === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import { BoardContext } from \"../BoardWrap\";\nimport BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\ntype _mod = (state: Model) => void;\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const isPaused = !!paused.state.paused;\n\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const handlers = {\n        onLeft: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveLeft(before);\n            }),\n\n        onRight: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveRight(before);\n            }),\n\n        onUp: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveUp(before);\n            }),\n\n        onDown: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveDown(before);\n            }),\n\n        onAction: (modifier: _mod) =>\n            updateGameContext((ctx) => {\n                modifier(ctx);\n                const handler = state?.navigator?.pressCurrent();\n                handler && handler(ctx);\n            }),\n\n        onCancel: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n            }),\n\n        onPause: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n\n        onHint: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n                if (isVisible(state) && !isDisabled(state)) {\n                    state.settings.enableHint();\n                }\n            });\n        },\n\n        onUndo: () => {\n            replaceContext((_state) => {\n                const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n                if (previous) {\n                    previous.game.rating.penalize(_state.game.rating);\n                    return previous;\n                }\n                return null;\n            });\n        },\n        onMenu: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n    };\n\n    return isPaused ? null : (\n        <>\n            <BoardKeyboard {...handlers} />\n            <BoardGamePad {...handlers} />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import GlobalContext from \"../Context\";\nimport React from \"react\";\n\nconst Dealer: () => any = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const timeouts: any[] = [];\n\n    if (state.settings.launchSettings.quickDeal) {\n        if (state && state.dealer && !state.dealer.isDealt) {\n            replaceContext(state.dealer.dealAll());\n        }\n    } else {\n        const deal = (dealt: number) => {\n            timeouts.push(\n                setTimeout(() => {\n                    if (state && state.dealer && !state.dealer.isDealt) {\n                        replaceContext(state.dealer.dealOne(dealt, deal));\n                    }\n                }, 35)\n            );\n        };\n\n        React.useEffect(() => {\n            deal(state.dealer.dealt);\n            return () =>\n                timeouts.forEach((timeout) => {\n                    clearTimeout(timeout);\n                });\n        }, []);\n        React.useEffect(() => {}, [state.dealer.isDealt]);\n    }\n    return null;\n};\nexport default Dealer;\n","import { Component } from \"react\";\nimport GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport Model from \"../../Model/Model\";\n\nexport type _selector = (model: Model) => IStack;\nexport default class BlinkingComponent<T> extends Component<T> {\n    timeout: any;\n    selector: _selector;\n    constructor(props: T, selector: _selector) {\n        super(props);\n        this.timeout = null;\n        this.selector = selector;\n    }\n\n    static contextType = GlobalContext;\n\n    componentDidUpdate() {\n        if (this.selector(this.context.state).blinkFor) {\n            this.timeout = setTimeout(\n                () =>\n                    this.context.updateGameContext((state: Model) => {\n                        this.selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timeout);\n    }\n}\n","const getStackLabel = (source: string) => {\n    const names = [0, 1, 2, 3, 4, 5, 6].map((id) => \" stack \" + (id + 1));\n    let label = \"\";\n    const split = source.split(\"-\");\n    label += split[0];\n    if (split.length > 1) {\n        label += names[parseInt(split[1])];\n    }\n    return label;\n};\n\nexport default getStackLabel;\n","import CardModel from \"../../Model/Deck/Card\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\n\ntype CardProps = {\n    model: CardModel;\n    isSuggested?: boolean;\n    isSelected?: boolean;\n    blink?: number;\n    zIndex?: number;\n    offsetTop?: number;\n    offsetLeft?: number;\n};\n\nconst Card = (props: CardProps) => {\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const pause = React.useContext(PauseContext);\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const isFocused = state.focus.hasCard(props.model);\n    React.useEffect(() => {\n        if (isFocused && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n    }, [isFocused, state.focus.card]);\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        let ele = e.target;\n\n        while (ele && !ele.className.includes(\"card-base\")) {\n            ele = ele.offsetParent;\n        }\n\n        const rect = ele.getBoundingClientRect();\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - ele.ownerDocument.defaultView.pageXOffset,\n                y: e.clientY - ele.ownerDocument.defaultView.pageYOffset,\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n        const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n        //@todo A11Y allow keyboard actions in singleplayer\n        if (props.model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                props.model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.inputMode = \"mouse\";\n                }\n            });\n        }\n    };\n\n    const getClassName = () => {\n        const hasSuggestion = props.isSuggested || props.model.suggestion;\n        let className = `card card-base suit-${props.model.type.icon}`;\n        className += !props.isSelected && !isFocused && !hasSuggestion ? ` card-stack-${props.model.source}` : \"\";\n        className += props.isSelected ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += props.model.canClick() ? \" clickable\" : \"\";\n        //@todo onhover, trigger highlight of suggested target card/stack (preview what happens if picked up)\n        className += hasSuggestion && !isFocused ? \" card-suggested\" : \"\";\n        className += isFocused ? \" card-focused\" : \"\";\n        return className;\n    };\n\n    const getCardStyle = () => {\n        const style = {\n            zIndex: (props.zIndex ? props.zIndex : (props.offsetTop ? 1 : 0) * 20) + 1,\n            top: props.offsetTop ? props.offsetTop / 15 + \"em\" : 0,\n            ...props.model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft * 2 + \"em\";\n        }\n\n        if (!props.model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    };\n\n    const getStackbaseStyle: () => React.CSSProperties = () => {\n        if (!props.model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": \";\n\n    label += props.model.isHidden ? \"hidden card\" : props.model.type.icon + props.model.face;\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n\n    return (\n        <div style={getStackbaseStyle()} className=\"stack-base\">\n            <button\n                onFocus={() => {\n                    // updateContext((ctx) => {\n                    //     ctx.navigator.update(props.model.source, props.model);\n                    // });\n                }}\n                onBlur={() => {\n                    //updateContext((ctx) => ctx.focus.unsetCard(props.model));\n                }}\n                style={getCardStyle()}\n                ref={inputEl}\n                className={getClassName()}\n                onClick={onClick}\n                disabled={!props.model.canClick() || pause.state.paused}\n                tabIndex={props.model.canClick() ? 0 : -1}\n                aria-label={label}\n                title={label}\n            >\n                <div className=\"card-content\">\n                    {props.model.isHidden || pause.state.paused ? (\n                        <div className=\"card-back\">&nbsp;</div>\n                    ) : (\n                        <div className=\"card-grid-container\">\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-left\">{props.model.face}</div>\n                            </div>\n                            <div>&nbsp;</div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div className=\"mainface\">\n                                <div className=\"align-center\">{props.model.face}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div>&nbsp;</div>\n                            <div>\n                                <div className=\"align-right\">{props.model.face}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </button>\n        </div>\n    );\n};\n\nexport default Card;\n","import Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport React from \"react\";\n\nconst Hand = (props: { parentModel: IStack; offsetTop?: number; offsetLeft?: number }) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state || !state.hand || props.parentModel.source !== state.hand.source) {\n        return null;\n    }\n\n    return (\n        <>\n            {[\n                state.hand &&\n                    state.hand.stack &&\n                    state.hand.stack.map((card, index) => (\n                        <Card\n                            key={index}\n                            model={card}\n                            offsetTop={(props.offsetTop || 0) + index * 24}\n                            offsetLeft={props.offsetLeft}\n                            zIndex={1000 + index * 20}\n                            isSelected={true}\n                        />\n                    )),\n            ]}\n        </>\n    );\n};\n\nexport default Hand;\n","import GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\n\nconst StackBase = (props: { model: IStack; children?: any|null }) => {\n    let classname = \"card-base socket\";\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    React.useEffect(() => {\n        if (state.focus.hasStack(props.model.source) && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            const current = inputEl && inputEl.current ? inputEl.current : null;\n            current && current.focus();\n        }\n    });\n    if (!props.model.stack.length) {\n        if (props.model.blinkFor) {\n            classname += \" socket-blink\";\n        } else if (state.focus.hasStack(props.model.source)) {\n            classname += \" socket-focused\";\n        } else {\n            classname += \" socket-empty\";\n        }\n    } else {\n        classname += \" socket-full\";\n    }\n\n    if (props.model.suggestion && !props.model.stack.length) {\n        classname += \" socket-suggested\";\n    }\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": empty socket\";\n\n    return (\n        <button\n            onFocus={() => {\n                // updateContext((ctx) => {\n                //     ctx.navigator.update(props.model.parent);\n                // });\n            }}\n            onBlur={() => {\n                // updateContext((ctx) => ctx.focus.unsetStack(props.model.parent));\n            }}\n            ref={inputEl}\n            className={classname}\n            onClick={onClick}\n            disabled={!!props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n            aria-label={label}\n            title={label}\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import BlinkingComponent from \"./BlinkingComponent\";\nimport Card from \"./Card\";\nimport { FoundationStack } from \"../../Model/Game/Foundation\";\nimport GlobalContext from \"../Context\";\nimport Hand from \"./Hand\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\n\ntype FoundationProps = { index: number; model: FoundationStack };\n\nexport default class Foundation extends BlinkingComponent<FoundationProps> {\n    constructor(props: FoundationProps) {\n        super(props, (s) => s.foundation.stacks[props.index]);\n    }\n\n    static Stacks = () => {\n        const { state } = React.useContext(GlobalContext);\n        if (!state) return null;\n        return (\n            <>\n                {state.foundation.stacks.map((foundation, index) => (\n                    <Foundation key={index} model={foundation} index={index} />\n                ))}\n            </>\n        );\n    };\n\n    render() {\n        const model = this.props.model;\n        return (\n            <div className=\"board-field\" key={this.props.index}>\n                <StackBase model={model}>\n                    <div className={\"align-center foundation-base suit-\" + model.icon}>{model.icon}</div>\n                </StackBase>\n                {model.stack.map((card, index) => (\n                    <Card\n                        key={index}\n                        model={card}\n                        blink={model.blinkFor}\n                        isSuggested={model.suggestion && model.stack.length - 1 == index}\n                    />\n                ))}\n                <Hand parentModel={model} />\n            </div>\n        );\n    }\n}\n","import PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst Clock = () => {\n    const { state, getElapsed } = React.useContext(PauseContext);\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (state.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [state.started, state.paused]);\n\n    return !state.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Hearts = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode == \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst Hint = () => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Points = () => {\n    const { state } = React.useContext(GlobalContext);\n\n    return (\n        <>\n            <div className=\"icon-container\">🏆</div> {state?.game.rating.points}\n        </>\n    );\n};\n\nexport default Points;\n","import { BoardContext } from \"../../Game/BoardWrap\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst ToggleMenu = () => {\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n\n    return (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Undo = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"../../Style/Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import \"../Style/Menu.scss\";\n\nimport { NavigationContext, NavigationProvider, NavigationState } from \"./StartScreen/Context\";\nimport { Universal, getKeyboardLayout } from \"../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../Game/BoardWrap\";\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\n\nconst _Menu = () => {\n    const [navigation, setNavigation] = React.useState<NavigationState>({\n        menu: {\n            x: 0,\n            y: 0,\n        },\n        screen: {\n            x: 0,\n            y: 0,\n        },\n        focus: \"menu\",\n        mainMenu: \"\",\n        screeen: \"\",\n    });\n    const navigationContext = {\n        navigation,\n        setNavigation,\n    };\n    return (\n        <NavigationProvider value={navigationContext}>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = React.useContext(NavigationContext);\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n    if (!state) {\n        return null;\n    }\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining == 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining == 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) [(announcement = \"The game is not paused.\")];\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle label=\"😴\" />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle label=\"😴\" />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon=\"▶️\"\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                        />\n                        <MenuButton\n                            icon=\"🌪️\"\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            toggled={navigation.mainMenu == \"entropy\"}\n                        >\n                            <MenuButton\n                                icon=\"🌪️\"\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                            />\n                            <MenuButton\n                                icon=\"🌬️\"\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon=\"♻️\"\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon=\"🗑️\" title=\"Quit Game\" onClick={() => restart()} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import React from \"react\";\n\nconst usePrevious = <T>(value: T) => {\n    const ref = React.useRef<T>();\n    React.useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n","import BlinkingComponent from \"./BlinkingComponent\";\nimport Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport usePrevious from \"./usePrevious\";\n\nconst Renderer = (props: { length: number }) => {\n    const { state } = React.useContext(PauseContext);\n    const { paused, started } = state;\n    return <InnerRenderer length={props.length} paused={paused} started={started} />;\n};\n\nconst InnerRenderer = (props: { length: number; paused: boolean; started: number }) => {\n    const context = React.useContext(GlobalContext);\n\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout: any = null;\n        if (\n            context &&\n            context.state &&\n            context.state.settings.launchSettings.speed &&\n            started &&\n            !paused &&\n            previous &&\n            (previous?.length != length || previous?.started != started || previous?.paused != paused)\n        ) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (\n                        length == state.stock.stack.length &&\n                        state.stock.passes > 0 &&\n                        (state.stock.stack.length || state.waste.stack.length)\n                    ) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => clearTimeout(timeout);\n    }, [length, paused, started]);\n\n    if (!context || !context.state) return null;\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            {context.state.stock.stack.map((card, index) => (\n                <Card\n                    key={index}\n                    model={card}\n                    offsetTop={(index / 2) * -1}\n                    zIndex={index}\n                    blink={context?.state?.stock.blinkFor}\n                    isSuggested={context?.state?.stock.suggestion && index == context.state.stock.stack.length - 1}\n                />\n            ))}\n        </div>\n    );\n};\n//Can't use multiple contexts in one React class, need two renderer functions to feed two contexts into props for reliable detection of changes\nexport default class Stock extends BlinkingComponent<{}> {\n    constructor(props: {}) {\n        super(props, (s) => s.stock);\n    }\n\n    render() {\n        return <Renderer length={this.context.state.stock.stack.length} />;\n    }\n}\n","import TableauModel, { TableauStack } from \"../../Model/Game/Tableau\";\n\nimport BlinkingComponent from \"./BlinkingComponent\";\nimport Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport Hand from \"./Hand\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\n\ntype TableauProps = { index: number; model: TableauStack; parent: TableauModel };\n\nexport default class Tableau extends BlinkingComponent<TableauProps> {\n    constructor(props: TableauProps) {\n        super(props, (s) => s.tableau.stacks[props.index]);\n    }\n\n    static Stacks = () => {\n        const { state } = React.useContext(GlobalContext);\n        if (!state) return null;\n        return (\n            <>\n                {state.tableau.stacks.map((tableau, index) => (\n                    <Tableau key={index} index={index} model={tableau} parent={state.tableau} />\n                ))}\n            </>\n        );\n    };\n\n    render() {\n        const props = this.props;\n        let offset = 1;\n        const getOffset = (index: number) => {\n            for (let i = 0; i <= index; i++) {\n                if (props.model.stack[i] && !props.model.stack[i].isHidden) {\n                    offset = i * 12 + (index - i) * 24;\n                    return offset;\n                }\n            }\n            offset = index * 12;\n            return offset;\n        };\n\n        return (\n            <div className=\"board-field\">\n                <StackBase model={props.model} />\n                {props.model.stack.map((card, index) => (\n                    <Card\n                        key={index}\n                        model={card}\n                        blink={props.model.blinkFor}\n                        isSuggested={props.model.suggestion && props.model.stack.length - 1 == index}\n                        offsetTop={getOffset(index)}\n                    />\n                ))}\n                <Hand parentModel={props.model} offsetTop={getOffset(props.model.stack.length)} />\n            </div>\n        );\n    }\n}\n","import BlinkingComponent from \"./BlinkingComponent\";\nimport Card from \"./Card\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport Hand from \"./Hand\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\n\nexport default class Waste extends BlinkingComponent<{}> {\n    constructor(props: {}) {\n        super(props, (s: Model) => s.waste);\n    }\n\n    render() {\n        const { state } = this.context;\n        const getOffset = (index: number) => {\n            if (state.settings.launchSettings.drawMode == \"single\") {\n                return 0;\n            }\n            const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n            let additionalOffset = 2;\n            if (length == 2) {\n                additionalOffset = 1;\n            }\n\n            if (length == 1) {\n                additionalOffset = 0;\n            }\n\n            return ((index - length - 2) % 3) + additionalOffset;\n        };\n\n        return (\n            <div className=\"board-field\">\n                <StackBase model={state.waste} />\n                {state.waste.stack.map((card: CardModel, index: number) => (\n                    <Card\n                        key={index}\n                        model={card}\n                        offsetTop={(index / 2) * -1}\n                        offsetLeft={getOffset(index)}\n                        blink={state.waste.blinkFor}\n                        isSuggested={state.waste.suggestion && index == state.waste.stack.length - 1}\n                    />\n                ))}\n                <Hand\n                    offsetTop={(state.waste.stack.length / 2) * -1}\n                    offsetLeft={getOffset(state.waste.stack.length)}\n                    parentModel={state.waste}\n                />\n            </div>\n        );\n    }\n}\n","import \"../Style/Board.scss\";\n\nimport BoardNavigator from \"./Navigation/BoardNavigator\";\nimport Dealer from \"./Dealer\";\nimport Foundation from \"./Foundation\";\nimport Header from \"../UI/Header/Header\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nconst Board = (props: any) => (\n    <>\n        <Menu />\n        <Header mode={props.mode} />\n        <div className={\"board-jail \" + props.mode}>\n            <div className={\"board-grid-container \" + props.mode}>\n                <Stock />\n                <Waste />\n                <div className=\"spacer\">&nbsp;</div>\n                <Foundation.Stacks />\n                <Tableau.Stacks />\n            </div>\n        </div>\n        <Dealer />\n        <BoardNavigator />\n    </>\n);\n\nexport default Board;\n","import \"../Style/Screens.scss\";\n\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\n\nconst EndScreen = () => {\n    const { state, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    //@todo show launch settings (draw mode, recycling mode)\n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover();\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: any) => (state: Model) => {\n        if (dealt != state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n        if (state.dealer.isDealt) {\n            state.game.started = Date.now();\n        }\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt != state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        state.game.started = Date.now();\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                if (newCard) {\n                    newCard.source = tableau.stacks[i].source;\n                    if (stack.length == tableau.stacks.length - 1 - i) {\n                        newCard.isHidden = false;\n                    }\n                    tableau.deal(newCard, i);\n                    this.dealt++;\n                    this.dealingAt++;\n                    if (this.dealingAt == tableau.stacks.length) {\n                        this.dealingAt = 0;\n                    }\n                    this.isDealt = false;\n                }\n                return;\n            } else {\n                const isFirst = this.dealingAt == 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n    }\n\n    validSettings = () => this.settings.launchSettings.inputMode !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack == stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && this.card && card && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack == stack;\n}\n","import Card from \"../Deck/Card\";\n\nexport default class BasicStack {\n    source: string;\n    constructor(source: string) {\n        this.source = source;\n    }\n    stack: Card[] = [];\n    getTop: () => Card | null = () => (this.stack && this.stack.length && this.stack[this.stack.length - 1]) || null;\n    suggestion = false;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n}\n","import BasicStack from \"./BasicStack\";\nimport Hand from \"./Hand\";\n\nexport default class HandHoldingStack extends BasicStack {\n    hand: Hand;\n    constructor(source: string, hand: Hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source == this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n    blinkFor = 0;\n    unblink = () => {};\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport Suits from \"../Deck/Suits\";\nimport { XY } from \"../../View/UI/XY\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nexport class FoundationStack extends HandHoldingStack implements IStack {\n    setOnClick: () => void = () => {};\n    acceptedCards: string[] = [];\n    usedCards: any[] = [];\n    icon: string = \"\";\n    color: string = \"\";\n    blinkFor: number = 0;\n    clickEmpty: (p: any) => any = () => {};\n}\nexport default class Foundation {\n    settings: Settings;\n    hand: Hand;\n    stacks: FoundationStack[];\n    blinkFor: number;\n    unblink: () => void;\n    constructor(settings: Settings, hand: Hand) {\n        this.settings = settings;\n        this.hand = hand;\n        const template = (index: number) => {\n            const s = new FoundationStack(\"foundation-\" + index, hand);\n            s.stack = [];\n            s.acceptedCards = [...getFoundationOrder()];\n            s.usedCards = [];\n            s.icon = \"\";\n            s.color = \"\";\n            s.blinkFor = 0;\n            return s;\n        };\n        const stacks = Object.keys(Suits)\n            .map((key: string) => Suits[key])\n            .map((suit, index) => ({ ...template(index), ...suit }));\n        this.stacks = [...stacks];\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, index: number) => (s:any) => void) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                card.onClick = (p: XY) => onClick({ ...card }, p, index);\n                card.canClick = () => sindex == stack.stack.length - 1;\n            });\n            this.hand.setOnClick(stack);\n        });\n    };\n\n    getCurrentAccepted = (index: number) => {\n        const currentFoundation = this.stacks[index].acceptedCards;\n        return currentFoundation[currentFoundation.length - 1];\n    };\n\n    wouldAcceptHand = (index: number) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    accepts = (index: number, card: Card | null) => {\n        if (!card) return false;\n        const currentAccepted = this.getCurrentAccepted(index);\n        return this.stacks[index].icon == card.type.icon && currentAccepted == card.face;\n    };\n\n    add = (index: number, cards: Card[]) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index: number, card: Card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return (card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop()) || null;\n    };\n\n    getPreviousUsed = (index: number) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => f.stack.length).reduce((a, b) => a + b, 0);\n\n    getTop = (index: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig: Foundation, hand: Hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new FoundationStack(origStack.source, hand);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src);\n            this.tryDetectEnd(state);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card | null, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.face) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    //@todo move this to a generic place, also detect failure\n    tryDetectEnd(state: Model) {\n        const nrofCards = state.foundation.countCards();\n        if (nrofCards === 52) {\n            state.game.isEnded = true;\n            state.game.end = Date.now();\n        }\n    }\n}\n","import Settings from \"./Settings\";\n\nexport default class Rating {\n    settings: Settings;\n    points: number;\n    multiplicator: number;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode == \"single\" && this.settings.launchSettings.recyclingMode == \"infinite\") {\n            if (this.points > 0) {\n                if (this.points < 100) {\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                }\n            }\n            console.debug(\"RATING: subtract (max) 100 points for RECYCLE\");\n        }\n    };\n\n    registerUncover = () => {\n        this.registerHint(this.settings.disableHint());\n        this.points += 5;\n        console.debug(\"RATING: add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on: boolean) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            console.debug(\"RATING: subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other: Rating) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            console.debug(`RATING: applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done: boolean) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            console.debug(`RATING: applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move: { source: string; target: string }) {\n        const isTableau = (obj: string) => obj.substr(0, 7) == \"tableau\";\n        const isFoundation = (obj: string) => obj.substr(0, 10) == \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                console.debug(\"RATING: add 10 points for MOVE tableau -> foundation\");\n                return 10;\n            }\n        } else if (move.source == \"waste\") {\n            if (isFoundation(move.target)) {\n                console.debug(\"RATING: add 10 points for MOVE waste -> foundation\");\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                console.debug(\"RATING: add 5 points for MOVE waste -> tableau\");\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                console.debug(\"RATING: subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start: number, end: number) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    };\n\n    static copy = (orig: Rating) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Model from \"../Model\";\n\nexport default class TimeMachine {\n    previousStates: any[];\n    memorable: boolean;\n    modified: boolean;\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source == target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state: any) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id: number, current: any) => {\n        const isRequested = this.previousStates.length - 1 == id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        if (on) {\n            this.modified = true;\n            this.memorable = false;\n        }\n    }\n\n    stackEquals = (a: IStack, b: IStack) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden == b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a: { stacks: IStack[] }, b: { stacks: IStack[] }) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a: Model, b: Model) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig: TimeMachine) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Rating from \"./Rating\";\nimport Settings from \"./Settings\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    settings: Settings;\n    rating: Rating;\n    timemachine: TimeMachine;\n    started: number;\n    isEnded: boolean;\n    end: number;\n    paused: any;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n        //@todo move to context:\n        this.started = 0;\n        this.isEnded = false;\n        this.end = 0;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.rating.registerMove(target, source);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = () => {\n        this.rating.registerUncover();\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig: Game) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        copy.paused = orig.paused;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    filter: (stack: any[]) => Card[] = (stack) => {\n        return stack.filter((c) => c);\n    };\n\n    pickUp = (stack: (Card | null)[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = this.filter(stack).map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source == model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.face == \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source == this.source) || null;\n\n    isFromWaste = () => this.source && this.source == \"waste\";\n\n    isFromFoundation = (index: number) => this.source && this.source == `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source == `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) == \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/IStack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: (IStack | undefined)[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source == pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x == -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x == 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        const current = this.current();\n        if (current == undefined) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = current.getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y == 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const current = this.current();\n        const last: number = current ? current.getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (!current) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current()?.source || \"\");\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = () => {\n        if (this.model.focus.card && this.model.focus.card.canClick()) {\n            return this.model.focus.card.onClick({ isKeyboard: true });\n        } else if (this.model.focus.stack) {\n            return this.current()?.clickEmpty({ isKeyboard: true });\n        } else {\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./BasicStack\";\nimport Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Stock extends BasicStack implements IStack {\n    settings: Settings;\n    recyclings: number;\n    passes: number;\n    blinkFor: number;\n    unblink: () => void;\n    clickEmpty: (p: any) => (s: any) => void;\n    constructor(stack: Card[], settings: Settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        this.clickEmpty = () => () => {};\n        if (this.settings.launchSettings.recyclingMode == \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode == \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: XY) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n    };\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode == \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode == \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste: Card[]) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card: Card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card: Card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result: Card[] = [];\n        if (this.settings.launchSettings.drawMode == \"single\") {\n            const top = this.stack.pop();\n            if (top) result = [top];\n        }\n        if (this.settings.launchSettings.drawMode == \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length == 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig: Stock) => {\n        const copy = new Stock([], orig.settings);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\");\n    };\n\n    recycleWaste = (state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\")) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key == SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key == SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length == 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length == 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].face ==\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].face &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (this.getPutdownSuggestions(tableauState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nexport class TableauStack extends HandHoldingStack implements IStack {\n    //@todo move to IStack, make boolean\n    blinkFor = 0;\n    id = 0;\n    // eslint-disable-next-line no-unused-vars\n    onClick = (a: any) => (s: any) => {};\n    // eslint-disable-next-line no-unused-vars\n    clickEmpty = (a: any) => (s: any) => {};\n    setOnClick = () => {};\n}\nexport default class Tableau {\n    stacks: TableauStack[];\n    settings: Settings;\n    hand: Hand;\n\n    constructor(settings: Settings, hand: Hand) {\n        const ids = [0, 1, 2, 3, 4, 5, 6];\n        this.hand = hand;\n        this.stacks = ids.map((id) => {\n            const s = new TableauStack(\"tableau-\" + id, hand);\n            s.stack = [];\n            s.blinkFor = 0;\n            s.id = id;\n            return s;\n        });\n        this.settings = settings;\n    }\n\n    setOnClick = (\n        onClick: (a: any, b: any, index: number) => (s: any) => void,\n        onClickhidden: (a: any, b: any, index: number) => (s: any) => void,\n        hand: Hand\n    ) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p: any) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                const click = card.isHidden && sindex == stack.stack.length - 1 ? onClickhidden : onClick;\n                card.onClick = (p: any) => click({ ...card }, p, index);\n                card.canClick = () => !card.isHidden || this.canUncover(index, card) || false;\n            });\n            hand.setOnClick(stack);\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        const top = this.getTop(index);\n        if (!top) {\n            return current && current.face === \"K\";\n        }\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = current ? range.indexOf(current.face) : 0;\n        const topIndex = range.indexOf(top.face);\n        return currentIndex + 1 == topIndex && current?.type.color !== top.type.color && top.face !== \"A\";\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        return top.isHidden && card && card.equals(this.getTop(index));\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy != 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, cards: Card[]) => {\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number) => {\n        card.source = this.stacks[index].source;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1 - (offset || 0)];\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map((stack, index) => {\n            const s = new TableauStack(stack.source, hand);\n            s.id = index;\n            s.stack = Card.copyAll(stack.stack);\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Waste extends HandHoldingStack {\n    settings: Settings;\n    blinkFor: number;\n    unblink: () => void;\n    clickEmpty: (p: any) => (s: any) => void;\n    constructor(settings: Settings, hand: Hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        this.clickEmpty = () => () => {};\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: XY) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card: Card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards: Card[]) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card: Card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    canAdd = (card: Card | null) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card: Card) => (card && card.equals(this.getTop()) && this.stack.pop()) || null;\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig: Waste, hand: Hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n    }\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()), this.hand);\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings),\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n        });\n    };\n}\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../Context\";\nimport React from \"react\";\n\nexport const BoardContext = React.createContext({\n    player: 0,\n});\n\nconst BoardProvider = BoardContext.Provider;\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                return state;\n            }\n\n            return null;\n        });\n\n    //on every render, we refresh the click handlers in the model and the suggestions\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider value={{ player: this.props.player }}>\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n"],"sourceRoot":""}