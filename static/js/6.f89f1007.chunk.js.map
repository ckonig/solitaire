{"version":3,"sources":["View/Game/Navigation/BoardGamePad.tsx","View/Game/Navigation/BoardKeyboard.tsx","View/Game/Navigation/BoardNavigator.tsx","View/Game/Dealer.tsx","View/Game/StackDescription.ts","View/Game/Card.tsx","View/Game/StackBase.tsx","View/Game/useBlinkEffect.ts","View/Game/Foundation.tsx","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","View/UI/Menu.tsx","View/Game/usePrevious.ts","View/Game/Stock.tsx","View/Game/Tableau.tsx","View/Game/Waste.tsx","View/Game/Board.tsx","View/UI/EndScreen.js","Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/BasicStack.ts","Model/Game/HandHoldingStack.ts","Model/Game/Foundation.ts","Model/Business/Foundation.ts","Model/Game/Rating.ts","Model/Game/TimeMachine.ts","Model/Game/Game.ts","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.ts","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/Tableau.ts","Model/Game/Waste.ts","Model/Model.ts","View/Game/BoardWrap.tsx"],"names":["BoardGamePad","props","state","React","useContext","GlobalContext","player","BoardContext","isGamePadDriven","settings","launchSettings","inputMode","isSinglePlayer","boardMode","GameModes","SINGLEPLAYER","switchToGamePad","ctx","focus","isKeyBoard","GamePad","gamepadIndex","players","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","layout","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","BoardNavigator","updateContext","updateGameContext","replaceContext","paused","PauseContext","before","x","navigator","currentIndex","y","z","isPaused","handlers","modifier","moveLeft","moveRight","moveUp","moveDown","handler","pressCurrent","hand","stack","length","onClick","isKeyboard","togglePause","suggestionMode","supportsHints","isTemporary","isVisible","isDisabled","enableHint","_state","previous","game","timemachine","popPreviousState","previousStates","rating","penalize","Dealer","timeouts","quickDeal","dealer","isDealt","dealAll","deal","dealt","push","setTimeout","dealOne","useEffect","forEach","timeout","clearTimeout","getStackLabel","source","names","map","id","label","split","parseInt","Card","ReRender","offsetTop","offsetLeft","displayName","pause","inputEl","useRef","isFocused","hasCard","model","useState","isDrag","setDrag","useDrag","item","type","text","render","collect","monitor","opacity","isDragging","canDrag","canClick","currentCard","equals","begin","console","log","isSelected","context","end","_item","didDrop","dragRef","current","card","isHidden","icon","face","style","pointerEvents","className","onFocus","onBlur","zIndex","top","entropyStyle","left","getCardStyle","ref","hasSuggestion","isSuggested","suggestion","blink","getClassName","e","preventDefault","clientX","clientY","ele","target","includes","offsetParent","rect","getBoundingClientRect","position","click","ownerDocument","defaultView","pageXOffset","pageYOffset","element","disabled","tabIndex","aria-label","title","StackBase","classname","hasStack","blinkFor","clickEmpty","children","useBlinkEffect","selector","unblink","FoundationStacks","foundation","stacks","index","Foundation","useDrop","accept","drop","cards","Clock","getElapsed","elapsed","setElapsed","interval","setInterval","started","clearInterval","Hearts","recyclingMode","stock","passes","createString","Array","from","keys","join","getHearts","Hint","Points","points","ToggleMenu","Undo","Math","pow","multiplicator","Header","mode","Menu","restart","NavigationContext","navigation","setNavigation","switchToMenu","menu","pos","screeen","mainMenu","showMenu","remaining","allowed","pauses","announcement","keyboardLayout","pausedBy","MenuTitle","MenuTree","MenuButton","sm","SuggestionModes","next","key","setSuggestionMode","val","toggleMainMenu","toggled","EntropyLevels","baseEntropy","lvl","setEntropy","interactionEntropy","skip","_Menu","screen","navigationContext","value","usePrevious","Renderer","speed","waste","isFromWaste","putDownHand","addAll","popTop","canRecycle","recycle","Stock","TableauStacks","tableau","parent","Tableau","s","getOffset","i","Waste","drawMode","isHoldingCard","additionalOffset","TouchPreview","usePreview","display","_itemType","reff","width","Board","DndProvider","backend","TouchDetector","TouchBackend","HTML5Backend","EndScreen","isEnded","getTimePenalty","Date","now","getBonusPoints","getTotal","Blinker","startBlink","registerBlink","stopBlink","dispatchPutDown","wouldAcceptHand","src","registerMove","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","uncover","registerUncover","dealingAt","callback","newCard","popOne","isFirst","this","Dispatcher","clickHandler","getHandler","Focus","keyboard","validSettings","setCard","unsetCard","unsetStack","setStack","BasicStack","getTop","getClickable","filter","HandHoldingStack","getHandContent","FoundationStack","setOnClick","acceptedCards","usedCards","color","p","sindex","getCurrentAccepted","currentFoundation","hasMoreThanOneCard","accepts","add","putDown","currentAccepted","causeEntropy","min","pop","remove","getPreviousUsed","countCards","f","reduce","a","b","Object","Suits","suit","getFoundationOrder","template","copy","orig","origStack","copyAll","tryDetectEnd","_card","Rating","registerHint","disableHint","currentMove","rateMove","registerRecycle","debug","other","undoPenalty","penalty","done","hintPenalty","start","secondsToFinish","trunc","round","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","memorable","modified","pushPreviousState","modelEquals","isRequested","popPrevious","stackEquals","every","stacksEqual","Game","Hand","c","splice","_onClick","isHoldingKing","isFromCurrentSource","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","Navigator","rows","getZindex","elem","targets","update","row","j","finishNav","valid","direction","undefined","clickable","toggleRow","pickLast","last","Settings","suggestionModes","get","getHintMode","allSuggestionModes","recyclings","reverse","setCardProperties","isOnTop","result","_position","moveToWaste","recycleWaste","Suggestions","evaluateOptions","disableAllSuggestions","NONE","getUncoverOptions","getPutdownSuggestions","getPickupOptions","FULL","SCORED","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","onClickhidden","canUncover","getStack","canPutDown","range","getTableauOrder","indexOf","getCard","stackEntropy","entropy","concat","offset","canAdd","suggestor","withSuggestions","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","createContext","BoardProvider","Provider","BoardWrap","setState","Component"],"mappings":"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","file":"static/js/6.f89f1007.chunk.js","sourcesContent":["import { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GamePad from \"../../../common/GamePad\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardGamePad = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isGamePadDriven = state.settings.launchSettings.inputMode == \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n\n    const switchToGamePad = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight(switchToGamePad)}\n            onUp={() => props.onUp(switchToGamePad)}\n            onDown={() => props.onDown(switchToGamePad)}\n            onAction={() => props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToGamePad)}\n            onMenu={() => props.onMenu(switchToGamePad)}\n        />\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"../../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GlobalContext from \"../../Context\";\nimport Keyboard from \"../../../common/Keyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardKeyboard = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isKeyboardDriven = state.settings.launchSettings.inputMode === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import { BoardContext } from \"../BoardWrap\";\nimport BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\ntype _mod = (state: Model) => void;\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const isPaused = !!paused.state.paused;\n\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const handlers = {\n        onLeft: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveLeft(before);\n            }),\n\n        onRight: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveRight(before);\n            }),\n\n        onUp: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveUp(before);\n            }),\n\n        onDown: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveDown(before);\n            }),\n\n        onAction: (modifier: _mod) =>\n            updateGameContext((ctx) => {\n                modifier(ctx);\n                const handler = state?.navigator?.pressCurrent();\n                handler && handler(ctx);\n            }),\n\n        onCancel: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n            }),\n\n        onPause: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n\n        onHint: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n                if (isVisible(state) && !isDisabled(state)) {\n                    state.settings.enableHint();\n                }\n            });\n        },\n\n        onUndo: () => {\n            replaceContext((_state) => {\n                const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n                if (previous) {\n                    previous.game.rating.penalize(_state.game.rating);\n                    return previous;\n                }\n                return null;\n            });\n        },\n        onMenu: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n    };\n\n    return isPaused ? null : (\n        <>\n            <BoardKeyboard {...handlers} />\n            <BoardGamePad {...handlers} />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import GlobalContext from \"../Context\";\nimport React from \"react\";\n\nconst Dealer: () => any = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const timeouts: any[] = [];\n\n    if (state.settings.launchSettings.quickDeal) {\n        if (state && state.dealer && !state.dealer.isDealt) {\n            replaceContext(state.dealer.dealAll());\n        }\n    } else {\n        const deal = (dealt: number) => {\n            timeouts.push(\n                setTimeout(() => {\n                    if (state && state.dealer && !state.dealer.isDealt) {\n                        replaceContext(state.dealer.dealOne(dealt, deal));\n                    }\n                }, 35)\n            );\n        };\n\n        React.useEffect(() => {\n            deal(state.dealer.dealt);\n            return () =>\n                timeouts.forEach((timeout) => {\n                    clearTimeout(timeout);\n                });\n        }, []);\n        React.useEffect(() => {}, [state.dealer.isDealt]);\n    }\n    return null;\n};\nexport default Dealer;\n","const getStackLabel = (source: string) => {\n    const names = [0, 1, 2, 3, 4, 5, 6].map((id) => \" stack \" + (id + 1));\n    let label = \"\";\n    const split = source.split(\"-\");\n    label += split[0];\n    if (split.length > 1) {\n        label += names[parseInt(split[1])];\n    }\n    return label;\n};\n\nexport default getStackLabel;\n","import CardModel from \"../../Model/Deck/Card\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\nimport { useDrag } from \"react-dnd\";\n\ntype CardProps = {\n    model: CardModel;\n    isSuggested?: boolean;\n    isSelected?: boolean;\n    blink?: number;\n    zIndex?: number;\n    offsetTop?: number;\n    offsetLeft?: number;\n};\n\nconst Card = (props: CardProps) => {\n    const ReRender = () => <Card {...{ ...props, offsetTop: 0, offsetLeft: 0 }} />;\n    ReRender.displayName = \"ReRender\";\n    //@todo for proper drag & drop of stacks, we need each card to render the following ones\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const pause = React.useContext(PauseContext);\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const isFocused = state.focus.hasCard(props.model);\n    const [isDrag, setDrag] = React.useState<boolean>(false);\n    const [{ opacity }, dragRef] = useDrag({\n        item: { type: \"card\", text: \"some text\", render: ReRender },\n        collect: (monitor) => {\n            return { opacity: monitor.isDragging() ? 1 : 1 };\n        },\n        canDrag: () => props.model.canClick() && (state.hand.currentCard() == null || props.model.equals(state.hand.currentCard())),\n        begin: (monitor) => {\n            console.log(monitor);\n            setDrag(true);\n            if (props.model.onClick && !props.isSelected) {\n                updateGameContext((context) => {\n                    props.model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n        end: (_item, monitor) => {\n            setDrag(false);\n            if (!monitor.didDrop()) {\n                updateGameContext((context) => {\n                    props.model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n    });\n\n    const getRef = () => (props.model.canClick() ? dragRef : inputEl);\n    React.useEffect(() => {\n        if (isFocused && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n    }, [isFocused, state.focus.card]);\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        let ele = e.target;\n\n        while (ele && !ele.className.includes(\"card-base\")) {\n            ele = ele.offsetParent;\n        }\n\n        const rect = ele.getBoundingClientRect();\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - ele.ownerDocument.defaultView.pageXOffset,\n                y: e.clientY - ele.ownerDocument.defaultView.pageYOffset,\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n        const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n        //@todo A11Y allow keyboard actions in singleplayer\n        if (props.model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                props.model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.inputMode = \"mouse\";\n                }\n            });\n        }\n    };\n\n    const getClassName = () => {\n        const hasSuggestion = props.isSuggested || props.model.suggestion;\n        let className = `card card-base suit-${props.model.type.icon}`;\n        className += !props.isSelected && !isFocused && !hasSuggestion ? ` card-stack-${props.model.source}` : \"\";\n        className += props.isSelected && !isDrag ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += props.model.canClick() ? \" clickable\" : \"\";\n        //@todo onhover, trigger highlight of suggested target card/stack (preview what happens if picked up)\n        className += hasSuggestion && !isFocused ? \" card-suggested\" : \"\";\n        className += isFocused ? \" card-focused\" : \"\";\n        return className;\n    };\n\n    const getCardStyle = () => {\n        const style = {\n            opacity,\n            zIndex: (props.zIndex ? props.zIndex : (props.offsetTop ? 1 : 0) * 20) + 1,\n            top: props.offsetTop ? props.offsetTop / 15 + \"em\" : 0,\n            ...props.model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft * 2 + \"em\";\n        }\n\n        if (!props.model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    };\n\n    const getStackbaseStyle: () => React.CSSProperties = () => {\n        if (!props.model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": \";\n\n    label += props.model.isHidden ? \"hidden card\" : props.model.type.icon + props.model.face;\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n\n    return (\n        <div style={getStackbaseStyle()} className=\"stack-base\">\n            <button\n                onFocus={() => {\n                    // updateContext((ctx) => {\n                    //     ctx.navigator.update(props.model.source, props.model);\n                    // });\n                }}\n                onBlur={() => {\n                    //updateContext((ctx) => ctx.focus.unsetCard(props.model));\n                }}\n                style={getCardStyle()}\n                // ref={inputEl}\n                ref={getRef()}\n                className={getClassName()}\n                onClick={onClick}\n                disabled={!props.model.canClick() || pause.state.paused}\n                tabIndex={props.model.canClick() ? 0 : -1}\n                aria-label={label}\n                title={label}\n            >\n                <div className=\"card-content\">\n                    {props.model.isHidden || pause.state.paused ? (\n                        <div className=\"card-back\">&nbsp;</div>\n                    ) : (\n                        <div className=\"card-grid-container\">\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-left\">{props.model.face}</div>\n                            </div>\n                            <div>&nbsp;</div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div className=\"mainface\">\n                                <div className=\"align-center\">{props.model.face}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div>&nbsp;</div>\n                            <div>\n                                <div className=\"align-right\">{props.model.face}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </button>\n        </div>\n    );\n};\n\nexport default Card;\n","import GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\n\nconst StackBase = (props: { model: IStack; children?: any | null }) => {\n    let classname = \"card-base socket\";\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    React.useEffect(() => {\n        if (state.focus.hasStack(props.model.source) && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            const current = inputEl && inputEl.current ? inputEl.current : null;\n            current && current.focus();\n        }\n    });\n    if (!props.model.stack.length) {\n        if (props.model.blinkFor) {\n            classname += \" socket-blink\";\n        } else if (state.focus.hasStack(props.model.source)) {\n            classname += \" socket-focused\";\n        } else {\n            classname += \" socket-empty\";\n        }\n    } else {\n        classname += \" socket-full\";\n    }\n\n    if (props.model.suggestion && !props.model.stack.length) {\n        classname += \" socket-suggested\";\n    }\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": empty socket\";\n\n    return (\n        <button\n            onFocus={() => {\n                // updateContext((ctx) => {\n                //     ctx.navigator.update(props.model.parent);\n                // });\n            }}\n            onBlur={() => {\n                // updateContext((ctx) => ctx.focus.unsetStack(props.model.parent));\n            }}\n            ref={inputEl}\n            className={classname}\n            onClick={onClick}\n            disabled={!!props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n            aria-label={label}\n            title={label}\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\n\ntype _selector = (model: Model) => IStack;\n\nconst useBlinkEffect = (selector: _selector) => {\n    const { updateContext, state } = React.useContext(GlobalContext);\n    if (!state) return;\n    const model = selector(state);\n    let timeout: any = null;\n    React.useEffect(() => {\n        if (state && selector(state).blinkFor) {\n            timeout = setTimeout(\n                () =>\n                    updateContext((state: Model) => {\n                        selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [state, model.blinkFor]);\n};\n\nexport default useBlinkEffect;\n","import Card from \"./Card\";\nimport { FoundationStack } from \"../../Model/Game/Foundation\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\ntype FoundationProps = { index: number; model: FoundationStack };\n\nconst FoundationStacks = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    return (\n        <>\n            {state.foundation.stacks.map((foundation, index) => (\n                <Foundation key={index} model={foundation} index={index} />\n            ))}\n        </>\n    );\n};\n\nexport default FoundationStacks;\n\nconst Foundation = (props: FoundationProps) => {\n    useBlinkEffect((model) => model.foundation.stacks[props.index]);\n    const { updateGameContext } = React.useContext(GlobalContext);\n    const model = props.model;\n    const [, drop] = useDrop({\n        accept: \"card\",\n        drop: () => {\n            console.log(\"dropping\", drop);\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n            props.model.clickEmpty({ isKeyboard: false });\n        },\n    });\n    const { state } = React.useContext(GlobalContext);\n    const cards = state?.hand.source == model.source ? [...model.stack, ...state.hand.stack] : [...model.stack];\n    return (\n        <div className=\"board-field\" key={props.index} ref={drop}>\n            <StackBase model={model}>\n                <div className={\"align-center foundation-base suit-\" + model.icon}>{model.icon}</div>\n            </StackBase>\n            {cards.map((card, index) => (\n                <Card\n                    key={index}\n                    model={card}\n                    blink={model.blinkFor}\n                    isSuggested={model.suggestion && model.stack.length - 1 == index}\n                    isSelected={index > model.stack.length - 1}\n                />\n            ))}\n        </div>\n    );\n};\n","import PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst Clock = () => {\n    const { state, getElapsed } = React.useContext(PauseContext);\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (state.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [state.started, state.paused]);\n\n    return !state.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Hearts = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode == \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst Hint = () => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Points = () => {\n    const { state } = React.useContext(GlobalContext);\n\n    return (\n        <>\n            <div className=\"icon-container\">🏆</div> {state?.game.rating.points}\n        </>\n    );\n};\n\nexport default Points;\n","import { BoardContext } from \"../../Game/BoardWrap\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst ToggleMenu = () => {\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n\n    return (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Undo = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"../../Style/Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import \"../Style/Menu.scss\";\n\nimport { NavigationContext, NavigationProvider, NavigationState } from \"./StartScreen/Context\";\nimport { Universal, getKeyboardLayout } from \"../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../Game/BoardWrap\";\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\n\nconst _Menu = () => {\n    const [navigation, setNavigation] = React.useState<NavigationState>({\n        menu: {\n            x: 0,\n            y: 0,\n        },\n        screen: {\n            x: 0,\n            y: 0,\n        },\n        focus: \"menu\",\n        mainMenu: \"\",\n        screeen: \"\",\n    });\n    const navigationContext = {\n        navigation,\n        setNavigation,\n    };\n    return (\n        <NavigationProvider value={navigationContext}>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too if consented and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = React.useContext(NavigationContext);\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n    if (!state) {\n        return null;\n    }\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining == 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining == 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) [(announcement = \"The game is not paused.\")];\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle label=\"😴\" />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle label=\"😴\" />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon=\"▶️\"\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                        />\n                        <MenuButton\n                            icon=\"🌪️\"\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            toggled={navigation.mainMenu == \"entropy\"}\n                        >\n                            <MenuButton\n                                icon=\"🌪️\"\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                            />\n                            <MenuButton\n                                icon=\"🌬️\"\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon=\"♻️\"\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon=\"🗑️\" title=\"Quit Game\" onClick={() => restart()} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import React from \"react\";\n\nconst usePrevious = <T>(value: T) => {\n    const ref = React.useRef<T>();\n    React.useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n","import Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport usePrevious from \"./usePrevious\";\n\nconst Renderer = (props: { length: number; paused: boolean; started: number }) => {\n    const context = React.useContext(GlobalContext);\n\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout: any = null;\n        if (\n            context &&\n            context.state &&\n            context.state.settings.launchSettings.speed &&\n            started &&\n            !paused &&\n            previous &&\n            (previous?.length != length || previous?.started != started || previous?.paused != paused)\n        ) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (\n                        length == state.stock.stack.length &&\n                        state.stock.passes > 0 &&\n                        (state.stock.stack.length || state.waste.stack.length)\n                    ) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => clearTimeout(timeout);\n    }, [length, paused, started]);\n\n    if (!context || !context.state) return null;\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            {context.state.stock.stack.map((card, index) => (\n                <Card\n                    key={index}\n                    model={card}\n                    offsetTop={(index / 2) * -1}\n                    zIndex={index}\n                    blink={context?.state?.stock.blinkFor}\n                    isSuggested={context?.state?.stock.suggestion && index == context.state.stock.stack.length - 1}\n                />\n            ))}\n        </div>\n    );\n};\n\nconst Stock = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    useBlinkEffect((model) => model.stock);\n    const pause = React.useContext(PauseContext);\n    const { paused, started } = pause.state;\n    return <Renderer length={state.stock.stack.length} paused={paused} started={started} />;\n};\n\nexport default Stock;\n","import TableauModel, { TableauStack } from \"../../Model/Game/Tableau\";\n\nimport Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\ntype TableauProps = { index: number; model: TableauStack; parent: TableauModel };\n\nconst TableauStacks = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    return (\n        <>\n            {state.tableau.stacks.map((tableau, index) => (\n                <Tableau key={index} index={index} model={tableau} parent={state.tableau} />\n            ))}\n        </>\n    );\n};\nexport default TableauStacks;\n\nconst Tableau = (props: TableauProps) => {\n    useBlinkEffect((s) => s.tableau.stacks[props.index]);\n    const { updateGameContext } = React.useContext(GlobalContext);\n    const [, drop] = useDrop({\n        accept: \"card\",\n        drop: () => {\n            console.log(\"dropping\", drop);\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n            props.model.clickEmpty({ isKeyboard: false });\n        },\n    });\n    let offset = 1;\n    const getOffset = (index: number) => {\n        for (let i = 0; i <= index; i++) {\n            if (props.model.stack[i] && !props.model.stack[i].isHidden) {\n                offset = i * 12 + (index - i) * 24;\n                return offset;\n            }\n        }\n        offset = index * 12;\n        return offset;\n    };\n\n    const { state } = React.useContext(GlobalContext);\n    const cards = state?.hand.source == props.model.source ? [...props.model.stack, ...state.hand.stack] : [...props.model.stack];\n\n    return (\n        <div className=\"board-field\" ref={drop}>\n            <StackBase model={props.model} />\n            {cards.map((card, index) => (\n                <Card\n                    key={index}\n                    model={card}\n                    blink={props.model.blinkFor}\n                    isSuggested={props.model.suggestion && props.model.stack.length - 1 == index}\n                    offsetTop={getOffset(index)}\n                    isSelected={index > props.model.stack.length - 1}\n                />\n            ))}\n        </div>\n    );\n};\n","import Card from \"./Card\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\n\nconst Waste = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    useBlinkEffect((model) => model.waste);\n    const getOffset = (index: number) => {\n        if (state.settings.launchSettings.drawMode == \"single\") {\n            return 0;\n        }\n        const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n        let additionalOffset = 2;\n        if (length == 2) {\n            additionalOffset = 1;\n        }\n\n        if (length == 1) {\n            additionalOffset = 0;\n        }\n\n        return ((index - length - 2) % 3) + additionalOffset;\n    };\n\n    const cards = state?.hand.source == state.waste.source ? [...state.waste.stack, ...state.hand.stack] : [...state.waste.stack];\n\n    return (\n        <div className=\"board-field\">\n            <StackBase model={state.waste} />\n            {cards.map((card: CardModel, index: number) => (\n                <Card\n                    key={index}\n                    model={card}\n                    offsetTop={(index / 2) * -1}\n                    offsetLeft={getOffset(index)}\n                    blink={state.waste.blinkFor}\n                    isSuggested={state.waste.suggestion && index == state.waste.stack.length - 1}\n                    isSelected={index > state.waste.stack.length - 1}\n                />\n            ))}\n        </div>\n    );\n};\nexport default Waste;\n","import \"../Style/Board.scss\";\n\nimport BoardNavigator from \"./Navigation/BoardNavigator\";\nimport Dealer from \"./Dealer\";\nimport { DndProvider } from \"react-dnd\";\nimport FoundationStacks from \"./Foundation\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport Header from \"../UI/Header/Header\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport TableauStacks from \"./Tableau\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport TouchDetector from \"../../common/TouchDetector\";\nimport Waste from \"./Waste\";\nimport { usePreview } from \"react-dnd-preview\";\n\nconst TouchPreview = (props: { reff: any }) => {\n    // eslint-disable-next-line no-unused-vars\n    const { display, _itemType, item, style } = usePreview();\n    if (!display) {\n        return null;\n    }\n    const rect = props.reff.getBoundingClientRect();\n    return (\n        <div style={{ ...style, position: \"relative\", width: \"100%\", left: rect.left * -1, top: rect.top * -1, zIndex: 2000, opacity: 1 }}>\n            {item.render()}\n        </div>\n    );\n};\ntype BoardProps = { mode: string };\nconst Board = (props: BoardProps) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n    return (\n        <DndProvider backend={TouchDetector() ? TouchBackend : HTML5Backend}>\n            <Menu />\n            <Header mode={props.mode} />\n            <div className={\"board-jail \" + props.mode}>\n                <div className={\"board-grid-container \" + props.mode}>\n                    <Stock />\n                    <Waste />\n                    <div className=\"spacer\" ref={ref}>\n                        <div className=\"board-field\">{TouchDetector() && <TouchPreview reff={ref.current} />}</div>\n                    </div>\n                    <FoundationStacks />\n                    <TableauStacks />\n                </div>\n            </div>\n            <Dealer />\n            <BoardNavigator />\n        </DndProvider>\n    );\n};\n\nexport default Board;\n","import \"../Style/Screens.scss\";\n\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\n\nconst EndScreen = () => {\n    const { state, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    //@todo show launch settings (draw mode, recycling mode)\n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover();\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: any) => (state: Model) => {\n        if (dealt != state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n        if (state.dealer.isDealt) {\n            state.game.started = Date.now();\n        }\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt != state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        state.game.started = Date.now();\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                if (newCard) {\n                    newCard.source = tableau.stacks[i].source;\n                    if (stack.length == tableau.stacks.length - 1 - i) {\n                        newCard.isHidden = false;\n                    }\n                    tableau.deal(newCard, i);\n                    this.dealt++;\n                    this.dealingAt++;\n                    if (this.dealingAt == tableau.stacks.length) {\n                        this.dealingAt = 0;\n                    }\n                    this.isDealt = false;\n                }\n                return;\n            } else {\n                const isFirst = this.dealingAt == 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n    }\n\n    validSettings = () => this.settings.launchSettings.inputMode !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack == stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && this.card && card && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack == stack;\n}\n","import Card from \"../Deck/Card\";\n\nexport default class BasicStack {\n    source: string;\n    constructor(source: string) {\n        this.source = source;\n    }\n    stack: Card[] = [];\n    getTop: () => Card | null = () => (this.stack && this.stack.length && this.stack[this.stack.length - 1]) || null;\n    suggestion = false;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n}\n","import BasicStack from \"./BasicStack\";\nimport Hand from \"./Hand\";\n\nexport default class HandHoldingStack extends BasicStack {\n    hand: Hand;\n    constructor(source: string, hand: Hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source == this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n    blinkFor = 0;\n    unblink = () => {};\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport Suits from \"../Deck/Suits\";\nimport { XY } from \"../../View/UI/XY\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nexport class FoundationStack extends HandHoldingStack implements IStack {\n    setOnClick: () => void = () => {};\n    acceptedCards: string[] = [];\n    usedCards: any[] = [];\n    icon: string = \"\";\n    color: string = \"\";\n    blinkFor: number = 0;\n    clickEmpty: (p: any) => any = () => {};\n}\nexport default class Foundation {\n    settings: Settings;\n    hand: Hand;\n    stacks: FoundationStack[];\n    blinkFor: number;\n    unblink: () => void;\n    constructor(settings: Settings, hand: Hand) {\n        this.settings = settings;\n        this.hand = hand;\n        const template = (index: number) => {\n            const s = new FoundationStack(\"foundation-\" + index, hand);\n            s.stack = [];\n            s.acceptedCards = [...getFoundationOrder()];\n            s.usedCards = [];\n            s.icon = \"\";\n            s.color = \"\";\n            s.blinkFor = 0;\n            return s;\n        };\n        const stacks = Object.keys(Suits)\n            .map((key: string) => Suits[key])\n            .map((suit, index) => ({ ...template(index), ...suit }));\n        this.stacks = [...stacks];\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, index: number) => (s:any) => void) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                card.onClick = (p: XY) => onClick({ ...card }, p, index);\n                card.canClick = () => sindex == stack.stack.length - 1;\n            });\n            this.hand.setOnClick(stack);\n        });\n    };\n\n    getCurrentAccepted = (index: number) => {\n        const currentFoundation = this.stacks[index].acceptedCards;\n        return currentFoundation[currentFoundation.length - 1];\n    };\n\n    wouldAcceptHand = (index: number) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    accepts = (index: number, card: Card | null) => {\n        if (!card) return false;\n        const currentAccepted = this.getCurrentAccepted(index);\n        return this.stacks[index].icon == card.type.icon && currentAccepted == card.face;\n    };\n\n    add = (index: number, cards: Card[]) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index: number, card: Card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return (card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop()) || null;\n    };\n\n    getPreviousUsed = (index: number) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => f.stack.length).reduce((a, b) => a + b, 0);\n\n    getTop = (index: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig: Foundation, hand: Hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new FoundationStack(origStack.source, hand);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src);\n            this.tryDetectEnd(state);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card | null, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.face) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    //@todo move this to a generic place, also detect failure\n    tryDetectEnd(state: Model) {\n        const nrofCards = state.foundation.countCards();\n        if (nrofCards === 52) {\n            state.game.isEnded = true;\n            state.game.end = Date.now();\n        }\n    }\n}\n","import Settings from \"./Settings\";\n\nexport default class Rating {\n    settings: Settings;\n    points: number;\n    multiplicator: number;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode == \"single\" && this.settings.launchSettings.recyclingMode == \"infinite\") {\n            if (this.points > 0) {\n                if (this.points < 100) {\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                }\n            }\n            console.debug(\"RATING: subtract (max) 100 points for RECYCLE\");\n        }\n    };\n\n    registerUncover = () => {\n        this.registerHint(this.settings.disableHint());\n        this.points += 5;\n        console.debug(\"RATING: add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on: boolean) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            console.debug(\"RATING: subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other: Rating) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            console.debug(`RATING: applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done: boolean) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            console.debug(`RATING: applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move: { source: string; target: string }) {\n        const isTableau = (obj: string) => obj.substr(0, 7) == \"tableau\";\n        const isFoundation = (obj: string) => obj.substr(0, 10) == \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                console.debug(\"RATING: add 10 points for MOVE tableau -> foundation\");\n                return 10;\n            }\n        } else if (move.source == \"waste\") {\n            if (isFoundation(move.target)) {\n                console.debug(\"RATING: add 10 points for MOVE waste -> foundation\");\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                console.debug(\"RATING: add 5 points for MOVE waste -> tableau\");\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                console.debug(\"RATING: subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start: number, end: number) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    };\n\n    static copy = (orig: Rating) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Model from \"../Model\";\n\nexport default class TimeMachine {\n    previousStates: any[];\n    memorable: boolean;\n    modified: boolean;\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source == target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state: any) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id: number, current: any) => {\n        const isRequested = this.previousStates.length - 1 == id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        if (on) {\n            this.modified = true;\n            this.memorable = false;\n        }\n    }\n\n    stackEquals = (a: IStack, b: IStack) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden == b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a: { stacks: IStack[] }, b: { stacks: IStack[] }) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a: Model, b: Model) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig: TimeMachine) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Rating from \"./Rating\";\nimport Settings from \"./Settings\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    settings: Settings;\n    rating: Rating;\n    timemachine: TimeMachine;\n    started: number;\n    isEnded: boolean;\n    end: number;\n    paused: any;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n        //@todo move to context:\n        this.started = 0;\n        this.isEnded = false;\n        this.end = 0;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.rating.registerMove(target, source);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = () => {\n        this.rating.registerUncover();\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig: Game) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        copy.paused = orig.paused;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    filter: (stack: any[]) => Card[] = (stack) => {\n        return stack.filter((c) => c);\n    };\n\n    pickUp = (stack: (Card | null)[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = this.filter(stack).map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source == model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.face == \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source == this.source) || null;\n\n    isFromWaste = () => this.source && this.source == \"waste\";\n\n    isFromFoundation = (index: number) => this.source && this.source == `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source == `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) == \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/IStack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: (IStack | undefined)[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source == pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x == -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x == 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        const current = this.current();\n        if (current == undefined) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = current.getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y == 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const current = this.current();\n        const last: number = current ? current.getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (!current) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current()?.source || \"\");\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = () => {\n        if (this.model.focus.card && this.model.focus.card.canClick()) {\n            return this.model.focus.card.onClick({ isKeyboard: true });\n        } else if (this.model.focus.stack) {\n            return this.current()?.clickEmpty({ isKeyboard: true });\n        } else {\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./BasicStack\";\nimport Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Stock extends BasicStack implements IStack {\n    settings: Settings;\n    recyclings: number;\n    passes: number;\n    blinkFor: number;\n    unblink: () => void;\n    clickEmpty: (p: any) => (s: any) => void;\n    constructor(stack: Card[], settings: Settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        this.clickEmpty = () => () => {};\n        if (this.settings.launchSettings.recyclingMode == \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode == \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: XY) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n    };\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode == \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode == \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste: Card[]) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card: Card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card: Card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result: Card[] = [];\n        if (this.settings.launchSettings.drawMode == \"single\") {\n            const top = this.stack.pop();\n            if (top) result = [top];\n        }\n        if (this.settings.launchSettings.drawMode == \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length == 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig: Stock) => {\n        const copy = new Stock([], orig.settings);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\");\n    };\n\n    recycleWaste = (state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\")) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key == SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key == SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length == 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length == 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].face ==\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].face &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (this.getPutdownSuggestions(tableauState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nexport class TableauStack extends HandHoldingStack implements IStack {\n    //@todo move to IStack, make boolean\n    blinkFor = 0;\n    id = 0;\n    // eslint-disable-next-line no-unused-vars\n    onClick = (a: any) => (s: any) => {};\n    // eslint-disable-next-line no-unused-vars\n    clickEmpty = (a: any) => (s: any) => {};\n    setOnClick = () => {};\n}\nexport default class Tableau {\n    stacks: TableauStack[];\n    settings: Settings;\n    hand: Hand;\n\n    constructor(settings: Settings, hand: Hand) {\n        const ids = [0, 1, 2, 3, 4, 5, 6];\n        this.hand = hand;\n        this.stacks = ids.map((id) => {\n            const s = new TableauStack(\"tableau-\" + id, hand);\n            s.stack = [];\n            s.blinkFor = 0;\n            s.id = id;\n            return s;\n        });\n        this.settings = settings;\n    }\n\n    setOnClick = (\n        onClick: (a: any, b: any, index: number) => (s: any) => void,\n        onClickhidden: (a: any, b: any, index: number) => (s: any) => void,\n        hand: Hand\n    ) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p: any) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                const click = card.isHidden && sindex == stack.stack.length - 1 ? onClickhidden : onClick;\n                card.onClick = (p: any) => click({ ...card }, p, index);\n                card.canClick = () => !card.isHidden || this.canUncover(index, card) || false;\n            });\n            hand.setOnClick(stack);\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        const top = this.getTop(index);\n        if (!top) {\n            return current && current.face === \"K\";\n        }\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = current ? range.indexOf(current.face) : 0;\n        const topIndex = range.indexOf(top.face);\n        return currentIndex + 1 == topIndex && current?.type.color !== top.type.color && top.face !== \"A\";\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        return top.isHidden && card && card.equals(this.getTop(index));\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy != 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, cards: Card[]) => {\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number) => {\n        card.source = this.stacks[index].source;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1 - (offset || 0)];\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map((stack, index) => {\n            const s = new TableauStack(stack.source, hand);\n            s.id = index;\n            s.stack = Card.copyAll(stack.stack);\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Waste extends HandHoldingStack {\n    settings: Settings;\n    blinkFor: number;\n    unblink: () => void;\n    clickEmpty: (p: any) => (s: any) => void;\n    constructor(settings: Settings, hand: Hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        this.clickEmpty = () => () => {};\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: XY) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card: Card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards: Card[]) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card: Card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    canAdd = (card: Card | null) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card: Card) => (card && card.equals(this.getTop()) && this.stack.pop()) || null;\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig: Waste, hand: Hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n    }\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()), this.hand);\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings),\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n        });\n    };\n}\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../Context\";\nimport React from \"react\";\n\nexport const BoardContext = React.createContext({\n    player: 0,\n});\n\nconst BoardProvider = BoardContext.Provider;\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\n//We use class component here because setState allows partial updates \nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                return state;\n            }\n\n            return null;\n        });\n\n    //on every render, we refresh the click handlers in the model and the suggestions\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider value={{ player: this.props.player }}>\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n"],"sourceRoot":""}