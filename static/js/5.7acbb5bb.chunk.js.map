{"version":3,"sources":["Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/Stack.ts","Model/Game/HandHoldingStack.ts","Model/Game/FoundationStack.tsx","Model/Game/MultiStack.ts","Model/Game/Foundation.ts","Model/Business/Foundation.ts","Model/Game/Rating.ts","Model/Game/TimeMachine.ts","Model/Game/Game.ts","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.ts","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/TableauStack.tsx","Model/Game/Tableau.ts","Model/Game/Waste.ts","Model/Model.ts","View/GlobalContext.ts","View/Game/AutoSolver.tsx","View/Game/GameContext.tsx","View/Game/AutoUncoverer.tsx","View/Game/BoardContext.ts","View/Game/Navigation/BoardGamePad.tsx","View/Game/Navigation/BoardKeyboard.tsx","View/Game/PauseContext.tsx","View/Game/Navigation/BoardNavigator.tsx","View/Game/Dealer.tsx","common/DndPreview.tsx","View/Game/FailDetector.tsx","View/Game/Firework.tsx","View/Game/CardFirework.tsx","View/Game/StackDescription.ts","View/Game/Card.tsx","View/Game/StackBase.tsx","View/Game/useBlinkEffect.ts","View/Game/useStackDrop.ts","View/Game/Foundation.tsx","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","View/UI/Menu.tsx","View/Game/usePrevious.ts","View/Game/Stock.tsx","View/Game/Tableau.tsx","View/Game/Waste.tsx","View/Game/WinDetector.tsx","View/Game/Board.tsx","View/UI/EndScreen.js","View/Game/BoardWrap.tsx","View/Game/Game.tsx"],"names":["Blinker","startBlink","selector","state","blinkFor","game","registerBlink","unblink","s","stopBlink","Tableau","blink","index","tableau","stacks","dispatchPutDown","card","position","wouldAcceptHand","src","hand","source","putDownHand","registerMove","getTop","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","isHoldingCard","isHidden","uncover","registerUncover","Dealer","dealt","dealingAt","isDealt","dealOne","callback","dealer","deal","stock","dealAll","i","length","stack","newCard","popOne","isFirst","this","Dispatcher","clickHandler","getHandler","Focus","settings","keyboard","validSettings","launchSettings","inputMode","isKeyBoard","isKeyboard","setCard","unsetCard","Card","equals","unsetStack","setStack","hasCard","hasStack","BasicStack","suggestion","getClickable","filter","canClick","onClick","a","clickEmpty","accepts","HandHoldingStack","getHandContent","FoundationStack","suit","acceptedCards","usedCards","icon","color","getCurrentAccepted","currentAccepted","type","face","setOnClick","p","cards","forEach","sindex","getFoundationOrder","MultiStack","Foundation","Object","keys","Suits","map","key","c","hasMoreThanOneCard","currentCard","add","putDown","causeEntropy","Math","min","interactionEntropy","push","pop","remove","getPreviousUsed","countCards","f","reduce","b","setEntropy","lvl","element","copy","orig","origStack","copyAll","foundation","_card","Rating","points","multiplicator","ratings","applyRating","text","console","debug","target","registerHint","disableHint","currentMove","rateMove","registerRecycle","drawMode","recyclingMode","diff","setSuccess","penalize","other","undoPenalty","penalty","pow","done","hintPenalty","getTimePenalty","start","end","secondsToFinish","trunc","getBonusPoints","round","getTotal","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","previousStates","memorable","modified","pushPreviousState","previous","modelEquals","popPreviousState","id","current","isRequested","popPrevious","timemachine","stackEquals","every","stacksEqual","waste","Game","rating","paused","Hand","splice","model","_onClick","isHoldingKing","isFromCurrentSource","isFromWaste","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","parseInt","Navigator","currentIndex","rows","getZindex","elem","targets","update","pos","row","j","zIndex","x","y","z","finishNav","valid","moveLeft","moveRight","direction","undefined","moveUp","clickable","toggleRow","moveDown","pickLast","last","focus","pressCurrent","before","ctx","navigator","Settings","baseEntropy","suggestionModes","suggestionMode","setSuggestionMode","sm","SuggestionModes","get","enableHint","getHintMode","isTemporary","next","allSuggestionModes","Stock","recyclings","passes","recycle","reverse","setCardProperties","isOnTop","popTop","result","top","_position","moveToWaste","recycleWaste","addAll","canRecycle","Waste","Suggestions","evaluateOptions","disableAllSuggestions","NONE","getUncoverOptions","getPutdownSuggestions","getPickupOptions","FULL","SCORED","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","range","getTableauOrder","indexOf","offset","canUncover","onClickhidden","click","getStack","canPutDown","getCard","stackEntropy","entropy","concat","canAdd","suggestor","token","setToken","withSuggestions","_hasSuggestion","some","hasNonStockSuggestions","hasSuggestions","canAutoSolve","clearSuccess","clear","_c","success","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","defaultValue","replaceContext","updateContext","updateGameContext","restart","GlobalContext","React","createContext","Provider","useGlobalContext","useContext","_AutoSolve","props","useState","solving","setSolving","useEffect","canAutosolve","AutoSolve","Solver","timeout","setTimeout","suggestedFoundations","suggestedFoundation","suggestedTableaus","suggestedCards","suggestedCard","clearTimeout","defaultGameState","started","isEnded","winner","loser","GameContext","gameState","win","giveUp","useGameContext","GameContextProvider","setGameState","context","player","Date","now","value","children","Uncoverer","AutoUncoverer","autoUncover","BoardContext","BoardProvider","BoardGamePad","isGamePadDriven","isSinglePlayer","boardMode","GameModes","SINGLEPLAYER","switchToGamePad","GamePad","gamepadIndex","players","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","layout","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","defaultPauseState","pauses","pauseStartedAt","allowed","pausedBy","showMenu","defaultPauseContext","togglePause","getElapsed","PauseContext","PauseProvider","setPaused","isPaused","padleft","msec","getElapsedMs","hh","floor","mm","ss","BoardNavigator","beforeFocused","handlers","modifier","handler","supportsHints","isVisible","isDisabled","_state","timeouts","quickDeal","DndPreview","usePreview","display","item","_itemType","style","rect","reff","getBoundingClientRect","width","left","opacity","render","FailDetector","suggestions","setSuggestions","stockSuggestions","setStockSuggestions","nonStockSuggestions","setNonStockSuggestions","stockSuggestionCards","setStockSuggestionCards","log","Firework","canvasRef","createRef","count","intensity","defaults","ticks","origin","particleCount","startVelocity","decay","spread","localConfetti","confetti","create","resize","fire","particleRatio","opts","assign","scalar","ref","CardFirework","setFire","getStackLabel","names","label","split","ReRender","models","slice","offsetLeft","isSelected","isDrag","displayName","pause","inputEl","useRef","isFocused","setDrag","_isDrag","useDrag","collect","monitor","isDragging","canDrag","begin","_item","didDrop","dragRef","preview","getEmptyImage","captureDraggingState","pointerEvents","className","onFocus","onBlur","offsetTop","entropyStyle","getCardStyle","hasSuggestion","isSuggested","getClassName","e","preventDefault","clientX","clientY","ele","includes","offsetParent","ownerDocument","defaultView","pageXOffset","pageYOffset","disabled","tabIndex","aria-label","title","StackBase","classname","useBlinkEffect","useStackDrop","useDrop","accept","canDrop","drop","Clock","elapsed","setElapsed","interval","setInterval","clearInterval","Hearts","createString","Array","from","join","getHearts","Hint","Points","toast","info","autoClose","ToggleMenu","Undo","Header","mode","Menu","useNavigationContext","navigation","setNavigation","switchToMenu","menu","screeen","mainMenu","remaining","announcement","keyboardLayout","MenuTitle","MenuTree","MenuButton","val","toggleMainMenu","toggled","EntropyLevels","skip","_Menu","usePrevious","Renderer","speed","parent","getOffset","additionalOffset","Detector","WinDetector","Board","closeOnClick","newestOnTop","limit","pauseOnFocusLoss","draggable","transition","Slide","AutoSolver","EndScreen","BoardWrap","setState","random","Component","SinglePlayer","launchState","AspectRatio","ratio","Ratios","_4to3","SplitScreen","inputMethod","DelayedSuspense","delay","fallback","VERSUS"],"mappings":"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","file":"static/js/5.7acbb5bb.chunk.js","sourcesContent":["import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src, state.tableau.getTop(index));\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover(state.tableau.getTop(index));\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: any) => (state: Model) => {\n        if (dealt != state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt != state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                if (newCard) {\n                    newCard.source = tableau.stacks[i].source;\n                    if (stack.length == tableau.stacks.length - 1 - i) {\n                        newCard.isHidden = false;\n                    }\n                    tableau.deal(newCard, i);\n                    this.dealt++;\n                    this.dealingAt++;\n                    if (this.dealingAt == tableau.stacks.length) {\n                        this.dealingAt = 0;\n                    }\n                    this.isDealt = false;\n                }\n                return;\n            } else {\n                const isFirst = this.dealingAt == 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n    }\n\n    validSettings = () => this.settings.launchSettings.inputMode !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack == stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && this.card && card && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack == stack;\n}\n","import Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport interface IStack {\n    source: string;\n    stack: Card[];\n    getTop: () => Card | null;\n    getClickable: () => Card[];\n    clickEmpty: (p: any) => (s: any) => void;\n    blinkFor: number;\n    unblink: (model: Model) => void;\n    suggestion: boolean;\n    accepts: (card: Card | null) => boolean;\n}\n\nabstract class BasicStack implements IStack {\n    source: string;\n    constructor(source: string) {\n        this.source = source;\n    }\n    suggestion = false;\n    stack: Card[] = [];\n    getTop: () => Card | null = () => (this.stack && this.stack.length && this.stack[this.stack.length - 1]) || null;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n    blinkFor = 0;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick = (a: any) => (s: any) => {};\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    clickEmpty = (a: any) => (s: any) => {};\n    unblink: (model: Model) => void = () => {};\n    abstract accepts: (card: Card | null) => boolean;\n}\nexport default BasicStack;\n","import BasicStack from \"./Stack\";\nimport Hand from \"./Hand\";\n\nabstract class HandHoldingStack extends BasicStack {\n    hand: Hand;\n    constructor(source: string, hand: Hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source == this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n}\n\nexport default HandHoldingStack;\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { Suit } from \"../Deck/Suits\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nexport default class FoundationStack extends HandHoldingStack {\n    constructor(source: string, hand: Hand, suit: Suit) {\n        super(source, hand);\n        this.acceptedCards = [...getFoundationOrder()];\n        this.usedCards = [];\n        this.icon = suit.icon;\n        this.color = suit.color;\n    }\n    acceptedCards: string[] = [];\n    usedCards: any[] = [];\n    icon = \"\";\n    color = \"\";\n    getCurrentAccepted = () => {\n        return this.acceptedCards[this.acceptedCards.length - 1];\n    };\n    accepts = (card: Card | null) => {\n        if (!card) return false;\n        const currentAccepted = this.getCurrentAccepted();\n        return this.icon == card.type.icon && currentAccepted == card.face;\n    };\n    setOnClick = (onClick: (c: any, p: any) => (s: any) => void, hand: Hand) => {\n        this.clickEmpty = (p) => onClick(null, p);\n        const cards = this.source == hand.source ? [...this.stack, ...hand.stack] : this.stack;\n        cards.forEach((card, sindex) => {\n            card.onClick = (p: any) => onClick({ ...card }, p);\n            card.canClick = () => sindex == cards.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n}\n","import Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\n\nexport default class MultiStack<T extends HandHoldingStack> {\n    stacks: T[];\n    settings: Settings;\n    hand: Hand;\n    constructor(settings: Settings, hand: Hand, stacks: T[]) {\n        this.stacks = stacks;\n        this.settings = settings;\n        this.hand = hand;\n    }\n}\n","import Card from \"../Deck/Card\";\nimport FoundationStack from \"./FoundationStack\";\nimport Hand from \"./Hand\";\nimport MultiStack from \"./MultiStack\";\nimport Settings from \"./Settings\";\nimport Suits from \"../Deck/Suits\";\n\nexport default class Foundation extends MultiStack<FoundationStack> {\n    constructor(settings: Settings, hand: Hand) {\n        super(settings, hand, [\n            ...Object.keys(Suits)\n                .map((key: string) => Suits[key])\n                .map((suit, index) => new FoundationStack(\"foundation-\" + index, hand, suit)),\n        ]);\n    }\n\n    setOnClick = (onClick: (c: any, p: any, index: number) => (s: any) => void) => {\n        this.stacks.forEach((stack, index) => {\n            stack.setOnClick((c: any, p: any) => onClick(c, p, index), this.hand);\n        });\n    };\n\n    getCurrentAccepted = (index: number) => {\n        return this.stacks[index].getCurrentAccepted();\n    };\n\n    wouldAcceptHand = (index: number) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    accepts = (index: number, card: Card | null) => {\n        return this.stacks[index].accepts(card);\n    };\n\n    add = (index: number, cards: Card[]) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index: number, card: Card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return (card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop()) || null;\n    };\n\n    getPreviousUsed = (index: number) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => f.stack.length).reduce((a, b) => a + b, 0);\n\n    getTop = (index: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig: Foundation, hand: Hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new FoundationStack(origStack.source, hand, origStack);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src, state.foundation.getTop(index));\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card | null, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.face) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport interface AppliedRating {\n    points: number;\n    text: string;\n}\n\nexport interface AppliedRatingWithId extends AppliedRating {\n    id: number;\n}\n\nexport default class Rating {\n    settings: Settings;\n    points: number;\n    multiplicator: number;\n    ratings: AppliedRating[];\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n        this.ratings = [];\n    }\n\n    applyRating = (points: number, text: string) => {\n        console.debug(\"RATING:\", text);\n        this.ratings.push({ points, text });\n    };\n\n    registerMove = (target: string, source: string, card: Card | null) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove, card);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode == \"single\" && this.settings.launchSettings.recyclingMode == \"infinite\") {\n            if (this.points > 0) {\n                let diff = 0;\n                if (this.points < 100) {\n                    diff = this.points * -1;\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                    diff = -100;\n                }\n                this.applyRating(diff, `subtract ${diff} (max 100 points) for RECYCLE`);\n            }\n        }\n    };\n\n    registerUncover = (card: Card | null) => {\n        this.registerHint(this.settings.disableHint());\n        card && card.setSuccess(5);\n        this.points += 5;\n        this.applyRating(5, \"add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on: boolean) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, \"subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other: Rating) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            this.applyRating(penalty * -1, `applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done: boolean) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, `applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move: { source: string; target: string }, card: Card | null) {\n        const isTableau = (obj: string) => obj.substr(0, 7) == \"tableau\";\n        const isFoundation = (obj: string) => obj.substr(0, 10) == \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE tableau -> foundation\");\n                card && card.setSuccess(10);\n                return 10;\n            }\n        } else if (move.source == \"waste\") {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE waste -> foundation\");\n                card && card.setSuccess(10);\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                this.applyRating(5, \"add 5 points for MOVE waste -> tableau\");\n                card && card.setSuccess(5);\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                this.applyRating(-15, \"subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start: number, end: number) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    };\n\n    static copy = (orig: Rating) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        copy.ratings = [...orig.ratings];\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./Stack\";\nimport Model from \"../Model\";\n\nexport default class TimeMachine {\n    previousStates: Model[];\n    memorable: boolean;\n    modified: boolean;\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source == target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state: any) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id: number, current: any) => {\n        const isRequested = this.previousStates.length - 1 == id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        if (on) {\n            this.modified = true;\n            this.memorable = false;\n        }\n    }\n\n    stackEquals = (a: IStack, b: IStack) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden == b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a: { stacks: IStack[] }, b: { stacks: IStack[] }) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a: Model, b: Model) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig: TimeMachine) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Rating from \"./Rating\";\nimport Settings from \"./Settings\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    settings: Settings;\n    rating: Rating;\n    timemachine: TimeMachine;\n    paused: any;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n    }\n\n    registerMove = (target: string, source: string, card: Card | null) => {\n        this.rating.registerMove(target, source, card);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = (card: Card | null) => {\n        this.rating.registerUncover(card);\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig: Game) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        copy.paused = orig.paused;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./Stack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    filter: (stack: any[]) => Card[] = (stack) => {\n        return stack.filter((c) => c);\n    };\n\n    pickUp = (stack: (Card | null)[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = this.filter(stack).map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source == model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.face == \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source == this.source) || null;\n\n    isFromWaste = () => this.source && this.source == \"waste\" || false;\n\n    isFromFoundation = (index: number) => this.source && this.source == `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source == `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) == \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/Stack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: (IStack | undefined)[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source == pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x == -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x == 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        const current = this.current();\n        if (current == undefined) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = current.getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y == 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const current = this.current();\n        const last: number = current ? current.getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (!current) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current()?.source || \"\");\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = (before: { card: Card | null; stack: string }) => {\n        const clickable = this.current()?.getClickable();\n        if (\n            this.model.focus.card &&\n            this.model.focus.card.canClick() &&\n            clickable &&\n            clickable[this.currentIndex.z] &&\n            clickable[this.currentIndex.z].face == this.model.focus.card.face &&\n            clickable[this.currentIndex.z].type.icon == this.model.focus.card.type.icon\n        ) {\n            return (ctx: Model) => {\n                if (this.model.focus.card && this.model.focus.card.equals(before.card)) {\n                    this.model.focus.card.onClick({ isKeyboard: true })(ctx);\n                }\n            };\n        } else if (this.model.focus.stack && this.model.focus.stack == before.stack) {\n            return (ctx: Model) => {\n                this.current()?.clickEmpty({ isKeyboard: true })(ctx);\n            };\n        } else {\n            //this is the entry point in case user starts keyboard nav with action button\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./Stack\";\nimport Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Stock extends BasicStack {\n    settings: Settings;\n    recyclings: number;\n    passes: number;\n    constructor(stack: Card[], settings: Settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        if (this.settings.launchSettings.recyclingMode == \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode == \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick: (c: any, p: any, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: any) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n    };\n    accepts = () => false;\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode == \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode == \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste: Card[]) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card: Card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card: Card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result: Card[] = [];\n        if (this.settings.launchSettings.drawMode == \"single\") {\n            const top = this.stack.pop();\n            if (top) result = [top];\n        }\n        if (this.settings.launchSettings.drawMode == \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length == 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig: Stock) => {\n        const copy = new Stock([], orig.settings);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\", state.waste.getTop());\n    };\n\n    recycleWaste = (state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\", state.waste.getTop())) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key == SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key == SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length == 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length == 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].face ==\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].face &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (\n                            this.getPutdownSuggestions(tableauState, true) >\n                            (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)\n                        ) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nexport default class TableauStack extends HandHoldingStack {\n    id = 0;\n    accepts = (current: Card | null) => {\n        const top = this.getTop();\n        if (!top) {\n            return (current && current.face === \"K\") || false;\n        }\n        if (this.source == current?.source) return true;\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = current ? range.indexOf(current.face) : 0;\n        const topIndex = range.indexOf(top.face);\n        return currentIndex + 1 == topIndex && current?.type.color !== top.type.color && top.face !== \"A\";\n    };\n    getTop = (offset?: number) => this.stack[this.stack.length - 1 - (offset || 0)];\n    canUncover = (card: Card) => {\n        const top = this.getTop();\n        return top.isHidden && card && card.equals(this.getTop());\n    };\n    setOnClick = (onClick: (a: any, b: any) => (s: any) => void, onClickhidden: (a: any, b: any) => (s: any) => void) => {\n        this.clickEmpty = (p: any) => onClick(null, p);\n        const cards = this.source == this.hand.source ? [...this.stack, ...this.hand.stack] : this.stack;\n        cards.forEach((card, sindex) => {\n            const click = card.isHidden && sindex == cards.length - 1 ? onClickhidden : onClick;\n            card.onClick = (p: any) => click({ ...card }, p);\n            card.canClick = () => !card.isHidden || (this.canUncover(card) && !this.hand.currentCard()) || false;\n        });\n        this.hand.setOnClick(this);\n    };\n    static copy = (orig: TableauStack) => {\n        const s = new TableauStack(orig.source, orig.hand);\n        s.id = orig.id;\n        s.stack = Card.copyAll(orig.stack);\n        return s;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport MultiStack from \"./MultiStack\";\nimport Settings from \"./Settings\";\nimport TableauStack from \"./TableauStack\";\n\nexport default class Tableau extends MultiStack<TableauStack> {\n    constructor(settings: Settings, hand: Hand) {\n        super(\n            settings,\n            hand,\n            [0, 1, 2, 3, 4, 5, 6].map((id) => {\n                const s = new TableauStack(\"tableau-\" + id, hand);\n                s.id = id;\n                return s;\n            })\n        );\n    }\n\n    setOnClick = (\n        onClick: (a: any, b: any, index: number) => (s: any) => void,\n        onClickhidden: (a: any, b: any, index: number) => (s: any) => void\n    ) => {\n        this.stacks.forEach((stack, index) => {\n            stack.setOnClick(\n                (a: any, b: any) => onClick(a, b, index),\n                (a: any, b: any) => onClickhidden(a, b, index)\n            );\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    //@todo when putting back hand, no entropy is observed\n\n    putDownHand = (index: number) => this.add(index, this.hand.source, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        if (!current) return false;\n        return this.stacks[index].accepts(current);\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        return this.stacks[index].canUncover(card);\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy != 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, source: string, cards: Card[]) => {\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number) => {\n        card.source = this.stacks[index].source;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].getTop(offset);\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map(TableauStack.copy);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\n\nexport default class Waste extends HandHoldingStack {\n    settings: Settings;\n    constructor(settings: Settings, hand: Hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n    }\n\n    setOnClick = (onClick: (c: any, p: any, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        const cards = this.source == this.hand.source ? [...this.stack, ...this.hand.stack] : this.stack;\n        cards.forEach((card, index) => {\n            card.onClick = (p: any) => onClick({ ...card }, p, null);\n            card.canClick = () => index == cards.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card: Card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards: Card[]) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card: Card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    accepts = (card: Card | null) => this.canAdd(card) || false;\n\n    canAdd = (card: Card | null) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card: Card) => (card && card.equals(this.getTop()) && this.stack.pop()) || null;\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig: Waste, hand: Hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Card from \"./Deck/Card\";\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport { IStack } from \"./Game/Stack\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n    token: number;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n        this.token = obj.token;\n    }\n\n    setToken = (token: number) => {\n        this.token = token;\n    };\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    _hasSuggestion = (obj: any) => {\n        return obj.suggestion || (obj.stack && obj.stack.some(this._hasSuggestion)) || (obj.stacks && obj.stacks.some(this._hasSuggestion));\n    };\n\n    hasNonStockSuggestions = () => {\n        return (\n            this._hasSuggestion(this.waste) ||\n            this._hasSuggestion(this.tableau) ||\n            this._hasSuggestion(this.foundation)\n        );\n    }\n\n    hasSuggestions = () => {\n        return (\n            this._hasSuggestion(this.waste) ||\n            this._hasSuggestion(this.stock) ||\n            this._hasSuggestion(this.tableau) ||\n            this._hasSuggestion(this.foundation)\n        );\n    };\n\n    canAutoSolve = () => {\n        return (\n            this.waste.stack.length == 0 &&\n            this.stock.stack.length == 0 &&\n            this.tableau.stacks.every((s) => s.stack.every((c) => !c.isHidden))\n        );\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    clearSuccess = (card: Card) => {\n        const clear = (c: Card, s: IStack) => {\n            s.stack.forEach((_c) => {\n                if (_c.equals(c)) {\n                    _c.success = 0;\n                }\n            });\n        };\n        clear(card, this.stock);\n        clear(card, this.waste);\n        this.foundation.stacks.forEach((s) => clear(card, s));\n        this.tableau.stacks.forEach((s) => clear(card, s));\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()));\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings),\n            token: 0,\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n            token: state.token,\n        });\n    };\n}\n","import { StateReplaceFunction, StateUpdateFunction } from \"../Common\";\n\nimport Model from \"../Model/Model\";\nimport React from \"react\";\n\ninterface IGlobalContext {\n    state: Model | null;\n    replaceContext: StateReplaceFunction;\n    updateContext: StateUpdateFunction;\n    updateGameContext: StateUpdateFunction;\n    restart: () => void;\n}\n\ninterface XGlobalContext {\n    state: Model;\n    replaceContext: StateReplaceFunction;\n    updateContext: StateUpdateFunction;\n    updateGameContext: StateUpdateFunction;\n    restart: () => void;\n}\n\nconst useGlobalContext: () => XGlobalContext = () => {\n    const ctx = React.useContext(GlobalContext);\n    if (!ctx.state) {\n        throw \"no state present\";\n    }\n    return { ...ctx, state: ctx.state };\n};\n\nconst defaultValue = {\n    state: null,\n    replaceContext: () => {},\n    updateContext: () => {},\n    updateGameContext: () => {},\n    restart: () => {},\n};\n\nconst GlobalContext = React.createContext<IGlobalContext>(defaultValue);\n\nexport const Provider = GlobalContext.Provider;\n\nexport default useGlobalContext;\n","//- auto-resolver\n//  - check if the board can auto-resolve and offer to complete automatically\n//  - auto-complete becomes button in header and option in menu\n\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst _AutoSolve = (props: { canAutosolve: boolean }) => {\n    const [solving, setSolving] = React.useState(false);\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        if (props.canAutosolve) {\n            updateGameContext((ctx) => (ctx.settings.suggestionMode = SuggestionModes.get(SuggestionModes.NONE)));\n            setSolving(true);\n        }\n    }, [props.canAutosolve]);\n    const canSolve = solving && state.settings.suggestionMode.key == SuggestionModes.NONE;\n    return !canSolve ? null : <Solver />;\n};\n\nconst AutoSolve = () => {\n    const { state } = useGlobalContext();\n    return <_AutoSolve canAutosolve={state.canAutoSolve()} />;\n};\n\nexport default AutoSolve;\n\n//@todo also start general confetti firework elements when autosolving\n\nconst Solver = () => {\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            const copy = Model.copy(state).withHandlers();\n            if (copy.hand.currentCard()) {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.foundation)) {\n                    const suggestedFoundations = copy.foundation.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedFoundations.length) {\n                        const suggestedFoundation = suggestedFoundations[0];\n                        updateGameContext(suggestedFoundation.clickEmpty({ isKeyboard: false }));\n                    }\n                }\n            } else {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.tableau)) {\n                    const suggestedTableaus = copy.tableau.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedTableaus.length) {\n                        const suggestedTableau = suggestedTableaus[0];\n                        const suggestedCards = suggestedTableau.stack.filter((c) => c.suggestion);\n                        if (suggestedCards.length) {\n                            const suggestedCard = suggestedCards[0];\n                            updateGameContext(suggestedCard.onClick({ isKeyboard: false }));\n                        }\n                    }\n                }\n            }\n        }, 150);\n\n        return () => clearTimeout(timeout);\n    });\n    return null;\n};\n","import React from \"react\";\n\nexport interface IGameState {\n    started: number;\n    isEnded: boolean;\n    end: number;\n    winner: number;\n    loser: number;\n}\n\nexport interface IGameContext {\n    gameState: IGameState;\n    win: (player: number) => void;\n    giveUp: (player: number) => void;\n    start: () => void;\n}\n\nexport const defaultGameState = {\n    started: 0,\n    isEnded: false,\n    end: 0,\n    winner: -1,\n    loser: -1,\n};\n\nconst GameContext = React.createContext<IGameContext>({\n    gameState: defaultGameState,\n    win: () => {},\n    start: () => {},\n    giveUp: () => {},\n});\n\nconst useGameContext = () => React.useContext(GameContext);\n\nexport default useGameContext;\n\nexport const GameContextProvider = (props: { children: any }) => {\n    const [gameState, setGameState] = React.useState<IGameState>(defaultGameState);\n    const context = {\n        gameState,\n        win: (player: number) => setGameState({ ...gameState, end: Date.now(), isEnded: true, winner: player }),\n        start: () => setGameState({ ...gameState, started: Date.now() }),\n        giveUp: (player: number) => setGameState({ ...gameState, end: Date.now(), isEnded: true, loser: player }),\n    };\n    return <GameContext.Provider value={context}>{props.children}</GameContext.Provider>;\n};\n","import React from \"react\";\nimport useGameContext from \"./GameContext\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst Uncoverer = () => {\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        if (!state.hand.currentCard()) {\n            state.tableau.stacks.forEach((stack) => {\n                if (stack.getTop() && stack.getTop().isHidden && stack.getTop().canClick()) {\n                    updateGameContext(stack.getTop().onClick({ isKeyboard: true }));\n                }\n            });\n        }\n    }, [state.token]);\n    return null;\n};\n\nconst AutoUncoverer = () => {\n    const { state } = useGlobalContext();\n    const { gameState } = useGameContext();\n    return !!state.settings.launchSettings.autoUncover && !!gameState.started && <Uncoverer /> || null;\n};\n\nexport default AutoUncoverer;\n","import React from \"react\";\n\nexport const BoardContext = React.createContext({\n    player: 0,\n});\n\nexport const BoardProvider = BoardContext.Provider;\n","import { BoardContext } from \"../BoardContext\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GamePad from \"../../../common/GamePad\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst BoardGamePad = (props: CustomInputProps) => {\n    const { state } = useGlobalContext();\n    const { player } = React.useContext(BoardContext);\n    const isGamePadDriven = state.settings.launchSettings.inputMode == \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n\n    const switchToGamePad = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight(switchToGamePad)}\n            onUp={() => props.onUp(switchToGamePad)}\n            onDown={() => props.onDown(switchToGamePad)}\n            onAction={() => props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToGamePad)}\n            onMenu={() => props.onMenu(switchToGamePad)}\n        />\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"../../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../BoardContext\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport Keyboard from \"../../../common/Keyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst BoardKeyboard = (props: CustomInputProps) => {\n    const { state } = useGlobalContext();\n    const { player } = React.useContext(BoardContext);\n    const isKeyboardDriven = state.settings.launchSettings.inputMode === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import React from \"react\";\n\nexport interface IPauseState {\n    started: number;\n    end: number;\n    paused: boolean;\n    pauses: number[];\n    pauseStartedAt: number;\n    allowed: number;\n    isSilent?: boolean;\n    pausedBy: number;\n    showMenu: boolean;\n}\nexport interface IPauseContext {\n    state: IPauseState;\n    togglePause: (isPaused: boolean, pausedBy: number) => void;\n    getElapsed: () => string;\n}\nexport const defaultPauseState = {\n    started: 0,\n    end: 0,\n    paused: false,\n    pauses: [],\n    pauseStartedAt: 0,\n    allowed: 5,\n    pausedBy: -1,\n    showMenu: false,\n};\nexport const defaultPauseContext = {\n    state: defaultPauseState,\n    togglePause: () => {},\n    getElapsed: () => \"\",\n};\n\nconst PauseContext = React.createContext<IPauseContext>(defaultPauseContext);\n\nexport const PauseProvider = (props: any) => {\n    const [paused, setPaused] = React.useState<IPauseState>({ ...defaultPauseState });\n    const getElapsedMs = () => {\n        const pauses = paused.pauses.reduce((a, b) => a + b, 0);\n        return (paused.end || paused.pauseStartedAt || Date.now()) - props.started - pauses;\n    };\n\n    const getElapsed = () => {\n        const padleft = (i: number) => ((i + \"\").length == 1 ? \"0\" + i : i);\n        let msec = getElapsedMs();\n        const hh = Math.floor(msec / 1000 / 60 / 60);\n        msec -= hh * 1000 * 60 * 60;\n        const mm = Math.floor(msec / 1000 / 60);\n        msec -= mm * 1000 * 60;\n        const ss = Math.floor(msec / 1000);\n        msec -= ss * 1000;\n        return hh ? hh + \":\" + padleft(mm) + \":\" + padleft(ss) : padleft(mm) + \":\" + padleft(ss);\n    };\n    const togglePause = (isPaused: boolean, pausedBy: number) => {\n        if (paused.showMenu) {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauses: [...paused.pauses, Date.now() - paused.pauseStartedAt],\n                pauseStartedAt: 0,\n                paused: false,\n                showMenu: false,\n            });\n        } else if (paused.pauses.length < paused.allowed) {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauseStartedAt: Date.now(),\n                paused: true,\n                showMenu: true,\n            });\n        } else {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauseStartedAt: 0,\n                paused: false,\n                showMenu: true,\n            });\n        }\n    };\n    const context = {\n        state: { ...paused, started: props.started },\n        togglePause,\n        getElapsed,\n    };\n\n    return <PauseContext.Provider value={context}>{props.children}</PauseContext.Provider>;\n};\n\nexport default PauseContext;\n","import { BoardContext } from \"../BoardContext\";\nimport BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport Model from \"../../../Model/Model\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\ntype _mod = (state: Model) => void;\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = useGlobalContext();\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const beforeFocused = { card: state.focus.card, stack: state.focus.stack };\n    const isPaused = !!paused.state.paused;\n\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const handlers = {\n        onLeft: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveLeft(before);\n            }),\n\n        onRight: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveRight(before);\n            }),\n\n        onUp: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveUp(before);\n            }),\n\n        onDown: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveDown(before);\n            }),\n\n        onAction: (modifier: _mod) =>\n            updateGameContext((ctx) => {\n                modifier(ctx);\n                const handler = state?.navigator?.pressCurrent(beforeFocused);\n                handler && handler(ctx);\n                ctx.navigator.finishNav();\n            }),\n\n        onCancel: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n            }),\n\n        onPause: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n\n        onHint: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n                if (isVisible(state) && !isDisabled(state)) {\n                    state.settings.enableHint();\n                }\n            });\n        },\n\n        onUndo: () => {\n            //@todo use GlobalState token to avoid double processing\n            replaceContext((_state) => {\n                const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n                if (previous) {\n                    previous.game.rating.penalize(_state.game.rating);\n                    return previous;\n                }\n                return null;\n            });\n        },\n        onMenu: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n    };\n\n    return isPaused ? null : (\n        <>\n            <BoardKeyboard {...handlers} />\n            <BoardGamePad {...handlers} />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import React from \"react\";\nimport useGameContext from \"./GameContext\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst Dealer = () => {\n    const { state, replaceContext } = useGlobalContext();\n    const { gameState, start } = useGameContext();\n    React.useEffect(() => {\n        if (!gameState.started) {\n            const timeouts: any[] = [];\n            if (state.settings.launchSettings.quickDeal) {\n                if (!state.dealer.isDealt) {\n                    start();\n                    replaceContext(state.dealer.dealAll());\n                }\n            } else {\n                const deal = (dealt: number) =>\n                    timeouts.push(\n                        setTimeout(() => {\n                            if (!state.dealer.isDealt) {\n                                replaceContext(state.dealer.dealOne(dealt, deal));\n                            } else {\n                                start();\n                            }\n                        }, 35)\n                    );\n\n                deal(state.dealer.dealt);\n                return () => timeouts.forEach((timeout) => clearTimeout(timeout));\n            }\n        }\n    }, []);\n    return null;\n};\nexport default Dealer;\n","import React from \"react\";\nimport { usePreview } from \"react-dnd-preview\";\n\nconst DndPreview = (props: { reff: any }) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { display, _itemType, item, style } = usePreview();\n    if (!display) {\n        return null;\n    }\n    const rect = props.reff.getBoundingClientRect();\n    return (\n        <div\n            style={{\n                ...style,\n                position: \"relative\",\n                width: \"100%\",\n                left: rect.left * -1,\n                top: rect.top * -1,\n                zIndex: 2000,\n                opacity: 1,\n            }}\n        >\n            {item.render}\n        </div>\n    );\n};\n\nexport default DndPreview;\n","import Card from \"../../Model/Deck/Card\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst FailDetector = () => {\n    const { state } = useGlobalContext();\n    const [suggestions, setSuggestions] = React.useState<boolean>(false);\n    const [stockSuggestions, setStockSuggestions] = React.useState<boolean>(false);\n    const [nonStockSuggestions, setNonStockSuggestions] = React.useState<boolean>(false);\n    React.useEffect(() => {\n        const copy = Model.copy(state);\n        copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.FULL);\n        copy.suggestor.evaluateOptions(copy);\n        setSuggestions(copy.hasSuggestions());\n        setStockSuggestions(copy._hasSuggestion(copy.stock));\n        setNonStockSuggestions(copy.hasNonStockSuggestions());\n    }, [state.token]);\n\n    const [stockSuggestionCards, setStockSuggestionCards] = React.useState<Card[]>([]);\n\n    React.useEffect(() => {\n        if (!state.hand.currentCard()) {\n            //fail detection never ends the game, merely offers to quit or keep trying\n            //it also aquaints the user with the possibiltiy of undoing or restarting to be helpful\n            if (nonStockSuggestions) {\n                setStockSuggestionCards([]);\n            } else if (stockSuggestions && !nonStockSuggestions) {\n                //@todo CYCLING FAIL DETECTION\n                //even with a full suggestion available, the situation may be hopeless\n                //that is true if the suggestion concerns the stock\n                //to find out if it's really hopeless, we need to track full cycles through the deck\n                //if a full cycle through the stack was performed and only stock suggestions came up\n                //it's basically a loss, same as above\n                //to achieve this we can store all cards that produced stock suggestions in a list\n                //as long as stock suggestions come up we add to the list\n                //once list has same length as stock + waste + hand(waste) we know it's over\n                //once we find a non-stock suggestion we empty out the list\n                console.log(\"only stock suggestions are suspicious, start to track cycle\");\n                const top = state.stock.getTop();\n                if (top) {\n                    setStockSuggestionCards([...stockSuggestionCards, top]);\n                } \n                if (state.stock.stack.length + state.waste.stack.length <= stockSuggestionCards.length) {\n                    console.log('we made a full cycle through the deck and had only stock suggestions, looks like a loss')\n                }\n                //however this whole fancy thing doesn't work if there are useless \"full\" suggestions.\n                //if the user is in full mode, and ignores these, it's a sign it's over\n                //if the user is in regular mode or lesser, we could recommend switching to full suggestions\n                //but that's not really the job of a faildetector\n            } else if (!suggestions) {\n                //@todo SIMPLE FAIL DETECTION\n                //no full suggestions = no moves possible mean fail unless all cards are in foundation\n                console.log(\"no suggestions - looks like a loss\");\n                //@todo implement menu clone that suggests to stop since there is nothing to do anymore\n            }\n        }\n    }, [suggestions, stockSuggestions, nonStockSuggestions, state.token]);\n    return null;\n};\n\nexport default FailDetector;\n","import React from \"react\";\nimport confetti from \"canvas-confetti\";\n\nconst Firework = (props: { intensity: number }) => {\n    const canvasRef = React.createRef<HTMLCanvasElement>();\n    React.useEffect(() => {\n        if (canvasRef && canvasRef.current) {\n            const count = 15 * props.intensity;\n            const origin = {\n                x: 0.5,\n                y: 0.33,\n            };\n            const defaults = {\n                ticks: 50,\n                origin,\n                particleCount: 40,\n                startVelocity: 20,\n                decay: 0.8,\n                spread: 360,\n            };\n            const localConfetti = confetti.create(canvasRef.current, { resize: true });\n\n            const fire = (particleRatio: any, opts: any) => {\n                localConfetti(\n                    Object.assign({}, defaults, opts, {\n                        particleCount: Math.floor(count * particleRatio),\n                    })\n                );\n            };\n\n            fire(0.25, {\n                startVelocity: 55,\n            });\n            fire(0.2, {});\n            fire(0.35, {\n                decay: 0.91,\n                scalar: 0.8,\n            });\n            fire(0.1, {\n                startVelocity: 25,\n                decay: 0.92,\n                scalar: 1.2,\n            });\n            fire(0.1, {\n                startVelocity: 45,\n            });\n            fire(0.1, {\n                startVelocity: 45,\n            });\n        }\n    }, [canvasRef]);\n\n    return <canvas ref={canvasRef}></canvas>;\n};\n\nexport default Firework;\n","import CardModel from \"../../Model/Deck/Card\";\nimport Firework from \"./Firework\";\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst CardFirework = (props: { model: CardModel }) => {\n    const { state, updateContext } = useGlobalContext();\n    const [fire, setFire] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        if (props.model.success) {\n            setFire(true);\n            const timeout = setTimeout(() => updateContext((ctx) => ctx.clearSuccess(props.model)), 25);\n            return () => clearTimeout(timeout);\n        }\n    }, [state?.token, props.model.success]);\n    return <>{fire && <Firework intensity={props.model.success} />}</>;\n};\n\nexport default CardFirework;\n","const getStackLabel = (source: string) => {\n    const names = [0, 1, 2, 3, 4, 5, 6].map((id) => \" stack \" + (id + 1));\n    let label = \"\";\n    const split = source.split(\"-\");\n    label += split[0];\n    if (split.length > 1) {\n        label += names[parseInt(split[1])];\n    }\n    return label;\n};\n\nexport default getStackLabel;\n","import CardFirework from \"./CardFirework\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport GameModes from \"../../GameModes\";\nimport PauseContext from \"./PauseContext\";\nimport React from \"react\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport getStackLabel from \"./StackDescription\";\nimport { useDrag } from \"react-dnd\";\nimport useGlobalContext from \"../GlobalContext\";\n\ntype CardProps = {\n    index: number;\n    models: CardModel[];\n    isSuggested?: (index: number) => boolean | undefined;\n    isSelected?: (index: number) => boolean;\n    blink?: number;\n    zIndex?: number;\n    offsetTop?: (index: number, models: CardModel[]) => number;\n    offsetLeft?: (index: number) => number;\n    isDrag?: boolean;\n};\n\nconst Card = (props: CardProps) => {\n    const ReRender = () => (\n        <Card\n            {...{\n                ...props,\n                models: props.models.slice(props.index, props.models.length),\n                offsetLeft: () => 0,\n                isSelected: () => false,\n                index: 0,\n                isDrag: isDrag,\n            }}\n        />\n    );\n    if (!props.models.length) {\n        return null;\n    }\n    const model = props.models[props.index];\n    ReRender.displayName = \"ReRender\";\n    const { state, updateGameContext } = useGlobalContext();\n    const pause = React.useContext(PauseContext);\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const isFocused = state.focus.hasCard(model);\n    const [isDrag, setDrag] = React.useState<boolean>(!!props.isDrag);\n    const _isDrag = props.isDrag || isDrag;\n    const [{ opacity }, dragRef, preview] = useDrag({\n        item: { type: \"card\", model: model, render: ReRender() },\n        collect: (monitor) => {\n            return { opacity: monitor.isDragging() ? 1 : 1 };\n        },\n        canDrag: () => model.canClick() && !model.isHidden && (state.hand.currentCard() == null || model.equals(state.hand.currentCard())),\n        begin: () => {\n            setDrag(true);\n            //@todo if other card is still selected, drop it first.\n            if (model.onClick && (!props.isSelected || !props.isSelected(props.index))) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n        end: (_item, monitor) => {\n            setDrag(false);\n            if (!monitor.didDrop()) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n    });\n\n    //Deactivate native dnd preview - it's fast but it's not working on mobile.\n    React.useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, []);\n\n    const getRef = () => (model.canClick() ? dragRef : inputEl);\n    React.useEffect(() => {\n        if (isFocused && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n    }, [isFocused, state.focus.card]);\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        let ele = e.target;\n\n        while (ele && !ele.className.includes(\"card-base\")) {\n            ele = ele.offsetParent;\n        }\n\n        const rect = ele.getBoundingClientRect();\n\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - (ele?.ownerDocument?.defaultView?.pageXOffset || 0),\n                y: e.clientY - (ele?.ownerDocument?.defaultView?.pageYOffset || 0),\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n\n        const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n        //@todo A11Y allow keyboard actions in singleplayer\n        if (model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.inputMode = \"mouse\";\n                }\n            });\n        }\n    };\n\n    const getClassName = () => {\n        const hasSuggestion = (props.isSuggested && props.isSuggested(props.index)) || model.suggestion;\n        let className = `card card-base suit-${model.type.icon}`;\n        className +=\n            (!props.isSelected || !props.isSelected(props.index)) && !isFocused && !hasSuggestion ? ` card-stack-${model.source}` : \"\";\n        className += !_isDrag && props.isSelected && props.isSelected(props.index) && !_isDrag ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += model.canClick() ? \" clickable\" : \"\";\n        className += hasSuggestion && !isFocused ? \" card-suggested\" : \"\";\n        className += isFocused ? \" card-focused\" : \"\";\n        return className;\n    };\n\n    const getCardStyle = () => {\n        const style = {\n            opacity: _isDrag ? 0 : opacity,\n            zIndex: (props.zIndex ? props.zIndex : (props.offsetTop && props.offsetTop(props.index, props.models) > 0 ? 1 : 0) * 20) + 1,\n            top: props.offsetTop ? props.offsetTop(props.index, props.models) / 15 + \"em\" : 0,\n            ...model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft(props.index) * 2 + \"em\";\n        }\n\n        if (!model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    };\n\n    const getStackbaseStyle: () => React.CSSProperties = () => {\n        if (!model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    };\n\n    let label = getStackLabel(model.source);\n    label += \": \";\n\n    label += model.isHidden ? \"hidden card\" : model.type.icon + model.face;\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n\n    return (\n        <>\n            <div style={getStackbaseStyle()} className=\"stack-base\">\n                <button\n                    onFocus={() => {\n                        // updateContext((ctx) => {\n                        //     ctx.navigator.update(model.source, props.model);\n                        // });\n                    }}\n                    onBlur={() => {\n                        //updateContext((ctx) => ctx.focus.unsetCard(props.model));\n                    }}\n                    style={getCardStyle()}\n                    // ref={inputEl}\n                    ref={getRef()}\n                    className={getClassName()}\n                    onClick={onClick}\n                    disabled={!model.canClick() || pause.state.paused}\n                    tabIndex={model.canClick() ? 0 : -1}\n                    aria-label={label}\n                    title={label}\n                >\n                    <CardFirework model={model} />\n                    <div className=\"card-content\">\n                        {model.isHidden || pause.state.paused ? (\n                            <div className=\"card-back\">&nbsp;</div>\n                        ) : (\n                            <div className=\"card-grid-container\">\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-left\">{model.face}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div className=\"mainface\">\n                                    <div className=\"align-center\">{model.face} </div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-right\">{model.face}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </button>\n            </div>\n            {props.models.length - 1 > props.index && <Card {...props} isDrag={_isDrag} index={props.index + 1} />}\n        </>\n    );\n};\n\nexport default Card;\n","import GameModes from \"../../GameModes\";\nimport { IStack } from \"../../Model/Game/Stack\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst StackBase = (props: { model: IStack; children?: any | null }) => {\n    let classname = \"card-base socket\";\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        if (state.focus.hasStack(props.model.source) && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            const current = inputEl && inputEl.current ? inputEl.current : null;\n            current && current.focus();\n        }\n    });\n    if (!props.model.stack.length) {\n        if (props.model.blinkFor) {\n            classname += \" socket-blink\";\n        } else if (state.focus.hasStack(props.model.source)) {\n            classname += \" socket-focused\";\n        } else {\n            classname += \" socket-empty\";\n        }\n    } else {\n        classname += \" socket-full\";\n    }\n\n    if (props.model.suggestion && !props.model.stack.length) {\n        classname += \" socket-suggested\";\n    }\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": empty socket\";\n\n    return (\n        <button\n            onFocus={() => {\n                // updateContext((ctx) => {\n                //     ctx.navigator.update(props.model.parent);\n                // });\n            }}\n            onBlur={() => {\n                // updateContext((ctx) => ctx.focus.unsetStack(props.model.parent));\n            }}\n            ref={inputEl}\n            className={classname}\n            onClick={onClick}\n            disabled={!!props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n            aria-label={label}\n            title={label}\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import { IStack } from \"../../Model/Game/Stack\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\n\ntype _selector = (model: Model) => IStack;\n\nconst useBlinkEffect = (selector: _selector) => {\n    const { updateContext, state } = useGlobalContext();\n    const model = selector(state);\n    let timeout: any = null;\n    React.useEffect(() => {\n        if (state && selector(state).blinkFor) {\n            timeout = setTimeout(\n                () =>\n                    updateContext((state: Model) => {\n                        selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [state, model.blinkFor]);\n};\n\nexport default useBlinkEffect;\n","import { IStack } from \"../../Model/Game/Stack\";\nimport { useDrop } from \"react-dnd\";\nimport useGlobalContext from \"../GlobalContext\";\n\nexport const useStackDrop = (model: IStack, accepts?: (c: any) => boolean) => {\n    const { updateGameContext } = useGlobalContext();\n    return useDrop({\n        accept: \"card\",\n        canDrop: (item: any) => {\n            return (accepts && accepts(item.model)) || model.accepts(item.model);\n        },\n        drop: () => {\n            updateGameContext(model.clickEmpty({ isKeyBoard: false }));\n        },\n    })[1];\n};\n","import Card from \"./Card\";\nimport FoundationStackModel from \"../../Model/Game/FoundationStack\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\nimport { useStackDrop } from \"./useStackDrop\";\n\ntype FoundationProps = { index: number; model: FoundationStackModel };\n\nconst Foundation = () => {\n    const { state } = useGlobalContext();\n    return (\n        <>\n            {state.foundation.stacks.map((foundation, index) => (\n                <FoundationStack key={index} model={foundation} index={index} />\n            ))}\n        </>\n    );\n};\n\nexport default Foundation;\n\nconst FoundationStack = (props: FoundationProps) => {\n    useBlinkEffect((model) => model.foundation.stacks[props.index]);\n    const { state } = useGlobalContext();\n    const model = props.model;\n    const drop = useStackDrop(props.model);\n    const cards = state.hand.source == model.source ? [...model.stack, ...state.hand.stack] : [...model.stack];\n    return (\n        <div className=\"board-field\" key={props.index} ref={drop}>\n            <StackBase model={model}>\n                <div className={\"align-center foundation-base suit-\" + model.icon}>{model.icon}</div>\n            </StackBase>\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={model.blinkFor}\n                isSuggested={(index) => model.suggestion && model.stack.length - 1 == index}\n                isSelected={(index) => index > model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import PauseContext from \"../../Game/PauseContext\";\nimport React from \"react\";\n\nconst Clock = () => {\n    const { state, getElapsed } = React.useContext(PauseContext);\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (state.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [state.started, state.paused]);\n\n    return !state.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Hearts = () => {\n    const { state } = useGlobalContext();\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode == \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Hint = () => {\n    const { state, updateContext } = useGlobalContext();\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import React from \"react\";\nimport { toast } from \"react-toastify\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Points = () => {\n    const { state } = useGlobalContext();\n    const showToast = () => {\n        toast.info(\n            <ul>\n                {state.game.rating.ratings.reverse().map((rating, index) => (\n                    <li key={index}>\n                        {rating.points} - {rating.text}\n                    </li>\n                ))}\n            </ul>,\n            { autoClose: false }\n        );\n    };\n    return (\n        <div>\n            <button title=\"Points\" onClick={showToast}>\n                <span className=\"icon\">🏆</span>\n            </button>\n            {state?.game.rating.points}\n        </div>\n    );\n};\n\nexport default Points;\n","import { BoardContext } from \"../../Game/BoardContext\";\nimport PauseContext from \"../../Game/PauseContext\";\nimport React from \"react\";\n\nconst ToggleMenu = () => {\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n\n    return (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Undo = () => {\n    //@todo use GlobalState token to avoid double processing\n    const { state, replaceContext } = useGlobalContext();\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"./Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons header-right\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import \"./StartScreen/Menu.scss\";\n\nimport { Universal, getKeyboardLayout } from \"../../common/KeyboardLayouts\";\nimport useNavigationContext, { NavigationProvider } from \"./StartScreen/NavigationContext\";\n\nimport { BoardContext } from \"../Game/BoardContext\";\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GameModes from \"../../GameModes\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport PauseContext from \"../Game/PauseContext\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst _Menu = () => {\n    return (\n        <NavigationProvider>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = useGlobalContext();\n    const pause = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too if consented and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = useNavigationContext();\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining == 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining == 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) [(announcement = \"The game is not paused.\")];\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle label=\"😴\" />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle label=\"😴\" />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon=\"▶️\"\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                        />\n                        <MenuButton\n                            icon=\"🌪️\"\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            toggled={navigation.mainMenu == \"entropy\"}\n                        >\n                            <MenuButton\n                                icon=\"🌪️\"\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                            />\n                            <MenuButton\n                                icon=\"🌬️\"\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon=\"♻️\"\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon=\"🗑️\" title=\"Quit Game\" onClick={() => restart()} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import React from \"react\";\n\nconst usePrevious = <T>(value: T) => {\n    const ref = React.useRef<T>();\n    React.useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n","import Card from \"./Card\";\nimport PauseContext from \"./PauseContext\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePrevious from \"./usePrevious\";\n\nconst Renderer = (props: { length: number; paused: boolean; started: number }) => {\n    const context = useGlobalContext();\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout: any = null;\n        if (\n            context.state.settings.launchSettings.speed &&\n            started &&\n            !paused &&\n            previous &&\n            (previous?.length != length || previous?.started != started || previous?.paused != paused)\n        ) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (\n                        length == state.stock.stack.length &&\n                        state.stock.passes > 0 &&\n                        (state.stock.stack.length || state.waste.stack.length)\n                    ) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => clearTimeout(timeout);\n    }, [length, paused, started]);\n\n    if (!context || !context.state) return null;\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            <Card\n                index={0}\n                key={0}\n                models={context.state.stock.stack}\n                offsetTop={(index) => (index / 2) * -1}\n                zIndex={0}\n                blink={context?.state?.stock.blinkFor}\n                isSuggested={(index) => context?.state?.stock.suggestion && index == context.state.stock.stack.length - 1}\n            />\n        </div>\n    );\n};\n\nconst Stock = () => {\n    const { state } = useGlobalContext();\n    useBlinkEffect((model) => model.stock);\n    const pause = React.useContext(PauseContext);\n    const { paused, started } = pause.state;\n    return <Renderer length={state.stock.stack.length} paused={paused} started={started} />;\n};\n\nexport default Stock;\n","import Card from \"./Card\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport TableauModel from \"../../Model/Game/Tableau\";\nimport TableauStackModel from \"../../Model/Game/TableauStack\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\nimport { useStackDrop } from \"./useStackDrop\";\n\ntype TableauProps = { index: number; model: TableauStackModel; parent: TableauModel };\n\nconst Tableau = () => {\n    const { state } = useGlobalContext();\n    return (\n        <>\n            {state.tableau.stacks.map((tableau, index) => (\n                <TableauStack key={index} index={index} model={tableau} parent={state.tableau} />\n            ))}\n        </>\n    );\n};\nexport default Tableau;\n\nconst TableauStack = (props: TableauProps) => {\n    useBlinkEffect((s) => s.tableau.stacks[props.index]);\n    const { state } = useGlobalContext();\n    const drop = useStackDrop(props.model);\n    const cards = state.hand.source == props.model.source ? [...props.model.stack, ...state.hand.stack] : [...props.model.stack];\n    let offset = 1;\n    const getOffset = (index: number, cards: CardModel[]) => {\n        for (let i = 0; i <= index; i++) {\n            if (cards[i] && !cards[i].isHidden) {\n                offset = i * 12 + (index - i) * 24;\n                return offset;\n            }\n        }\n        offset = index * 12;\n        return offset;\n    };\n\n    return (\n        <div className=\"board-field\" ref={drop}>\n            <StackBase model={props.model} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={props.model.blinkFor}\n                isSuggested={(index) => props.model.suggestion && props.model.stack.length - 1 == index}\n                offsetTop={(index, models) => getOffset(index, models)}\n                isSelected={(index) => index > props.model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import Card from \"./Card\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\nimport { useStackDrop } from \"./useStackDrop\";\n\nconst Waste = () => {\n    const { state } = useGlobalContext();\n    useBlinkEffect((model) => model.waste);\n    const getOffset = (index: number) => {\n        if (state.settings.launchSettings.drawMode == \"single\") {\n            return 0;\n        }\n        const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n        let additionalOffset = 2;\n        if (length == 2) {\n            additionalOffset = 1;\n        }\n\n        if (length == 1) {\n            additionalOffset = 0;\n        }\n\n        return ((index - length - 2) % 3) + additionalOffset;\n    };\n\n    const drop = useStackDrop(state.waste, () => state.hand.isFromWaste());\n\n    const cards = state?.hand.source == state.waste.source ? [...state.waste.stack, ...state.hand.stack] : [...state.waste.stack];\n\n    return (\n        <div className=\"board-field\" ref={drop}>\n            <StackBase model={state.waste} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                offsetTop={(index) => (index / 2) * -1}\n                offsetLeft={(index) => getOffset(index)}\n                blink={state.waste.blinkFor}\n                isSuggested={(index) => state.waste.suggestion && index == state.waste.stack.length - 1}\n                isSelected={(index) => index > state.waste.stack.length - 1}\n            />\n        </div>\n    );\n};\nexport default Waste;\n","import { BoardContext } from \"./BoardContext\";\nimport React from \"react\";\nimport useGameContext from \"./GameContext\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst Detector = () => {\n    const { state } = useGlobalContext();\n    const { win } = useGameContext();\n    const { player } = React.useContext(BoardContext);\n    React.useEffect(() => {\n        if (!state.hand.currentCard() && state.foundation.countCards() == 52) {\n            win(player);\n        }\n    }, [state.token]);\n    return null;\n};\n\nconst WinDetector = () => {\n    const { state } = useGlobalContext();\n    const { gameState } = useGameContext();\n    return (!gameState.isEnded && !!state.settings.launchSettings.autoUncover && !!gameState.started && <Detector />) || null;\n};\n\nexport default WinDetector;\n","import \"./Board.scss\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nimport { Slide, ToastContainer } from \"react-toastify\";\n\nimport AutoSolver from \"./AutoSolver\";\nimport AutoUncoverer from \"./AutoUncoverer\";\nimport BoardNavigator from \"./Navigation/BoardNavigator\";\nimport Dealer from \"./Dealer\";\nimport DndPreview from \"../../common/DndPreview\";\nimport FailDetector from \"./FailDetector\";\nimport Foundation from \"./Foundation\";\nimport Header from \"../UI/Header/Header\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\nimport WinDetector from \"./WinDetector\";\n\ntype BoardProps = { mode: string };\nconst Board = (props: BoardProps) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n    return (\n        <>\n            <Menu />\n            <Header mode={props.mode} />\n            <ToastContainer\n                style={{ zIndex: 8888 }}\n                position=\"top-center\"\n                closeOnClick={false}\n                newestOnTop={true}\n                limit={1}\n                pauseOnFocusLoss={false}\n                draggable={false}\n                transition={Slide}\n            />\n            <div className={\"board-jail \" + props.mode}>\n                <div className={\"board-grid-container \" + props.mode}>\n                    <Stock />\n                    <Waste />\n                    <div className=\"board-field spacer\" ref={ref}>\n                        {ref.current && <DndPreview reff={ref.current} />}\n                    </div>\n                    <Foundation />\n                    <Tableau />\n                </div>\n            </div>\n            <Dealer />\n            <BoardNavigator />\n            <AutoSolver />\n            <WinDetector />\n            <FailDetector />\n            <AutoUncoverer />\n        </>\n    );\n};\n\nexport default Board;\n","import \"./Screens.scss\";\n\nimport PauseContext from \"../Game/PauseContext\";\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst EndScreen = () => {\n    const { state, restart } = useGlobalContext();\n    const pause = React.useContext(PauseContext);    \n    //@todo show launch settings (draw mode, recycling mode)\n    //@todo show win or lose situation\n    //@todo how to persist the result? from here? \n    // Or track it via context from beginning on?    \n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport {BoardProvider} from \"./BoardContext\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../GlobalContext\";\nimport React from \"react\";\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\n//We use class component here because setState allows partial updates\nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                state.setToken(Math.random());\n                return state;\n            }\n\n            return null;\n        });\n\n    //on every render, we refresh the click handlers in the model and the suggestions\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider value={{ player: this.props.player }}>\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n","import AspectRatio from \"../../common/AspectRatio/AspectRatio\";\nimport BoardWrap from \"./BoardWrap\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport DelayedSuspense from \"../../common/DelayedSuspense\";\nimport { GameContextProvider } from \"./GameContext\";\nimport GameModes from \"../../GameModes\";\nimport { LaunchSettings } from \"../../Common\";\nimport { PauseProvider } from \"./PauseContext\";\nimport Ratios from \"../../common/AspectRatio/Ratios\";\nimport React from \"react\";\n\ninterface GameProps {\n    launchState: LaunchSettings;\n    deck: Deck;\n    restart: () => void;\n}\n\nconst SinglePlayer = (props: GameProps) => {\n    const { launchState, deck, restart } = props;\n    return (\n        <AspectRatio ratio={Ratios._4to3}>\n            <div className={\"layout-grid-container singleplayer\"}>\n                <BoardWrap player={0} settings={launchState} restart={restart} deck={deck} />\n            </div>\n        </AspectRatio>\n    );\n};\n\nconst SplitScreen = (props: GameProps) => {\n    const { launchState, deck, restart } = props;\n\n    return (\n        <div className=\"game-layout-container splitscreen\">\n            <div className={\"layout-grid-container \" + launchState.boardMode}>\n                <BoardWrap\n                    player={0}\n                    settings={{ ...launchState, inputMode: launchState.players[0].inputMethod }}\n                    restart={restart}\n                    deck={deck.copy()}\n                />\n            </div>\n\n            <div className={\"layout-grid-container \" + launchState.boardMode}>\n                <BoardWrap\n                    player={1}\n                    settings={{ ...launchState, inputMode: launchState.players[1].inputMethod }}\n                    restart={restart}\n                    deck={deck.copy()}\n                />\n            </div>\n        </div>\n    );\n};\n\nconst Game = (props: GameProps) => {\n    return (\n        <GameContextProvider>\n            <PauseProvider>\n                <DelayedSuspense delay={500} fallback={<h3>Loading...</h3>}>\n                    {props.launchState.boardMode == GameModes.SINGLEPLAYER && <SinglePlayer {...props} />}\n                    {props.launchState.boardMode == GameModes.VERSUS && <SplitScreen {...props} />}\n                </DelayedSuspense>\n            </PauseProvider>\n        </GameContextProvider>\n    );\n};\n\nexport default Game;\n"],"sourceRoot":""}