{"version":3,"sources":["View/Game/Navigation/BoardGamePad.tsx","View/Game/Navigation/BoardKeyboard.tsx","View/Game/Navigation/BoardNavigator.tsx","View/Game/Dealer.tsx","View/Game/BlinkingComponent.js","View/Game/StackDescription.ts","View/Game/Card.js","View/Game/Hand.tsx","View/Game/StackBase.js","View/Game/Foundation.js","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","View/UI/Menu.tsx","View/Game/Stock.js","View/Game/Tableau.js","View/Game/Waste.js","View/Game/Board.tsx","View/UI/EndScreen.js","Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/BasicStack.ts","Model/Game/HandHoldingStack.ts","Model/Game/Foundation.ts","Model/Business/Foundation.ts","Model/Game/Rating.ts","Model/Game/TimeMachine.ts","Model/Game/Game.ts","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.ts","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/Tableau.ts","Model/Game/Waste.ts","Model/Model.ts","View/Game/BoardWrap.tsx"],"names":["BoardGamePad","props","state","React","useContext","GlobalContext","player","BoardContext","isGamePadDriven","settings","launchSettings","inputMode","isSinglePlayer","boardMode","GameModes","SINGLEPLAYER","switchToGamePad","ctx","focus","isKeyBoard","GamePad","gamepadIndex","players","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","layout","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","BoardNavigator","updateContext","updateGameContext","replaceContext","paused","PauseContext","before","x","navigator","currentIndex","y","z","isPaused","handlers","modifier","moveLeft","moveRight","moveUp","moveDown","handler","pressCurrent","hand","stack","length","onClick","isKeyboard","togglePause","suggestionMode","supportsHints","isTemporary","isVisible","isDisabled","enableHint","_state","previous","game","timemachine","popPreviousState","previousStates","rating","penalize","Dealer","timeouts","quickDeal","dealer","isDealt","dealAll","deal","dealt","push","setTimeout","dealOne","useEffect","forEach","timeout","clearTimeout","BlinkingComponent","selector","this","context","blinkFor","unblink","Component","contextType","getStackLabel","source","names","map","id","label","split","parseInt","Card","pause","inputEl","useRef","isFocused","hasCard","model","current","card","e","preventDefault","clientX","clientY","ele","target","className","includes","offsetParent","rect","getBoundingClientRect","position","click","ownerDocument","defaultView","pageXOffset","pageYOffset","element","isHidden","type","icon","face","style","pointerEvents","onFocus","onBlur","zIndex","offsetTop","top","entropyStyle","offsetLeft","left","getCardStyle","ref","hasSuggestion","isSuggested","suggestion","isSelected","blink","canClick","getClassName","disabled","tabIndex","aria-label","title","Hand","parentModel","index","_c","p","StackBase","classname","hasStack","parent","clickEmpty","children","Foundation","s","foundation","stacks","Stacks","Clock","getElapsed","useState","elapsed","setElapsed","interval","setInterval","started","clearInterval","Hearts","recyclingMode","stock","passes","createString","Array","from","keys","join","getHearts","Hint","Points","points","ToggleMenu","Undo","Math","pow","multiplicator","Header","mode","Menu","restart","NavigationContext","navigation","setNavigation","switchToMenu","menu","pos","screeen","mainMenu","showMenu","remaining","allowed","pauses","announcement","keyboardLayout","pausedBy","MenuTitle","MenuTree","MenuButton","sm","SuggestionModes","next","key","setSuggestionMode","val","toggleMainMenu","toggled","EntropyLevels","baseEntropy","lvl","setEntropy","interactionEntropy","skip","_Menu","screen","navigationContext","value","Renderer","InnerRenderer","usePrevious","speed","waste","isFromWaste","putDownHand","addAll","popTop","canRecycle","recycle","Stock","Tableau","tableau","getOffset","i","Waste","drawMode","isHoldingCard","additionalOffset","Board","EndScreen","isEnded","getTimePenalty","end","Date","now","getBonusPoints","getTotal","Blinker","startBlink","registerBlink","stopBlink","dispatchPutDown","wouldAcceptHand","src","registerMove","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","uncover","registerUncover","dealingAt","callback","newCard","popOne","isFirst","Dispatcher","clickHandler","getHandler","Focus","keyboard","validSettings","setCard","unsetCard","equals","unsetStack","setStack","BasicStack","getTop","getClickable","filter","HandHoldingStack","getHandContent","FoundationStack","setOnClick","acceptedCards","usedCards","color","sindex","getCurrentAccepted","currentFoundation","hasMoreThanOneCard","accepts","currentCard","add","putDown","currentAccepted","cards","causeEntropy","min","pop","remove","getPreviousUsed","countCards","f","reduce","a","b","Object","Suits","suit","getFoundationOrder","template","copy","orig","origStack","copyAll","tryDetectEnd","_card","Rating","registerHint","disableHint","currentMove","rateMove","registerRecycle","console","debug","other","undoPenalty","penalty","done","hintPenalty","start","secondsToFinish","trunc","round","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","memorable","modified","pushPreviousState","modelEquals","isRequested","popPrevious","stackEquals","every","stacksEqual","Game","c","splice","_onClick","isHoldingKing","isFromCurrentSource","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","Navigator","rows","getZindex","elem","targets","update","row","j","finishNav","valid","direction","undefined","clickable","toggleRow","pickLast","last","Settings","suggestionModes","get","getHintMode","allSuggestionModes","recyclings","reverse","setCardProperties","isOnTop","result","_position","moveToWaste","recycleWaste","Suggestions","evaluateOptions","disableAllSuggestions","NONE","getUncoverOptions","getPutdownSuggestions","getPickupOptions","FULL","SCORED","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","onClickhidden","canUncover","getStack","canPutDown","range","getTableauOrder","indexOf","getCard","stackEntropy","entropy","concat","offset","canAdd","suggestor","withSuggestions","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","createContext","BoardProvider","Provider","BoardWrap","setState","render"],"mappings":"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","file":"static/js/5.1ef75a03.chunk.js","sourcesContent":["import { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GamePad from \"../../../common/GamePad\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardGamePad = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isGamePadDriven = state.settings.launchSettings.inputMode == \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n\n    const switchToGamePad = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight(switchToGamePad)}\n            onUp={() => props.onUp(switchToGamePad)}\n            onDown={() => props.onDown(switchToGamePad)}\n            onAction={() => props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToGamePad)}\n            onMenu={() => props.onMenu(switchToGamePad)}\n        />\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"../../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GlobalContext from \"../../Context\";\nimport Keyboard from \"../../../common/Keyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardKeyboard = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isKeyboardDriven = state.settings.launchSettings.inputMode === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import { BoardContext } from \"../BoardWrap\";\nimport BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\ntype _mod = (state: Model) => void;\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const isPaused = !!paused.state.paused;\n\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const handlers = {\n        onLeft: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveLeft(before);\n            }),\n\n        onRight: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveRight(before);\n            }),\n\n        onUp: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveUp(before);\n            }),\n\n        onDown: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveDown(before);\n            }),\n\n        onAction: (modifier: _mod) =>\n            updateGameContext((ctx) => {\n                modifier(ctx);\n                const handler = state?.navigator?.pressCurrent();\n                handler && handler(ctx);\n            }),\n\n        onCancel: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n            }),\n\n        onPause: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n\n        onHint: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n                if (isVisible(state) && !isDisabled(state)) {\n                    state.settings.enableHint();\n                }\n            });\n        },\n\n        onUndo: () => {\n            replaceContext((_state) => {\n                const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n                if (previous) {\n                    previous.game.rating.penalize(_state.game.rating);\n                    return previous;\n                }\n                return null;\n            });\n        },\n        onMenu: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n    };\n\n    return isPaused ? null : (\n        <>\n            <BoardKeyboard {...handlers} />\n            <BoardGamePad {...handlers} />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import GlobalContext from \"../Context\";\nimport React from \"react\";\n\nconst Dealer: () => any = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const timeouts: any[] = [];\n\n    if (state.settings.launchSettings.quickDeal) {\n        if (state && state.dealer && !state.dealer.isDealt) {\n            replaceContext(state.dealer.dealAll());\n        }\n    } else {\n        const deal = (dealt: number) => {\n            timeouts.push(\n                setTimeout(() => {\n                    if (state && state.dealer && !state.dealer.isDealt) {\n                        replaceContext(state.dealer.dealOne(dealt, deal));\n                    }\n                }, 35)\n            );\n        };\n\n        React.useEffect(() => {\n            deal(state.dealer.dealt);\n            return () =>\n                timeouts.forEach((timeout) => {\n                    clearTimeout(timeout);\n                });\n        }, []);\n        React.useEffect(() => {}, [state.dealer.isDealt]);\n    }\n    return null;\n};\nexport default Dealer;\n","import { Component } from \"react\";\nimport GlobalContext from \"../Context\";\n\nexport default class BlinkingComponent extends Component {\n    constructor(selector) {\n        super();\n        this.timeout = null;\n        this.selector = selector;\n    }\n\n    static contextType = GlobalContext;\n\n    componentDidUpdate() {\n        if (this.selector(this.context.state).blinkFor) {\n            this.timeout = setTimeout(\n                () =>\n                    this.context.updateGameContext((state) => {\n                        this.selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timeout);\n    }\n}\n","const getStackLabel = (source: string) => {\n    const names = [0, 1, 2, 3, 4, 5, 6].map((id) => \" stack \" + (id + 1));\n    let label = \"\";\n    const split = source.split(\"-\");\n    label += split[0];\n    if (split.length > 1) {\n        label += names[parseInt(split[1])];\n    }\n    return label;\n};\n\nexport default getStackLabel;\n","import GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\n\nconst Card = (props) => {\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    const inputEl = React.useRef(null);\n    const isFocused = state.focus.hasCard(props.model);\n    React.useEffect(() => {\n        if (isFocused && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n    }, [isFocused, state.focus.card]);\n    const onClick = (e) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        let ele = e.target;\n\n        while (ele && !ele.className.includes(\"card-base\")) {\n            ele = ele.offsetParent;\n        }\n\n        const rect = ele.getBoundingClientRect();\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - ele.ownerDocument.defaultView.pageXOffset,\n                y: e.clientY - ele.ownerDocument.defaultView.pageYOffset,\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n        const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n        //@todo A11Y allow keyboard actions in singleplayer\n        if (props.model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                props.model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.inputMode = \"mouse\";\n                }\n            });\n        }\n    };\n\n    const getClassName = () => {\n        const hasSuggestion = props.isSuggested || props.model.suggestion;\n        let className = `card card-base suit-${props.model.type.icon}`;\n        className += !props.isSelected && !isFocused && !hasSuggestion ? ` card-stack-${props.model.source}` : \"\";\n        className += props.isSelected ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += props.model.canClick() ? \" clickable\" : \"\";\n        //@todo onhover, trigger highlight of suggested target card/stack (preview what happens if picked up)\n        className += hasSuggestion && !isFocused ? \" card-suggested\" : \"\";\n        className += isFocused ? \" card-focused\" : \"\";\n        return className;\n    };\n\n    const getCardStyle = () => {\n        const style = {\n            zIndex: (props.zIndex ? props.zIndex : !!props.offsetTop * 20) + 1,\n            top: props.offsetTop ? props.offsetTop / 15 + \"em\" : 0,\n            ...props.model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft * 2 + \"em\";\n        }\n\n        if (!props.model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    };\n\n    const getStackbaseStyle = () => {\n        if (!props.model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": \";\n\n    label += props.model.isHidden ? \"hidden card\" : props.model.type.icon + props.model.face;\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n\n    return (\n        <div style={getStackbaseStyle()} className=\"stack-base\">\n            <button\n                onFocus={() => {\n                    // updateContext((ctx) => {\n                    //     ctx.navigator.update(props.model.source, props.model);\n                    // });\n                }}\n                onBlur={() => {\n                    //updateContext((ctx) => ctx.focus.unsetCard(props.model));\n                }}\n                style={getCardStyle()}\n                ref={inputEl}\n                className={getClassName()}\n                onClick={onClick ? onClick : null}\n                disabled={!props.model.canClick() || pause.state.paused}\n                tabIndex={props.model.canClick() ? 0 : -1}\n                aria-label={label}\n                title={label}\n            >\n                <div className=\"card-content\">\n                    {props.model.isHidden || pause.state.paused ? (\n                        <div className=\"card-back\">&nbsp;</div>\n                    ) : (\n                        <div className=\"card-grid-container\">\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-left\">{props.model.face}</div>\n                            </div>\n                            <div>&nbsp;</div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div className=\"mainface\">\n                                <div className=\"align-center\">{props.model.face}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div>&nbsp;</div>\n                            <div>\n                                <div className=\"align-right\">{props.model.face}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </button>\n        </div>\n    );\n};\n\nexport default Card;\n","import Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport React from \"react\";\nimport { XY } from \"../UI/XY\";\n\nconst Hand = (props: { parentModel: IStack; offsetTop: number; offsetLeft: number; onClick: (p: XY) => void }) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state || !state.hand || props.parentModel.source !== state.hand.source) {\n        return null;\n    }\n\n    return (\n        <>\n            {[\n                state.hand &&\n                    state.hand.stack &&\n                    state.hand.stack.map((card, index) => (\n                        <Card\n                            key={index}\n                            model={card}\n                            offsetTop={props.offsetTop + index * 24}\n                            offsetLeft={props.offsetLeft}\n                            zIndex={1000 + index * 20}\n                            isSelected={true}\n                            onClick={(_c: any, p: XY) => props.onClick(p)}\n                        />\n                    )),\n            ]}\n        </>\n    );\n};\n\nexport default Hand;\n","import GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\n\nconst StackBase = (props) => {\n    let classname = \"card-base socket\";\n    const inputEl = React.useRef(null);\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    React.useEffect(() => {\n        if (state.focus.hasStack(props.model.parent) && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n    });\n    if (!props.model.stack.length) {\n        if (props.model.blinkFor) {\n            classname += \" socket-blink\";\n        } else if (state.focus.hasStack(props.model.source)) {\n            classname += \" socket-focused\";\n        } else {\n            classname += \" socket-empty\";\n        }\n    } else {\n        classname += \" socket-full\";\n    }\n\n    if (props.model.suggestion && !props.model.stack.length) {\n        classname += \" socket-suggested\";\n    }\n\n    const onClick = (e) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": empty socket\"\n\n    return (\n        <button\n            onFocus={() => {\n                // updateContext((ctx) => {\n                //     ctx.navigator.update(props.model.parent);\n                // });\n            }}\n            onBlur={() => {\n                // updateContext((ctx) => ctx.focus.unsetStack(props.model.parent));\n            }}\n            ref={inputEl}\n            className={classname}\n            onClick={onClick}\n            disabled={props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n            aria-label={label}\n            title={label}\n\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import BlinkingComponent from \"./BlinkingComponent\";\nimport Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport Hand from \"./Hand\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\n\nexport default class Foundation extends BlinkingComponent {\n    constructor(props) {\n        super((s) => s.foundation.stacks[props.index]);\n    }\n\n    static Stacks = () => {\n        const { state } = React.useContext(GlobalContext);\n        return (\n            <>\n                {state.foundation.stacks.map((foundation, index) => (\n                    <Foundation key={index} model={foundation} index={index} />\n                ))}\n            </>\n        );\n    };\n\n    render() {\n        const model = this.props.model;\n        return (\n            <div className=\"board-field\" key={this.props.index}>\n                <StackBase model={model}>\n                    <div className={\"align-center foundation-base suit-\" + model.icon}>{model.icon}</div>\n                </StackBase>\n                {model.stack.map((card, index) => (\n                    <Card\n                        key={index}\n                        model={card}\n                        blink={model.blinkFor}\n                        isSuggested={model.suggestion && model.stack.length - 1 == index}\n                    />\n                ))}\n                <Hand\n                    parentModel={model}\n                    //onClick={(c, p) => onClick(model.stack[model.stack.length - 1], p, this.props.index)}\n                    stack={model.stack}\n                />\n            </div>\n        );\n    }\n}\n","import PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst Clock = () => {\n    const { state, getElapsed } = React.useContext(PauseContext);\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (state.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [state.started, state.paused]);\n\n    return !state.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Hearts = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode == \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst Hint = () => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Points = () => {\n    const { state } = React.useContext(GlobalContext);\n\n    return (\n        <>\n            <div className=\"icon-container\">🏆</div> {state?.game.rating.points}\n        </>\n    );\n};\n\nexport default Points;\n","import { BoardContext } from \"../../Game/BoardWrap\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst ToggleMenu = () => {\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n\n    return (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Undo = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"../../Style/Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import \"../Style/Menu.scss\";\n\nimport { NavigationContext, NavigationProvider, NavigationState } from \"./StartScreen/Context\";\nimport { Universal, getKeyboardLayout } from \"../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../Game/BoardWrap\";\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\n\nconst _Menu = () => {\n    const [navigation, setNavigation] = React.useState<NavigationState>({\n        menu: {\n            x: 0,\n            y: 0,\n        },\n        screen: {\n            x: 0,\n            y: 0,\n        },\n        focus: \"menu\",\n        mainMenu: \"\",\n        screeen: \"\",\n    });\n    const navigationContext = {\n        navigation,\n        setNavigation,\n    };\n    return (\n        <NavigationProvider value={navigationContext}>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = React.useContext(NavigationContext);\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n    if (!state) {\n        return null;\n    }\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining == 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining == 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) [(announcement = \"The game is not paused.\")];\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle label=\"😴\" />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle label=\"😴\" />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon=\"▶️\"\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                        />\n                        <MenuButton\n                            icon=\"🌪️\"\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            toggled={navigation.mainMenu == \"entropy\"}\n                        >\n                            <MenuButton\n                                icon=\"🌪️\"\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                            />\n                            <MenuButton\n                                icon=\"🌬️\"\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon=\"♻️\"\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon=\"🗑️\" title=\"Quit Game\" onClick={() => restart()} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import BlinkingComponent from \"./BlinkingComponent\";\nimport Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\n\nconst usePrevious = (value) => {\n    const ref = React.useRef();\n    React.useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\n\nconst Renderer = (props) => {\n    const { state } = React.useContext(PauseContext);\n    const { paused, started } = state;\n    return <InnerRenderer length={props.length} paused={paused} started={started} />;\n};\n\nconst InnerRenderer = (props) => {\n    const context = React.useContext(GlobalContext);\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout = null;\n        if (\n            context.state.settings.launchSettings.speed &&\n            previous &&\n            started &&\n            !paused &&\n            (previous.length != length || previous.started != started || previous.paused != paused)\n        ) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (\n                        length == state.stock.stack.length &&\n                        state.stock.passes > 0 &&\n                        (state.stock.stack.length || state.waste.stack.length)\n                    ) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => clearTimeout(timeout);\n    }, [length, paused, started]);\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            {context.state.stock.stack.map((card, index) => (\n                <Card\n                    key={index}\n                    model={card}\n                    offsetTop={(index / 2) * -1}\n                    zIndex={index}\n                    blink={context.state.stock.blinkFor}\n                    isSuggested={context.state.stock.suggestion && index == context.state.stock.stack.length - 1}\n                />\n            ))}\n        </div>\n    );\n};\n//Can't use multiple contexts in one React class, need two renderer functions to feed two contexts into props for reliable detection of changes\nexport default class Stock extends BlinkingComponent {\n    constructor() {\n        super((s) => s.stock);\n    }\n\n    render() {\n        return <Renderer length={this.context.state.stock.stack.length} />;\n    }\n}\n","import BlinkingComponent from \"./BlinkingComponent\";\nimport Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport Hand from \"./Hand\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\n\nexport default class Tableau extends BlinkingComponent {\n    constructor(props) {\n        super((s) => s.tableau.stacks[props.index]);\n    }\n\n    static Stacks = () => {\n        const { state } = React.useContext(GlobalContext);\n        return (\n            <>\n                {state.tableau.stacks.map((tableau, index) => (\n                    <Tableau key={index} index={index} model={tableau} parent={state.tableau} />\n                ))}\n            </>\n        );\n    };\n\n    render() {\n        const props = this.props;\n        let offset = 1;\n        const getOffset = (index) => {\n            for (let i = 0; i <= index; i++) {\n                if (props.model.stack[i] && !props.model.stack[i].isHidden) {\n                    offset = i * 12 + (index - i) * 24;\n                    return offset;\n                }\n            }\n            offset = index * 12;\n            return offset;\n        };\n\n        return (\n            <div className=\"board-field\">\n                <StackBase model={props.model} />\n                {props.model.stack.map((card, index) => (\n                    <Card\n                        key={index}\n                        model={card}\n                        blink={props.model.blinkFor}\n                        isSuggested={props.model.suggestion && props.model.stack.length - 1 == index}\n                        offsetTop={getOffset(index)}\n                    />\n                ))}\n                <Hand parentModel={props.model} stack={props.model.stack} offsetTop={getOffset(props.model.stack.length)} />\n            </div>\n        );\n    }\n}\n","import BlinkingComponent from \"./BlinkingComponent\";\nimport Card from \"./Card\";\nimport Hand from \"./Hand\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\n\nexport default class Waste extends BlinkingComponent {\n    constructor() {\n        super((s) => s.waste);\n    }\n\n    render() {\n        const { state } = this.context;\n        const getOffset = (index) => {\n            if (state.settings.launchSettings.drawMode == \"single\") {\n                return 0;\n            }\n            const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n            let additionalOffset = 2;\n            if (length == 2) {\n                additionalOffset = 1;\n            }\n\n            if (length == 1) {\n                additionalOffset = 0;\n            }\n\n            return ((index - length - 2) % 3) + additionalOffset;\n        };\n\n        return (\n            <div className=\"board-field\">\n                <StackBase model={state.waste} />\n                {state.waste.stack.map((card, index) => (\n                    <Card\n                        key={index}\n                        model={card}\n                        offsetTop={(index / 2) * -1}\n                        offsetLeft={getOffset(index)}\n                        blink={state.waste.blinkFor}\n                        isSuggested={state.waste.suggestion && index == state.waste.stack.length - 1}\n                    />\n                ))}\n                <Hand\n                    offsetTop={(state.waste.stack.length / 2) * -1}\n                    offsetLeft={getOffset(state.waste.stack.length)}\n                    parentModel={state.waste}\n                    stack={state.waste.stack}\n                />\n            </div>\n        );\n    }\n}\n","import \"../Style/Board.scss\";\n\nimport BoardNavigator from \"./Navigation/BoardNavigator\";\nimport Dealer from \"./Dealer\";\nimport Foundation from \"./Foundation\";\nimport Header from \"../UI/Header/Header\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nconst Board = (props: any) => (\n    <>\n        <Menu />\n        <Header mode={props.mode} />\n        <div className={\"board-jail \" + props.mode}>\n            <div className={\"board-grid-container \" + props.mode}>\n                <Stock />\n                <Waste />\n                <div className=\"spacer\">&nbsp;</div>\n                <Foundation.Stacks />\n                <Tableau.Stacks />\n            </div>\n        </div>\n        <Dealer />\n        <BoardNavigator />\n    </>\n);\n\nexport default Board;\n","import \"../Style/Screens.scss\";\n\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\n\nconst EndScreen = () => {\n    const { state, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    //@todo show launch settings (draw mode, recycling mode)\n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover();\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: any) => (state: Model) => {\n        if (dealt != state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n        if (state.dealer.isDealt) {\n            state.game.started = Date.now();\n        }\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt != state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        state.game.started = Date.now();\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                if (newCard) {\n                    newCard.source = tableau.stacks[i].source;\n                    if (stack.length == tableau.stacks.length - 1 - i) {\n                        newCard.isHidden = false;\n                    }\n                    tableau.deal(newCard, i);\n                    this.dealt++;\n                    this.dealingAt++;\n                    if (this.dealingAt == tableau.stacks.length) {\n                        this.dealingAt = 0;\n                    }\n                    this.isDealt = false;\n                }\n                return;\n            } else {\n                const isFirst = this.dealingAt == 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n    }\n\n    validSettings = () => this.settings.launchSettings.inputMode !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack == stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && this.card && card && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack == stack;\n}\n","import Card from \"../Deck/Card\";\n\nexport default class BasicStack {\n    source: string;\n    constructor(source: string) {\n        this.source = source;\n    }\n    stack: Card[] = [];\n    getTop: () => Card | null = () => (this.stack && this.stack.length && this.stack[this.stack.length - 1]) || null;\n    suggestion = false;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n}\n","import BasicStack from \"./BasicStack\";\nimport Hand from \"./Hand\";\n\nexport default class HandHoldingStack extends BasicStack {\n    hand: Hand;\n    constructor(source: string, hand: Hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source == this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport Suits from \"../Deck/Suits\";\nimport { XY } from \"../../View/UI/XY\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nclass FoundationStack extends HandHoldingStack implements IStack {\n    setOnClick: () => void = () => {};\n    acceptedCards: string[] = [];\n    usedCards: any[] = [];\n    icon: string = \"\";\n    color: string = \"\";\n    blinkFor: number = 0;\n    clickEmpty: (p: any) => any = () => {};\n}\nexport default class Foundation {\n    settings: Settings;\n    hand: Hand;\n    stacks: FoundationStack[];\n    blinkFor: number;\n    unblink: () => void;\n    constructor(settings: Settings, hand: Hand) {\n        this.settings = settings;\n        this.hand = hand;\n        const template = (index: number) => {\n            const s = new FoundationStack(\"foundation-\" + index, hand);\n            s.stack = [];\n            s.acceptedCards = [...getFoundationOrder()];\n            s.usedCards = [];\n            s.icon = \"\";\n            s.color = \"\";\n            s.blinkFor = 0;\n            return s;\n        };\n        const stacks = Object.keys(Suits)\n            .map((key: string) => Suits[key])\n            .map((suit, index) => ({ ...template(index), ...suit }));\n        this.stacks = [...stacks];\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, index: number) => (s:any) => void) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                card.onClick = (p: XY) => onClick({ ...card }, p, index);\n                card.canClick = () => sindex == stack.stack.length - 1;\n            });\n            this.hand.setOnClick(stack);\n        });\n    };\n\n    getCurrentAccepted = (index: number) => {\n        const currentFoundation = this.stacks[index].acceptedCards;\n        return currentFoundation[currentFoundation.length - 1];\n    };\n\n    wouldAcceptHand = (index: number) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    accepts = (index: number, card: Card | null) => {\n        if (!card) return false;\n        const currentAccepted = this.getCurrentAccepted(index);\n        return this.stacks[index].icon == card.type.icon && currentAccepted == card.face;\n    };\n\n    add = (index: number, cards: Card[]) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index: number, card: Card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return (card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop()) || null;\n    };\n\n    getPreviousUsed = (index: number) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => f.stack.length).reduce((a, b) => a + b, 0);\n\n    getTop = (index: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig: Foundation, hand: Hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new FoundationStack(origStack.source, hand);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src);\n            this.tryDetectEnd(state);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card | null, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.face) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    //@todo move this to a generic place, also detect failure\n    tryDetectEnd(state: Model) {\n        const nrofCards = state.foundation.countCards();\n        if (nrofCards === 52) {\n            state.game.isEnded = true;\n            state.game.end = Date.now();\n        }\n    }\n}\n","import Settings from \"./Settings\";\n\nexport default class Rating {\n    settings: Settings;\n    points: number;\n    multiplicator: number;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode == \"single\" && this.settings.launchSettings.recyclingMode == \"infinite\") {\n            if (this.points > 0) {\n                if (this.points < 100) {\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                }\n            }\n            console.debug(\"RATING: subtract (max) 100 points for RECYCLE\");\n        }\n    };\n\n    registerUncover = () => {\n        this.registerHint(this.settings.disableHint());\n        this.points += 5;\n        console.debug(\"RATING: add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on: boolean) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            console.debug(\"RATING: subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other: Rating) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            console.debug(`RATING: applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done: boolean) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            console.debug(`RATING: applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move: { source: string; target: string }) {\n        const isTableau = (obj: string) => obj.substr(0, 7) == \"tableau\";\n        const isFoundation = (obj: string) => obj.substr(0, 10) == \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                console.debug(\"RATING: add 10 points for MOVE tableau -> foundation\");\n                return 10;\n            }\n        } else if (move.source == \"waste\") {\n            if (isFoundation(move.target)) {\n                console.debug(\"RATING: add 10 points for MOVE waste -> foundation\");\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                console.debug(\"RATING: add 5 points for MOVE waste -> tableau\");\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                console.debug(\"RATING: subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start: number, end: number) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    };\n\n    static copy = (orig: Rating) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Model from \"../Model\";\n\nexport default class TimeMachine {\n    previousStates: any[];\n    memorable: boolean;\n    modified: boolean;\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source == target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state: any) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id: number, current: any) => {\n        const isRequested = this.previousStates.length - 1 == id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        if (on) {\n            this.modified = true;\n            this.memorable = false;\n        }\n    }\n\n    stackEquals = (a: IStack, b: IStack) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden == b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a: { stacks: IStack[] }, b: { stacks: IStack[] }) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a: Model, b: Model) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig: TimeMachine) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Rating from \"./Rating\";\nimport Settings from \"./Settings\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    settings: Settings;\n    rating: Rating;\n    timemachine: TimeMachine;\n    started: number;\n    isEnded: boolean;\n    end: number;\n    paused: any;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n        //@todo move to context:\n        this.started = 0;\n        this.isEnded = false;\n        this.end = 0;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.rating.registerMove(target, source);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = () => {\n        this.rating.registerUncover();\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig: Game) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        copy.paused = orig.paused;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    filter: (stack: any[]) => Card[] = (stack) => {\n        return stack.filter((c) => c);\n    };\n\n    pickUp = (stack: (Card | null)[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = this.filter(stack).map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source == model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.face == \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source == this.source) || null;\n\n    isFromWaste = () => this.source && this.source == \"waste\";\n\n    isFromFoundation = (index: number) => this.source && this.source == `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source == `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) == \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/IStack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: (IStack | undefined)[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source == pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x == -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x == 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        const current = this.current();\n        if (current == undefined) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = current.getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y == 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const current = this.current();\n        const last: number = current ? current.getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (!current) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current()?.source || \"\");\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = () => {\n        if (this.model.focus.card && this.model.focus.card.canClick()) {\n            return this.model.focus.card.onClick({ isKeyboard: true });\n        } else if (this.model.focus.stack) {\n            return this.current()?.clickEmpty({ isKeyboard: true });\n        } else {\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./BasicStack\";\nimport Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Stock extends BasicStack implements IStack {\n    settings: Settings;\n    recyclings: number;\n    passes: number;\n    blinkFor: number;\n    unblink: () => void;\n    clickEmpty: (p: any) => (s: any) => void;\n    constructor(stack: Card[], settings: Settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        this.clickEmpty = () => () => {};\n        if (this.settings.launchSettings.recyclingMode == \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode == \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: XY) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n    };\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode == \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode == \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste: Card[]) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card: Card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card: Card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result: Card[] = [];\n        if (this.settings.launchSettings.drawMode == \"single\") {\n            const top = this.stack.pop();\n            if (top) result = [top];\n        }\n        if (this.settings.launchSettings.drawMode == \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length == 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig: Stock) => {\n        const copy = new Stock([], orig.settings);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\");\n    };\n\n    recycleWaste = (state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\")) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key == SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key == SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length == 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length == 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].face ==\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].face &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (this.getPutdownSuggestions(tableauState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nclass TableauStack extends HandHoldingStack implements IStack {\n    //@todo move to IStack, make boolean\n    blinkFor = 0;\n    id = 0;\n    // eslint-disable-next-line no-unused-vars\n    onClick = (a: any) => (s: any) => {};\n    // eslint-disable-next-line no-unused-vars\n    clickEmpty = (a: any) => (s: any) => {};\n    setOnClick = () => {};\n}\nexport default class Tableau {\n    stacks: TableauStack[];\n    settings: Settings;\n    hand: Hand;\n\n    constructor(settings: Settings, hand: Hand) {\n        const ids = [0, 1, 2, 3, 4, 5, 6];\n        this.hand = hand;\n        this.stacks = ids.map((id) => {\n            const s = new TableauStack(\"tableau-\" + id, hand);\n            s.stack = [];\n            s.blinkFor = 0;\n            s.id = id;\n            return s;\n        });\n        this.settings = settings;\n    }\n\n    setOnClick = (\n        onClick: (a: any, b: any, index: number) => (s: any) => void,\n        onClickhidden: (a: any, b: any, index: number) => (s: any) => void,\n        hand: Hand\n    ) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p: any) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                const click = card.isHidden && sindex == stack.stack.length - 1 ? onClickhidden : onClick;\n                card.onClick = (p: any) => click({ ...card }, p, index);\n                card.canClick = () => !card.isHidden || this.canUncover(index, card);\n            });\n            hand.setOnClick(stack);\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        const top = this.getTop(index);\n        if (!top) {\n            return current && current.face === \"K\";\n        }\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = current ? range.indexOf(current.face) : 0;\n        const topIndex = range.indexOf(top.face);\n        return currentIndex + 1 == topIndex && current?.type.color !== top.type.color && top.face !== \"A\";\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        return top.isHidden && card && card.equals(this.getTop(index));\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy != 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, cards: Card[]) => {\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number) => {\n        card.source = this.stacks[index].source;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1 - (offset || 0)];\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map((stack, index) => {\n            const s = new TableauStack(stack.source, hand);\n            s.id = index;\n            s.stack = Card.copyAll(stack.stack);\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Waste extends HandHoldingStack {\n    settings: Settings;\n    blinkFor: number;\n    unblink: () => void;\n    clickEmpty: (p: any) => (s: any) => void;\n    constructor(settings: Settings, hand: Hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        this.clickEmpty = () => () => {};\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: XY) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card: Card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards: Card[]) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card: Card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    canAdd = (card: Card | null) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card: Card) => (card && card.equals(this.getTop()) && this.stack.pop()) || null;\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig: Waste, hand: Hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n    }\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()), this.hand);\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings),\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n        });\n    };\n}\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../Context\";\nimport React from \"react\";\n\nexport const BoardContext = React.createContext({\n    player: 0,\n});\n\nconst BoardProvider = BoardContext.Provider;\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                return state;\n            }\n\n            return null;\n        });\n\n    //on every render, we refresh the click handlers in the model and the suggestions\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider value={{ player: this.props.player }}>\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n"],"sourceRoot":""}