{"version":3,"sources":["View/Game/BoardGamePad.js","View/Game/BoardKeyboard.js","View/Game/BoardNavigator.js","View/Game/Dealer.js","View/Game/BlinkingComponent.js","View/Game/Card.js","View/Game/Hand.js","View/Game/StackBase.js","View/Game/Foundation.js","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","View/UI/Menu.tsx","View/Game/Stock.js","View/Game/Tableau.js","View/Game/Waste.js","View/Game/Board.tsx","View/UI/EndScreen.js","Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/BasicStack.js","Model/Game/HandHoldingStack.js","Model/Game/Foundation.js","Model/Business/Foundation.ts","Model/Game/Rating.js","Model/Game/TimeMachine.js","Model/Game/Game.js","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.js","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/Tableau.ts","Model/Game/Waste.js","Model/Model.ts","View/Game/BoardWrap.tsx"],"names":["BoardGamePad","props","state","React","useContext","GlobalContext","player","BoardContext","isGamePadDriven","settings","launchSettings","inputMode","isSinglePlayer","boardMode","switchToGamePad","ctx","focus","isKeyBoard","GamePad","gamepadIndex","players","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","layout","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","BoardNavigator","updateContext","updateGameContext","replaceContext","paused","PauseContext","before","x","navigator","currentIndex","y","z","isPaused","modifier","moveLeft","moveRight","moveUp","moveDown","pressCurrent","hand","stack","length","onClick","isKeyboard","togglePause","suggestionMode","supportsHints","isTemporary","isVisible","isDisabled","enableHint","_state","previous","game","timemachine","popPreviousState","previousStates","rating","penalize","Dealer","timeouts","quickDeal","dealer","isDealt","dealAll","deal","dealt","push","setTimeout","dealOne","useEffect","forEach","timeout","clearTimeout","BlinkingComponent","selector","this","context","blinkFor","unblink","Component","contextType","Card","pause","inputEl","useRef","isFocused","hasCard","model","current","card","e","preventDefault","clientX","clientY","ele","target","className","includes","offsetParent","rect","getBoundingClientRect","position","click","ownerDocument","defaultView","pageXOffset","pageYOffset","element","names","map","id","label","split","source","isHidden","type","icon","face","style","pointerEvents","onFocus","onBlur","zIndex","offsetTop","top","entropyStyle","offsetLeft","left","getCardStyle","ref","hasSuggestion","isSuggested","suggestion","isSelected","blink","canClick","getClassName","disabled","tabIndex","aria-label","title","Hand","parentModel","index","_c","p","StackBase","classname","hasStack","parent","clickEmpty","children","Foundation","s","foundation","stacks","Stacks","Clock","getElapsed","useState","elapsed","setElapsed","interval","setInterval","started","clearInterval","Hearts","recyclingMode","stock","passes","createString","Array","from","keys","join","getHearts","Hint","Points","points","ToggleMenu","Undo","Math","pow","multiplicator","Header","mode","Menu","restart","NavigationContext","navigation","setNavigation","switchToMenu","menu","pos","screeen","mainMenu","showMenu","onfocus","remaining","allowed","pauses","announcement","keyboardLayout","pausedBy","MenuTitle","MenuTree","MenuButton","sm","SuggestionModes","next","key","setSuggestionMode","val","toggleMainMenu","toggled","EntropyLevels","baseEntropy","lvl","setEntropy","interactionEntropy","skip","_Menu","screen","navigationContext","value","Renderer","InnerRenderer","usePrevious","speed","waste","isFromWaste","putDownHand","addAll","popTop","canRecycle","recycle","Stock","Tableau","tableau","getOffset","i","Waste","drawMode","isHoldingCard","additionalOffset","Board","EndScreen","isEnded","getTimePenalty","end","Date","now","getBonusPoints","getTotal","Blinker","startBlink","registerBlink","stopBlink","dispatchPutDown","wouldAcceptHand","src","registerMove","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","uncover","registerUncover","dealingAt","callback","newCard","popOne","isFirst","Dispatcher","clickHandler","getHandler","Focus","keyboard","validSettings","setCard","unsetCard","equals","unsetStack","setStack","BasicStack","getTop","getClickable","filter","HandHoldingStack","getHandContent","setOnClick","sindex","getCurrentAccepted","currentFoundation","acceptedCards","hasMoreThanOneCard","accepts","currentCard","add","putDown","currentAccepted","cards","causeEntropy","min","usedCards","pop","remove","getPreviousUsed","countCards","f","parseInt","reduce","a","b","Object","Suits","suit","getFoundationOrder","color","template","copy","orig","origStack","copyAll","tryDetectEnd","_card","Rating","registerHint","disableHint","currentMove","rateMove","registerRecycle","console","debug","other","undoPenalty","penalty","done","hintPenalty","start","secondsToFinish","trunc","round","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","memorable","modified","pushPreviousState","modelEquals","isRequested","popPrevious","stackEquals","every","stacksEqual","Game","c","splice","_onClick","isHoldingKing","isFromCurrentSource","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","Navigator","rows","getZindex","elem","targets","update","row","j","finishNav","valid","direction","undefined","toggleRow","clickable","pickLast","last","Settings","suggestionModes","get","getHintMode","allSuggestionModes","reverse","setCardProperties","recyclings","isOnTop","result","_position","moveToWaste","recycleWaste","Suggestions","evaluateOptions","disableAllSuggestions","NONE","getUncoverOptions","getPutdownSuggestions","getPickupOptions","FULL","SCORED","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","onClickhidden","canUncover","getStack","canPutDown","range","getTableauOrder","indexOf","getCard","stackEntropy","entropy","concat","offset","canAdd","suggestor","withSuggestions","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","createContext","BoardProvider","Provider","BoardWrap","setState","render"],"mappings":"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","file":"static/js/5.cc00ab1f.chunk.js","sourcesContent":["import { BoardContext } from \"./BoardWrap\";\nimport GamePad from \"./GamePad\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\n\nconst BoardGamePad = (props) => {\n    const { state } = React.useContext(GlobalContext);\n    const { player } = React.useContext(BoardContext);\n    const isGamePadDriven = state.settings.launchSettings.inputMode == \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === \"singleplayer\";\n    const switchToGamePad = (ctx) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft && props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight && props.onRight(switchToGamePad)}\n            onUp={() => props.onUp && props.onUp(switchToGamePad)}\n            onDown={() => props.onDown && props.onDown(switchToGamePad)}\n            onAction={() => props.onAction && props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel && props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint && props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo && props.onUndo()}\n            onPause={() => props.onPause && props.onPause(switchToGamePad)}\n            onMenu={() => props.onPause && props.onMenu(switchToGamePad)}\n        >\n            <span></span>\n        </GamePad>\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"./KeyboardLayouts\";\n\nimport { BoardContext } from \"./BoardWrap\";\nimport GlobalContext from \"../Context\";\nimport Keyboard from \"./Keyboard\";\nimport React from \"react\";\n\nconst BoardKeyboard = (props) => {\n    const { state } = React.useContext(GlobalContext);\n    const { player } = React.useContext(BoardContext);\n    const isKeyboardDriven = state.settings.launchSettings.inputMode === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === \"singleplayer\";\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft && props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight && props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp && props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown && props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction && props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel && props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint && props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo && props.onUndo()}\n            onPause={() => props.onPause && props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu && props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import { BoardContext } from \"./BoardWrap\";\nimport BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = React.useContext(GlobalContext);\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const isPaused = !!paused.state.paused;\n\n    const onLeft = (modifier) =>\n        updateContext((ctx) => {\n            modifier(ctx);\n            ctx.navigator.moveLeft(before);\n        });\n\n    const onRight = (modifier) =>\n        updateContext((ctx) => {\n            modifier(ctx);\n            ctx.navigator.moveRight(before);\n        });\n\n    const onUp = (modifier) =>\n        updateContext((ctx) => {\n            modifier(ctx);\n            ctx.navigator.moveUp(before);\n        });\n\n    const onDown = (modifier) =>\n        updateContext((ctx) => {\n            modifier(ctx);\n            ctx.navigator.moveDown(before);\n        });\n\n    const onAction = (modifier) =>\n        updateGameContext((ctx) => {\n            modifier(ctx);\n            state.navigator.pressCurrent()(ctx);\n        });\n\n    const onCancel = (modifier) =>\n        updateContext((ctx) => {\n            modifier(ctx);\n            ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n        });\n\n    const onPause = () => paused.togglePause(isPaused, player);\n\n    const isVisible = (state) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state) => state.settings.suggestionMode.isTemporary;\n\n    const onHint = (modifier) => {\n        updateContext((state) => {\n            modifier(state);\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n    };\n\n    const onUndo = () => {\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n    };\n    const onMenu = (modifier) => {\n        updateContext((state) => {\n            modifier(state);\n        });\n        paused.togglePause(isPaused, player);\n    };\n\n    return isPaused ? null : (\n        <>\n            <BoardKeyboard\n                onLeft={onLeft}\n                onRight={onRight}\n                onUp={onUp}\n                onDown={onDown}\n                onAction={onAction}\n                onCancel={onCancel}\n                onHint={onHint}\n                onUndo={onUndo}\n                onPause={onPause}\n                onMenu={onMenu}\n            />\n            <BoardGamePad\n                onLeft={onLeft}\n                onRight={onRight}\n                onUp={onUp}\n                onDown={onDown}\n                onAction={onAction}\n                onCancel={onCancel}\n                onHint={onHint}\n                onUndo={onUndo}\n                onPause={onPause}\n                onMenu={onMenu}\n            />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import GlobalContext from \"../Context\";\nimport React from \"react\";\n\nconst Dealer = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    const timeouts = [];\n\n    if (state.settings.launchSettings.quickDeal) {\n        if (state && state.dealer && !state.dealer.isDealt) {\n            replaceContext(state.dealer.dealAll(state));\n        }\n    } else {\n        const deal = (dealt) => {\n            timeouts.push(\n                setTimeout(() => {\n                    if (state && state.dealer && !state.dealer.isDealt) {\n                        replaceContext(state.dealer.dealOne(dealt, deal));\n                    }\n                }, 35)\n            );\n        };\n\n        React.useEffect(() => {\n            deal(state.dealer.dealt);\n            return () =>\n                timeouts.forEach((timeout) => {\n                    clearTimeout(timeout);\n                });\n        }, []);\n        React.useEffect(() => {}, [state.dealer.isDealt]);\n    }\n    return null;\n};\nexport default Dealer;\n","import { Component } from \"react\";\nimport GlobalContext from \"../Context\";\n\nexport default class BlinkingComponent extends Component {\n    constructor(selector) {\n        super();\n        this.timeout = null;\n        this.selector = selector;\n    }\n\n    static contextType = GlobalContext;\n\n    componentDidUpdate() {\n        if (this.selector(this.context.state).blinkFor) {\n            this.timeout = setTimeout(\n                () =>\n                    this.context.updateGameContext((state) => {\n                        this.selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timeout);\n    }\n}\n","import GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\n\nconst Card = (props) => {\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    const inputEl = React.useRef(null);\n    const isFocused = state.focus.hasCard(props.model);\n    React.useEffect(() => {\n        if (isFocused && state.settings.launchSettings.boardMode == \"singleplayer\") {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n    }, [isFocused, state.focus.card]);\n    const onClick = (e) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        let ele = e.target;\n\n        while (ele && !ele.className.includes(\"card-base\")) {\n            ele = ele.offsetParent;\n        }\n\n        const rect = ele.getBoundingClientRect();\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - ele.ownerDocument.defaultView.pageXOffset,\n                y: e.clientY - ele.ownerDocument.defaultView.pageYOffset,\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n        const isSinglePlayer = state.settings.launchSettings.boardMode === \"singleplayer\";\n        //@todo A11Y allow keyboard actions in singleplayer\n        if (props.model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                props.model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.inputMode = \"mouse\";\n                }\n            });\n        }\n    };\n\n    const getClassName = () => {\n        const hasSuggestion = props.isSuggested || props.model.suggestion;\n        let className = `card card-base suit-${props.model.type.icon}`;\n        className += !props.isSelected && !isFocused && !hasSuggestion ? ` card-stack-${props.model.source}` : \"\";\n        className += props.isSelected ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += props.model.canClick() ? \" clickable\" : \"\";\n        //@todo onhover, trigger highlight of suggested target card/stack (preview what happens if picked up)\n        className += hasSuggestion && !isFocused ? \" card-suggested\" : \"\";\n        className += isFocused ? \" card-focused\" : \"\";\n        return className;\n    };\n\n    const getCardStyle = () => {\n        const style = {\n            zIndex: (props.zIndex ? props.zIndex : !!props.offsetTop * 20) + 1,\n            top: props.offsetTop ? props.offsetTop / 15 + \"em\" : 0,\n            ...props.model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft * 2 + \"em\";\n        }\n\n        if (!props.model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    };\n\n    const getStackbaseStyle = () => {\n        if (!props.model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    };\n\n    const names = [0, 1, 2, 3, 4, 5, 6].map((id) => \" stack \" + (id + 1));\n    let label = \"\";\n    const split = props.model.source.split(\"-\");\n    label += split[0];\n    if (split.length > 1) {\n        label += names[split[1]];\n    }\n    label += \": \";\n\n    label += props.model.isHidden ? \"hidden card\" : props.model.type.icon + props.model.face;\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n\n    return (\n        <div style={getStackbaseStyle()} className=\"stack-base\">\n            <button\n                onFocus={() => {\n                    // updateContext((ctx) => {\n                    //     ctx.navigator.update(props.model.source, props.model);\n                    // });\n                }}\n                onBlur={() => {\n                    //updateContext((ctx) => ctx.focus.unsetCard(props.model));\n                }}\n                style={getCardStyle()}\n                ref={inputEl}\n                className={getClassName()}\n                onClick={onClick ? onClick : null}\n                disabled={!props.model.canClick() || pause.state.paused}\n                tabIndex={props.model.canClick() ? 0 : -1}\n                aria-label={label}\n                title={label}\n            >\n                <div className=\"card-content\">\n                    {props.model.isHidden || pause.state.paused ? (\n                        <div className=\"card-back\">&nbsp;</div>\n                    ) : (\n                        <div className=\"card-grid-container\">\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-left\">{props.model.face}</div>\n                            </div>\n                            <div>&nbsp;</div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div className=\"mainface\">\n                                <div className=\"align-center\">{props.model.face}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div>&nbsp;</div>\n                            <div>\n                                <div className=\"align-right\">{props.model.face}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </button>\n        </div>\n    );\n};\n\nexport default Card;\n","import GlobalContext from \"../Context\";\nimport React from \"react\";\nimport Card from \"./Card\";\n\nconst Hand = (props) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state.hand || props.parentModel.source !== state.hand.source) {\n        return null;\n    }\n\n    return (\n        <>\n            {[\n                state.hand &&\n                    state.hand.stack &&\n                    state.hand.stack.map((card, index) => (\n                        <Card\n                            key={index}\n                            model={card}\n                            offsetTop={props.offsetTop + index * 24}\n                            offsetLeft={props.offsetLeft}\n                            zIndex={1000 + index * 20}\n                            isSelected={true}\n                            onClick={(_c, p) => props.onClick(p)}\n                        />\n                    )),\n            ]}\n        </>\n    );\n};\n\nexport default Hand;\n","import GlobalContext from \"../Context\";\nimport React from \"react\";\n\nconst StackBase = (props) => {\n    let classname = \"card-base socket\";\n    const inputEl = React.useRef(null);\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    React.useEffect(() => {\n        if (state.focus.hasStack(props.model.parent) && state.settings.launchSettings.boardMode == \"singleplayer\") {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n    });\n    if (!props.model.stack.length) {\n        if (props.model.blinkFor) {\n            classname += \" socket-blink\";\n        } else if (state.focus.hasStack(props.model.source)) {\n            classname += \" socket-focused\";\n        } else {\n            classname += \" socket-empty\";\n        }\n    } else {\n        classname += \" socket-full\";\n    }\n\n    if (props.model.suggestion && !props.model.stack.length) {\n        classname += \" socket-suggested\";\n    }\n\n    const onClick = (e) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    const names = [0, 1, 2, 3, 4, 5, 6].map((id) => \" stack \" + (id + 1));\n    let label = \"\";\n    const split = props.model.source.split(\"-\");\n    label += split[0];\n    if (split.length > 1) {\n        label += names[split[1]]\n    }\n    label += \": empty socket\"\n\n    return (\n        <button\n            onFocus={() => {\n                // updateContext((ctx) => {\n                //     ctx.navigator.update(props.model.parent);\n                // });\n            }}\n            onBlur={() => {\n                // updateContext((ctx) => ctx.focus.unsetStack(props.model.parent));\n            }}\n            ref={inputEl}\n            className={classname}\n            onClick={onClick}\n            disabled={props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n            aria-label={label}\n            title={label}\n\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import BlinkingComponent from \"./BlinkingComponent\";\nimport Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport Hand from \"./Hand\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\n\nexport default class Foundation extends BlinkingComponent {\n    constructor(props) {\n        super((s) => s.foundation.stacks[props.index]);\n    }\n\n    static Stacks = () => {\n        const { state } = React.useContext(GlobalContext);\n        return (\n            <>\n                {state.foundation.stacks.map((foundation, index) => (\n                    <Foundation key={index} model={foundation} index={index} />\n                ))}\n            </>\n        );\n    };\n\n    render() {\n        const model = this.props.model;\n        return (\n            <div className=\"board-field\" key={this.props.index}>\n                <StackBase model={model}>\n                    <div className={\"align-center foundation-base suit-\" + model.icon}>{model.icon}</div>\n                </StackBase>\n                {model.stack.map((card, index) => (\n                    <Card\n                        key={index}\n                        model={card}\n                        blink={model.blinkFor}\n                        isSuggested={model.suggestion && model.stack.length - 1 == index}\n                    />\n                ))}\n                <Hand\n                    parentModel={model}\n                    //onClick={(c, p) => onClick(model.stack[model.stack.length - 1], p, this.props.index)}\n                    stack={model.stack}\n                />\n            </div>\n        );\n    }\n}\n","import PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst Clock = () => {\n    const { state, getElapsed } = React.useContext(PauseContext);\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (state.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [state.started, state.paused]);\n\n    return !state.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Hearts = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode == \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst Hint = () => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Points = () => {\n    const { state } = React.useContext(GlobalContext);\n\n    return (\n        <>\n            <div className=\"icon-container\">🏆</div> {state?.game.rating.points}\n        </>\n    );\n};\n\nexport default Points;\n","import { BoardContext } from \"../../Game/BoardWrap\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst ToggleMenu = () => {\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n\n    return (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Undo = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"../../Style/Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import \"../Style/Menu.scss\";\n\nimport { NavigationContext, NavigationProvider, NavigationState } from \"./StartScreen/Context\";\nimport { Universal, getKeyboardLayout } from \"../Game/KeyboardLayouts\";\n\nimport { BoardContext } from \"../Game/BoardWrap\";\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GlobalContext from \"../Context\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\n\nconst _Menu = () => {\n    const [navigation, setNavigation] = React.useState<NavigationState>({\n        menu: {\n            x: 0,\n            y: 0,\n        },\n        screen: {\n            x: 0,\n            y: 0,\n        },\n        focus: \"menu\",\n        mainMenu: \"\",\n        screeen: \"\",\n    });\n    const navigationContext = {\n        navigation,\n        setNavigation,\n    };\n    return (\n        <NavigationProvider value={navigationContext}>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = React.useContext(NavigationContext);\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n    if (!state) {\n        return null;\n    }\n    const onfocus = (pos: XY) => {\n        setNavigation({ ...navigation, menu: pos });\n    };\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining == 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining == 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) [(announcement = \"The game is not paused.\")];\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === \"singleplayer\";\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle label=\"😴\" />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle label=\"😴\" />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon=\"▶️\"\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                            onFocus={onfocus}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                            onFocus={onfocus}\n                        />\n                        <MenuButton\n                            icon=\"🌪️\"\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            onFocus={onfocus}\n                            toggled={navigation.mainMenu == \"entropy\"}\n                        >\n                            <MenuButton\n                                icon=\"🌪️\"\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                                onFocus={onfocus}\n                            />\n                            <MenuButton\n                                icon=\"🌬️\"\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                                onFocus={onfocus}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon=\"♻️\"\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            onFocus={onfocus}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon=\"🗑️\" title=\"Quit Game\" onClick={() => restart()} onFocus={onfocus} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import BlinkingComponent from \"./BlinkingComponent\";\nimport Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\n\nconst usePrevious = (value) => {\n    const ref = React.useRef();\n    React.useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\n\nconst Renderer = (props) => {\n    const { state } = React.useContext(PauseContext);\n    const { paused, started } = state;\n    return <InnerRenderer length={props.length} paused={paused} started={started} />;\n};\n\nconst InnerRenderer = (props) => {\n    const context = React.useContext(GlobalContext);\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout = null;\n        if (context.state.settings.launchSettings.speed && previous && started && !paused && (previous.length != length || previous.started != started || previous.paused != paused)) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (length == state.stock.stack.length && state.stock.passes > 0 && (state.stock.stack.length || state.waste.stack.length)) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => clearTimeout(timeout);\n    }, [length, paused, started]);\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            {context.state.stock.stack.map((card, index) => (\n                <Card\n                    key={index}\n                    model={card}\n                    offsetTop={(index / 2) * -1}\n                    zIndex={index}\n                    blink={context.state.stock.blinkFor}\n                    isSuggested={context.state.stock.suggestion && index == context.state.stock.stack.length - 1}\n                />\n            ))}\n        </div>\n    );\n};\n//Can't use multiple contexts in one React class, need two renderer functions to feed two contexts into props for reliable detection of changes\nexport default class Stock extends BlinkingComponent {\n    constructor() {\n        super((s) => s.stock);\n    }\n\n    render() {\n        return <Renderer length={this.context.state.stock.stack.length} />;\n    }\n}\n","import BlinkingComponent from \"./BlinkingComponent\";\nimport Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport Hand from \"./Hand\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\n\nexport default class Tableau extends BlinkingComponent {\n    constructor(props) {\n        super((s) => s.tableau.stacks[props.index]);\n    }\n\n    static Stacks = () => {\n        const { state } = React.useContext(GlobalContext);\n        return (\n            <>\n                {state.tableau.stacks.map((tableau, index) => (\n                    <Tableau key={index} index={index} model={tableau} parent={state.tableau} />\n                ))}\n            </>\n        );\n    };\n\n    render() {\n        const props = this.props;\n        let offset = 1;\n        const getOffset = (index) => {\n            for (let i = 0; i <= index; i++) {\n                if (props.model.stack[i] && !props.model.stack[i].isHidden) {\n                    offset = i * 12 + (index - i) * 24;\n                    return offset;\n                }\n            }\n            offset = index * 12;\n            return offset;\n        };\n\n        return (\n            <div className=\"board-field\">\n                <StackBase model={props.model} />\n                {props.model.stack.map((card, index) => (\n                    <Card\n                        key={index}\n                        model={card}\n                        blink={props.model.blinkFor}\n                        isSuggested={props.model.suggestion && props.model.stack.length - 1 == index}\n                        offsetTop={getOffset(index)}\n                    />\n                ))}\n                <Hand parentModel={props.model} stack={props.model.stack} offsetTop={getOffset(props.model.stack.length)} />\n            </div>\n        );\n    }\n}\n","import BlinkingComponent from \"./BlinkingComponent\";\nimport Card from \"./Card\";\nimport Hand from \"./Hand\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\n\nexport default class Waste extends BlinkingComponent {\n    constructor() {\n        super((s) => s.waste);\n    }\n\n    render() {\n        const { state } = this.context;\n        const getOffset = (index) => {\n            if (state.settings.launchSettings.drawMode == \"single\") {\n                return 0;\n            }\n            const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n            let additionalOffset = 2;\n            if (length == 2) {\n                additionalOffset = 1;\n            }\n\n            if (length == 1) {\n                additionalOffset = 0;\n            }\n\n            return ((index - length - 2) % 3) + additionalOffset;\n        };\n\n        return (\n            <div className=\"board-field\">\n                <StackBase model={state.waste} />\n                {state.waste.stack.map((card, index) => (\n                    <Card\n                        key={index}\n                        model={card}\n                        offsetTop={(index / 2) * -1}\n                        offsetLeft={getOffset(index)}\n                        blink={state.waste.blinkFor}\n                        isSuggested={state.waste.suggestion && index == state.waste.stack.length - 1}\n                    />\n                ))}\n                <Hand\n                    offsetTop={(state.waste.stack.length / 2) * -1}\n                    offsetLeft={getOffset(state.waste.stack.length)}\n                    parentModel={state.waste}\n                    stack={state.waste.stack}\n                />\n            </div>\n        );\n    }\n}\n","import \"../Style/Board.scss\";\n\nimport BoardNavigator from \"./BoardNavigator\";\nimport Dealer from \"./Dealer\";\nimport Foundation from \"./Foundation\";\nimport Header from \"../UI/Header/Header\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nconst Board = (props: any) => (\n    <>\n        <Menu />\n        <Header mode={props.mode} />\n        <div className={\"board-jail \" + props.mode}>\n            <div className={\"board-grid-container \" + props.mode}>\n                <Stock />\n                <Waste />\n                <div className=\"spacer\">&nbsp;</div>\n                <Foundation.Stacks />\n                <Tableau.Stacks />\n            </div>\n        </div>\n        <Dealer />\n        <BoardNavigator />\n    </>\n);\n\nexport default Board;\n","import \"../Style/Screens.scss\";\n\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\n\nconst EndScreen = () => {\n    const { state, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    //@todo show launch settings (draw mode, recycling mode)\n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover();\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: any) => (state: Model) => {\n        if (dealt != state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n        if (state.dealer.isDealt) {\n            state.game.started = Date.now();\n        }\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt != state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        state.game.started = Date.now();\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                newCard.source = tableau.stacks[i].source;\n                if (stack.length == tableau.stacks.length - 1 - i) {\n                    newCard.isHidden = false;\n                }\n                tableau.deal(newCard, i);\n                this.dealt++;\n                this.dealingAt++;\n                if (this.dealingAt == tableau.stacks.length) {\n                    this.dealingAt = 0;\n                }\n                this.isDealt = false;\n                return;\n            } else {\n                const isFirst = this.dealingAt == 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n    }\n\n    validSettings = () => this.settings.launchSettings.inputMode !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack == stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && this.card && card && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack == stack;\n}\n","export default class BasicStack {\n    constructor(source) {\n        this.source = source;\n    }\n    stack = [];\n    getTop = () => this.stack && this.stack.length && this.stack[this.stack.length - 1];\n    suggestion = false;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n}\n","import BasicStack from \"./BasicStack\";\n\nexport default class HandHoldingStack extends BasicStack {\n    constructor(source, hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source == this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n}\n","import Card from \"../Deck/Card\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Suits from \"../Deck/Suits\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nexport default class Foundation {\n    constructor(settings, hand) {\n        this.settings = settings;\n        this.hand = hand;\n        const template = (index) => {\n            const s = new HandHoldingStack(\"foundation-\" + index, hand);\n            s.stack = [];\n            s.acceptedCards = [...getFoundationOrder()];\n            s.usedCards = [];\n            s.icon = null;\n            s.color = null;\n            s.blinkFor = 0;\n            return s;\n        };\n        const stacks = Object.keys(Suits)\n            .map((key) => Suits[key])\n            .map((suit, index) => ({ ...template(index), ...suit }));\n        this.stacks = [...stacks];\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n    }\n\n    setOnClick = (onClick) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                card.onClick = (p) => onClick({ ...card }, p, index);\n                card.canClick = () => sindex == stack.stack.length - 1;\n            });\n            this.hand.setOnClick(stack);\n        });\n    };\n\n    getCurrentAccepted = (index) => {\n        const currentFoundation = this.stacks[index].acceptedCards;\n        return currentFoundation[currentFoundation.length - 1];\n    };\n\n    wouldAcceptHand = (index) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index) => this.add(index, this.hand.putDown());\n\n    accepts = (index, card) => {\n        const currentAccepted = this.getCurrentAccepted(index);\n        return this.stacks[index].icon == card.type.icon && currentAccepted == card.face;\n    };\n\n    add = (index, cards) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index, card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop();\n    };\n\n    getPreviousUsed = (index) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => parseInt(f.stack.length)).reduce((a, b) => a + b, 0);\n\n    getTop = (index) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig, hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new HandHoldingStack(origStack.source, hand);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src);\n            this.tryDetectEnd(state);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.face) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    //@todo move this to a generic place, also detect failure\n    tryDetectEnd(state: Model) {\n        const nrofCards = state.foundation.countCards();\n        if (nrofCards === 52) {\n            state.game.isEnded = true;\n            state.game.end = Date.now();\n        }\n    }\n}\n","export default class Rating {\n    constructor(settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n    }\n\n    registerMove = (target, source) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode == \"single\" && this.settings.launchSettings.recyclingMode == \"infinite\") {\n            if (this.points > 0) {\n                if (this.points < 100) {\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                }\n            }\n            console.debug(\"RATING: subtract (max) 100 points for RECYCLE\");\n        }\n    };\n\n    registerUncover = () => {\n        this.registerHint(this.settings.disableHint());\n        this.points += 5;\n        console.debug(\"RATING: add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            console.debug(\"RATING: subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            console.debug(`RATING: applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            console.debug(`RATING: applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move) {\n        const isTableau = (obj) => obj.substr(0, 7) == \"tableau\";\n        const isFoundation = (obj) => obj.substr(0, 10) == \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                console.debug(\"RATING: add 10 points for MOVE tableau -> foundation\");\n                return 10;\n            }\n        } else if (move.source == \"waste\") {\n            if (isFoundation(move.target)) {\n                console.debug(\"RATING: add 10 points for MOVE waste -> foundation\");\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                console.debug(\"RATING: add 5 points for MOVE waste -> tableau\");\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                console.debug(\"RATING: subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start, end) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start, end) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start, end) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    }\n\n    static copy = (orig) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\n\nexport default class TimeMachine {\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target, source) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source == target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id, current) => {\n        const isRequested = this.previousStates.length - 1 == id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink() {\n        this.modified = true;\n        this.memorable = false;\n    }\n\n    stackEquals = (a, b) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden == b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a, b) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a, b) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Rating from \"./Rating\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    constructor(settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n        //@todo move to context:\n        this.started = 0;\n        this.isEnded = false;\n        this.end = 0;\n    }\n\n    registerMove = (target, source) => {\n        this.rating.registerMove(target, source);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = () => {\n        this.rating.registerUncover();\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        copy.paused = orig.paused;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    pickUp = (stack: Card[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = stack.map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source == model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.face == \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source == this.source) || null;\n\n    isFromWaste = () => this.source && this.source == \"waste\";\n\n    isFromFoundation = (index: number) => this.source && this.source == `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source == `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) == \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/IStack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: IStack[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source == pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x == -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x == 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        if (this.current() == undefined) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = this.current().getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current().getClickable();\n        if (clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current().getClickable();\n        if (clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y == 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const last = this.current() ? this.current().getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (this.current() == undefined) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current().getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current().source);\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = () => {\n        if (this.model.focus.card && this.model.focus.card.canClick()) {\n            return this.model.focus.card.onClick({ isKeyboard: true });\n        } else if (this.model.focus.stack) {\n            console.debug(\"delegating to clickempty\");\n            return this.current().clickEmpty({ isKeyboard: true });\n        } else {\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./BasicStack\";\nimport Card from \"../Deck/Card\";\n\nexport default class Stock extends BasicStack {\n    constructor(stack, settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        if (this.settings.launchSettings.recyclingMode == \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode == \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick) => {\n        this.clickEmpty = (p) => onClick(null, p);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p) => onClick({ ...card }, p);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n    };\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode == \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode == \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result = [];\n        if (this.settings.launchSettings.drawMode == \"single\") {\n            result = [this.stack.pop()];\n        }\n        if (this.settings.launchSettings.drawMode == \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length == 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig) => {\n        const copy = new Stock([], orig.settings, orig.focus);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.dealt = orig.dealt;\n        copy.dealingAt = orig.dealingAt;\n        copy.isDealt = orig.isDealt;\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(card, state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\");\n    };\n\n    recycleWaste = (_card: Card, state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\")) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key == SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key == SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length == 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length == 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].face ==\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].face &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (this.getPutdownSuggestions(tableauState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nclass TableauStack extends HandHoldingStack implements IStack {\n    //@todo move to IStack, make boolean\n    blinkFor = 0;\n    id = 0;\n    // eslint-disable-next-line no-unused-vars\n    onClick = (a: any) => {};\n    // eslint-disable-next-line no-unused-vars\n    clickEmpty = (a: any) => {};\n    setOnClick = () => {};\n}\nexport default class Tableau {\n    stacks: TableauStack[];\n    settings: Settings;\n    hand: Hand;\n\n    constructor(settings: Settings, hand: Hand) {\n        const ids = [0, 1, 2, 3, 4, 5, 6];\n        this.hand = hand;\n        this.stacks = ids.map((id) => {\n            const s = new TableauStack(\"tableau-\" + id, hand);\n            s.stack = [];\n            s.blinkFor = 0;\n            s.id = id;\n            return s;\n        });\n        this.settings = settings;\n    }\n\n    setOnClick = (onClick: (a: any, b: any, index: number) => void, onClickhidden: (a: any, b: any, index: number) => void, hand: Hand) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p: any) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                const click = card.isHidden && sindex == stack.stack.length - 1 ? onClickhidden : onClick;\n                card.onClick = (p: any) => click({ ...card }, p, index);\n                card.canClick = () => !card.isHidden || this.canUncover(index, card);\n            });\n            hand.setOnClick(stack);\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        const top = this.getTop(index);\n        if (!top) {\n            return current && current.face === \"K\";\n        }\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = range.indexOf(current?.face);\n        const topIndex = range.indexOf(top.face);\n        return currentIndex + 1 == topIndex && current?.type.color !== top.type.color && top.face !== \"A\";\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        return top.isHidden && card && card.equals(this.getTop(index));\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy != 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, cards: Card[]) => {\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number) => {\n        card.source = this.stacks[index].source;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1 - (offset || 0)];\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map((stack, index) => {\n            const s = new TableauStack(stack.source, hand);\n            s.id = index;\n            s.stack = Card.copyAll(stack.stack);\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport HandHoldingStack from \"./HandHoldingStack\";\n\nexport default class Waste extends HandHoldingStack {\n    constructor(settings, hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n    }\n\n    setOnClick = (onClick) => {\n        this.clickEmpty = (p) => onClick(null, p);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p) => onClick({ ...card }, p);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    canAdd = (card) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card) => card && card.equals(this.getTop()) && this.stack.pop();\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig, hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n    }\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()), this.hand);\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings),\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n        });\n    };\n}\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../Context\";\nimport React from \"react\";\n\nexport const BoardContext = React.createContext({\n    player: 0,\n});\n\nconst BoardProvider = BoardContext.Provider;\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                return state;\n            }\n\n            return null;\n        });\n\n        //on every render, we refresh the click handlers in the model and the suggestions\n        //this is heavy - could it be done in updateGameContext? (and undo, and initial, and restart, and pause/unpause, well)\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider\n                    value={{\n                        player: this.props.player,\n                    }}\n                >\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n"],"sourceRoot":""}