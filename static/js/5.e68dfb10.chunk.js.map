{"version":3,"sources":["View/Game/Navigation/BoardGamePad.tsx","View/Game/Navigation/BoardKeyboard.tsx","View/Game/Navigation/BoardNavigator.tsx","View/Game/Dealer.tsx","View/Game/Firework.tsx","View/Game/CardFirework.tsx","View/Game/StackDescription.ts","View/Game/Card.tsx","View/Game/StackBase.tsx","View/Game/useBlinkEffect.ts","View/Game/Foundation.tsx","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/BasicStack.ts","Model/Game/HandHoldingStack.ts","Model/Game/FoundationStack.tsx","Model/Game/MultiStack.ts","Model/Game/Foundation.ts","Model/Business/Foundation.ts","Model/Game/Rating.ts","Model/Game/TimeMachine.ts","Model/Game/Game.ts","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.ts","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/TableauStack.tsx","Model/Game/Tableau.ts","Model/Game/Waste.ts","Model/Model.ts","View/Game/Judge.tsx","View/UI/Menu.tsx","View/Game/usePrevious.ts","View/Game/Stock.tsx","View/Game/Tableau.tsx","View/Game/Waste.tsx","View/Game/Board.tsx","View/UI/EndScreen.js","View/Game/BoardWrap.tsx"],"names":["BoardGamePad","props","state","React","useContext","GlobalContext","player","BoardContext","isGamePadDriven","settings","launchSettings","inputMode","isSinglePlayer","boardMode","GameModes","SINGLEPLAYER","switchToGamePad","ctx","focus","isKeyBoard","GamePad","gamepadIndex","players","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","layout","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","BoardNavigator","updateContext","updateGameContext","replaceContext","paused","PauseContext","before","x","navigator","currentIndex","y","z","beforeFocused","card","stack","isPaused","handlers","modifier","moveLeft","moveRight","moveUp","moveDown","handler","pressCurrent","finishNav","hand","length","onClick","isKeyboard","togglePause","suggestionMode","supportsHints","isTemporary","isVisible","isDisabled","enableHint","_state","previous","game","timemachine","popPreviousState","previousStates","rating","penalize","Dealer","timeouts","quickDeal","dealer","isDealt","dealAll","deal","dealt","push","setTimeout","dealOne","useEffect","forEach","timeout","clearTimeout","Firework","canvasRef","createRef","current","count","intensity","defaults","ticks","origin","particleCount","startVelocity","decay","spread","localConfetti","confetti","create","resize","fire","particleRatio","opts","Object","assign","Math","floor","scalar","ref","CardFirework","useState","setFire","model","success","clearSuccess","token","getStackLabel","source","names","map","id","label","split","parseInt","Card","ReRender","models","slice","index","offsetLeft","isSelected","isDrag","displayName","pause","inputEl","useRef","isFocused","hasCard","setDrag","_isDrag","useDrag","item","type","render","collect","monitor","opacity","isDragging","canDrag","canClick","isHidden","currentCard","equals","begin","context","end","_item","didDrop","dragRef","preview","getEmptyImage","captureDraggingState","icon","face","style","pointerEvents","className","onFocus","onBlur","zIndex","offsetTop","top","entropyStyle","left","getCardStyle","hasSuggestion","isSuggested","suggestion","blink","accepting","getClassName","e","preventDefault","clientX","clientY","ele","target","includes","offsetParent","rect","getBoundingClientRect","position","click","ownerDocument","defaultView","pageXOffset","pageYOffset","element","disabled","tabIndex","aria-label","title","StackBase","classname","hasStack","blinkFor","clickEmpty","children","useBlinkEffect","selector","unblink","FoundationStacks","foundation","stacks","Foundation","useDrop","accept","canDrop","accepts","drop","cards","Clock","getElapsed","elapsed","setElapsed","interval","setInterval","started","clearInterval","Hearts","recyclingMode","stock","passes","createString","Array","from","keys","join","getHearts","Hint","Points","points","ToggleMenu","Undo","pow","multiplicator","Header","mode","Blinker","startBlink","registerBlink","s","stopBlink","Tableau","tableau","dispatchPutDown","wouldAcceptHand","src","putDownHand","registerMove","getTop","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","isHoldingCard","uncover","registerUncover","dealingAt","callback","Date","now","i","newCard","popOne","isFirst","this","Dispatcher","clickHandler","getHandler","Focus","keyboard","validSettings","setCard","unsetCard","unsetStack","setStack","BasicStack","getClickable","filter","a","HandHoldingStack","getHandContent","FoundationStack","suit","acceptedCards","usedCards","color","getCurrentAccepted","currentAccepted","setOnClick","p","sindex","getFoundationOrder","MultiStack","Suits","key","c","hasMoreThanOneCard","add","putDown","causeEntropy","min","interactionEntropy","pop","remove","getPreviousUsed","countCards","f","reduce","b","setEntropy","lvl","copy","orig","origStack","copyAll","tryDetectEnd","_card","isEnded","Rating","ratings","hasNotifications","r","notified","getNextNotification","setNotified","n","applyRating","text","console","debug","registerHint","disableHint","currentMove","rateMove","registerRecycle","drawMode","diff","setSuccess","other","undoPenalty","penalty","done","hintPenalty","getTimePenalty","start","secondsToFinish","trunc","getBonusPoints","round","getTotal","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","memorable","modified","pushPreviousState","modelEquals","isRequested","popPrevious","stackEquals","every","stacksEqual","waste","Game","Hand","splice","_onClick","isHoldingKing","isFromCurrentSource","isFromWaste","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","Navigator","rows","getZindex","elem","targets","update","pos","row","j","valid","direction","undefined","clickable","toggleRow","pickLast","last","Settings","baseEntropy","suggestionModes","setSuggestionMode","sm","SuggestionModes","get","getHintMode","next","allSuggestionModes","Stock","recyclings","recycle","reverse","setCardProperties","isOnTop","popTop","result","_position","moveToWaste","recycleWaste","addAll","canRecycle","Waste","Suggestions","evaluateOptions","disableAllSuggestions","NONE","getUncoverOptions","getPutdownSuggestions","getPickupOptions","FULL","SCORED","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","range","getTableauOrder","indexOf","offset","canUncover","onClickhidden","getStack","canPutDown","getCard","stackEntropy","entropy","concat","canAdd","suggestor","setToken","withSuggestions","_hasSuggestion","some","hasSuggestions","canAutoSolve","clear","_c","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","AutoSolve","solving","setSolving","canAutosolve","Solver","suggestedFoundations","suggestedFoundation","suggestedTableaus","suggestedCards","suggestedCard","useEvaluation","falseResults","setFalseResults","Evaluator","full","resetFull","REGULAR","regular","resetRegular","noRegularSince","setNoRegularSince","noFullSince","setNoFullSince","log","toast","error","closeToast","alert","autoClose","closeButton","Judge","Menu","restart","NavigationContext","navigation","setNavigation","switchToMenu","menu","screeen","mainMenu","showMenu","remaining","allowed","pauses","announcement","keyboardLayout","pausedBy","MenuTitle","MenuTree","MenuButton","val","toggleMainMenu","toggled","EntropyLevels","skip","_Menu","screen","navigationContext","value","usePrevious","Renderer","speed","TableauStacks","parent","setAccepting","getOffset","_drop","additionalOffset","Preview","usePreview","display","_itemType","reff","width","Board","closeOnClick","newestOnTop","limit","pauseOnFocusLoss","draggable","transition","Slide","EndScreen","createContext","BoardProvider","Provider","BoardWrap","setState","random","Component"],"mappings":"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","file":"static/js/5.e68dfb10.chunk.js","sourcesContent":["import { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GamePad from \"../../../common/GamePad\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardGamePad = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isGamePadDriven = state.settings.launchSettings.inputMode == \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n\n    const switchToGamePad = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight(switchToGamePad)}\n            onUp={() => props.onUp(switchToGamePad)}\n            onDown={() => props.onDown(switchToGamePad)}\n            onAction={() => props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToGamePad)}\n            onMenu={() => props.onMenu(switchToGamePad)}\n        />\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"../../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GlobalContext from \"../../Context\";\nimport Keyboard from \"../../../common/Keyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardKeyboard = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isKeyboardDriven = state.settings.launchSettings.inputMode === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import { BoardContext } from \"../BoardWrap\";\nimport BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\ntype _mod = (state: Model) => void;\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const beforeFocused = { card: state.focus.card, stack: state.focus.stack };\n    const isPaused = !!paused.state.paused;\n\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const handlers = {\n        onLeft: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveLeft(before);\n            }),\n\n        onRight: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveRight(before);\n            }),\n\n        onUp: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveUp(before);\n            }),\n\n        onDown: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveDown(before);\n            }),\n\n        onAction: (modifier: _mod) =>\n            updateGameContext((ctx) => {\n                modifier(ctx);\n                const handler = state?.navigator?.pressCurrent(beforeFocused);\n                handler && handler(ctx);\n                ctx.navigator.finishNav();\n            }),\n\n        onCancel: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n            }),\n\n        onPause: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n\n        onHint: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n                if (isVisible(state) && !isDisabled(state)) {\n                    state.settings.enableHint();\n                }\n            });\n        },\n\n        onUndo: () => {\n            //@todo use gamestate token to avoid double processing\n            replaceContext((_state) => {\n                const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n                if (previous) {\n                    previous.game.rating.penalize(_state.game.rating);\n                    return previous;\n                }\n                return null;\n            });\n        },\n        onMenu: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n    };\n\n    return isPaused ? null : (\n        <>\n            <BoardKeyboard {...handlers} />\n            <BoardGamePad {...handlers} />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import GlobalContext from \"../Context\";\nimport React from \"react\";\n\nconst Dealer = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const timeouts: any[] = [];\n\n    if (state.settings.launchSettings.quickDeal) {\n        if (state && state.dealer && !state.dealer.isDealt) {\n            replaceContext(state.dealer.dealAll());\n        }\n    } else {\n        const deal = (dealt: number) => {\n            timeouts.push(\n                setTimeout(() => {\n                    if (state && state.dealer && !state.dealer.isDealt) {\n                        replaceContext(state.dealer.dealOne(dealt, deal));\n                    }\n                }, 35)\n            );\n        };\n\n        React.useEffect(() => {\n            deal(state.dealer.dealt);\n            return () =>\n                timeouts.forEach((timeout) => {\n                    clearTimeout(timeout);\n                });\n        }, []);\n    }\n    return null;\n};\nexport default Dealer;\n","import React from \"react\";\nimport confetti from \"canvas-confetti\";\n\nconst Firework = (props: { intensity: number }) => {\n    const canvasRef = React.createRef<HTMLCanvasElement>();\n    React.useEffect(() => {\n        if (canvasRef && canvasRef.current) {\n            const count = 15 * props.intensity;\n            const origin = {\n                x: 0.5,\n                y: 0.33,\n            };\n            const defaults = {\n                ticks: 50,\n                origin,\n                particleCount: 40,\n                startVelocity: 20,\n                decay: 0.8,\n                spread: 360,\n            };\n            const localConfetti = confetti.create(canvasRef.current, { resize: true });\n\n            const fire = (particleRatio: any, opts: any) => {\n                localConfetti(\n                    Object.assign({}, defaults, opts, {\n                        particleCount: Math.floor(count * particleRatio),\n                    })\n                );\n            };\n\n            fire(0.25, {\n                startVelocity: 55,\n            });\n            fire(0.2, {});\n            fire(0.35, {\n                decay: 0.91,\n                scalar: 0.8,\n            });\n            fire(0.1, {\n                startVelocity: 25,\n                decay: 0.92,\n                scalar: 1.2,\n            });\n            fire(0.1, {\n                startVelocity: 45,\n            });\n            fire(0.1, {\n                startVelocity: 45,\n            });\n        }\n    }, [canvasRef]);\n\n    return <canvas ref={canvasRef}></canvas>;\n};\n\nexport default Firework;\n","import CardModel from \"../../Model/Deck/Card\";\nimport Firework from \"./Firework\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\n\nconst CardFirework = (props: { model: CardModel }) => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    const [fire, setFire] = React.useState<boolean>(false);\n    if (!state) return null;\n\n    React.useEffect(() => {\n        if (props.model.success) {\n            setFire(true);\n            const timeout = setTimeout(() => updateContext((ctx) => ctx.clearSuccess(props.model)), 25);\n            return () => clearTimeout(timeout);\n        }\n    }, [state?.token, props.model.success]);\n    return <>{fire && <Firework intensity={props.model.success} />}</>;\n};\n\nexport default CardFirework;\n","const getStackLabel = (source: string) => {\n    const names = [0, 1, 2, 3, 4, 5, 6].map((id) => \" stack \" + (id + 1));\n    let label = \"\";\n    const split = source.split(\"-\");\n    label += split[0];\n    if (split.length > 1) {\n        label += names[parseInt(split[1])];\n    }\n    return label;\n};\n\nexport default getStackLabel;\n","import CardFirework from \"./CardFirework\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport getStackLabel from \"./StackDescription\";\nimport { useDrag } from \"react-dnd\";\n\ntype CardProps = {\n    index: number;\n    accepting?: boolean;\n    models: CardModel[];\n    isSuggested?: (index: number) => boolean | undefined;\n    isSelected?: (index: number) => boolean;\n    blink?: number;\n    zIndex?: number;\n    offsetTop?: (index: number, models: CardModel[]) => number;\n    offsetLeft?: (index: number) => number;\n    isDrag?: boolean;\n};\n\nconst Card = (props: CardProps) => {\n    const ReRender = () => (\n        <Card\n            {...{\n                ...props,\n                models: props.models.slice(props.index, props.models.length),\n                offsetLeft: () => 0,\n                isSelected: () => false,\n                index: 0,\n                isDrag: isDrag,\n            }}\n        />\n    );\n    if (!props.models.length) {\n        return null;\n    }\n    const model = props.models[props.index];\n    ReRender.displayName = \"ReRender\";\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const pause = React.useContext(PauseContext);\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const isFocused = state.focus.hasCard(model);\n    const [isDrag, setDrag] = React.useState<boolean>(!!props.isDrag);\n    const _isDrag = props.isDrag || isDrag;\n    const [{ opacity }, dragRef, preview] = useDrag({\n        item: { type: \"card\", model: model, render: ReRender() },\n        collect: (monitor) => {\n            return { opacity: monitor.isDragging() ? 1 : 1 };\n        },\n        canDrag: () => model.canClick() && !model.isHidden && (state.hand.currentCard() == null || model.equals(state.hand.currentCard())),\n        begin: () => {\n            setDrag(true);\n            //@todo if other card is still selected, drop it first.\n            if (model.onClick && (!props.isSelected || !props.isSelected(props.index))) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n        end: (_item, monitor) => {\n            setDrag(false);\n            if (!monitor.didDrop()) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n    });\n\n    //Deactivate native dnd preview - it's fast but it's not working on mobile.\n    React.useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, []);\n\n    const getRef = () => (model.canClick() ? dragRef : inputEl);\n    React.useEffect(() => {\n        if (isFocused && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n    }, [isFocused, state.focus.card]);\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        let ele = e.target;\n\n        while (ele && !ele.className.includes(\"card-base\")) {\n            ele = ele.offsetParent;\n        }\n\n        const rect = ele.getBoundingClientRect();\n\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - (ele?.ownerDocument?.defaultView?.pageXOffset || 0),\n                y: e.clientY - (ele?.ownerDocument?.defaultView?.pageYOffset || 0),\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n\n        const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n        //@todo A11Y allow keyboard actions in singleplayer\n        if (model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.inputMode = \"mouse\";\n                }\n            });\n        }\n    };\n\n    const getClassName = () => {\n        const hasSuggestion = (props.isSuggested && props.isSuggested(props.index)) || model.suggestion;\n        let className = `card card-base suit-${model.type.icon}`;\n        className +=\n            (!props.isSelected || !props.isSelected(props.index)) && !isFocused && !hasSuggestion ? ` card-stack-${model.source}` : \"\";\n        className += !_isDrag && props.isSelected && props.isSelected(props.index) && !_isDrag ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += model.canClick() ? \" clickable\" : \"\";\n        className += hasSuggestion && !isFocused ? \" card-suggested\" : \"\";\n        className += isFocused ? \" card-focused\" : \"\";\n        className += props.accepting ? \" card-accepts\" : \"\";\n        return className;\n    };\n\n    const getCardStyle = () => {\n        const style = {\n            opacity: _isDrag ? 0 : opacity,\n            zIndex: (props.zIndex ? props.zIndex : (props.offsetTop && props.offsetTop(props.index, props.models) > 0 ? 1 : 0) * 20) + 1,\n            top: props.offsetTop ? props.offsetTop(props.index, props.models) / 15 + \"em\" : 0,\n            ...model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft(props.index) * 2 + \"em\";\n        }\n\n        if (!model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    };\n\n    const getStackbaseStyle: () => React.CSSProperties = () => {\n        if (!model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    };\n\n    let label = getStackLabel(model.source);\n    label += \": \";\n\n    label += model.isHidden ? \"hidden card\" : model.type.icon + model.face;\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n\n    return (\n        <>\n            <div style={getStackbaseStyle()} className=\"stack-base\">\n                <button\n                    onFocus={() => {\n                        // updateContext((ctx) => {\n                        //     ctx.navigator.update(model.source, props.model);\n                        // });\n                    }}\n                    onBlur={() => {\n                        //updateContext((ctx) => ctx.focus.unsetCard(props.model));\n                    }}\n                    style={getCardStyle()}\n                    // ref={inputEl}\n                    ref={getRef()}\n                    className={getClassName()}\n                    onClick={onClick}\n                    disabled={!model.canClick() || pause.state.paused}\n                    tabIndex={model.canClick() ? 0 : -1}\n                    aria-label={label}\n                    title={label}\n                >\n                    <CardFirework model={model} />\n                    <div className=\"card-content\">\n                        {model.isHidden || pause.state.paused ? (\n                            <div className=\"card-back\">&nbsp;</div>\n                        ) : (\n                            <div className=\"card-grid-container\">\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-left\">{model.face}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div className=\"mainface\">\n                                    <div className=\"align-center\">{model.face} </div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-right\">{model.face}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </button>\n            </div>\n            {props.models.length - 1 > props.index && <Card {...props} isDrag={_isDrag} index={props.index + 1} />}\n        </>\n    );\n};\n\nexport default Card;\n","import GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\n\nconst StackBase = (props: { model: IStack; children?: any | null }) => {\n    let classname = \"card-base socket\";\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    React.useEffect(() => {\n        if (state.focus.hasStack(props.model.source) && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            const current = inputEl && inputEl.current ? inputEl.current : null;\n            current && current.focus();\n        }\n    });\n    if (!props.model.stack.length) {\n        if (props.model.blinkFor) {\n            classname += \" socket-blink\";\n        } else if (state.focus.hasStack(props.model.source)) {\n            classname += \" socket-focused\";\n        } else {\n            classname += \" socket-empty\";\n        }\n    } else {\n        classname += \" socket-full\";\n    }\n\n    if (props.model.suggestion && !props.model.stack.length) {\n        classname += \" socket-suggested\";\n    }\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": empty socket\";\n\n    return (\n        <button\n            onFocus={() => {\n                // updateContext((ctx) => {\n                //     ctx.navigator.update(props.model.parent);\n                // });\n            }}\n            onBlur={() => {\n                // updateContext((ctx) => ctx.focus.unsetStack(props.model.parent));\n            }}\n            ref={inputEl}\n            className={classname}\n            onClick={onClick}\n            disabled={!!props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n            aria-label={label}\n            title={label}\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\n\ntype _selector = (model: Model) => IStack;\n\nconst useBlinkEffect = (selector: _selector) => {\n    const { updateContext, state } = React.useContext(GlobalContext);\n    if (!state) return;\n    const model = selector(state);\n    let timeout: any = null;\n    React.useEffect(() => {\n        if (state && selector(state).blinkFor) {\n            timeout = setTimeout(\n                () =>\n                    updateContext((state: Model) => {\n                        selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [state, model.blinkFor]);\n};\n\nexport default useBlinkEffect;\n","import Card from \"./Card\";\nimport FoundationStack from \"../../Model/Game/FoundationStack\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\ntype FoundationProps = { index: number; model: FoundationStack };\n\nconst FoundationStacks = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    return (\n        <>\n            {state.foundation.stacks.map((foundation, index) => (\n                <Foundation key={index} model={foundation} index={index} />\n            ))}\n        </>\n    );\n};\n\nexport default FoundationStacks;\n\nconst Foundation = (props: FoundationProps) => {\n    useBlinkEffect((model) => model.foundation.stacks[props.index]);\n    const { updateGameContext, state } = React.useContext(GlobalContext);\n    const model = props.model;\n    const [, drop] = useDrop({\n        accept: \"card\",\n        canDrop: (item: any) => {\n            return props.model.accepts(item.model);\n        },\n        drop: () => {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n    const cards = state?.hand.source == model.source ? [...model.stack, ...state.hand.stack] : [...model.stack];\n    return (\n        <div className=\"board-field\" key={props.index} ref={drop}>\n            <StackBase model={model}>\n                <div className={\"align-center foundation-base suit-\" + model.icon}>{model.icon}</div>\n            </StackBase>\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={model.blinkFor}\n                isSuggested={(index) => model.suggestion && model.stack.length - 1 == index}\n                isSelected={(index) => index > model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst Clock = () => {\n    const { state, getElapsed } = React.useContext(PauseContext);\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (state.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [state.started, state.paused]);\n\n    return !state.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Hearts = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode == \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst Hint = () => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Points = () => {\n    const { state } = React.useContext(GlobalContext);\n\n    return (\n        <>\n            <div className=\"icon-container\">🏆</div> {state?.game.rating.points}\n        </>\n    );\n};\n\nexport default Points;\n","import { BoardContext } from \"../../Game/BoardWrap\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst ToggleMenu = () => {\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n\n    return (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Undo = () => {\n    //@todo use gamestate token to avoid double processing\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"./Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src, state.tableau.getTop(index));\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover(state.tableau.getTop(index));\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: any) => (state: Model) => {\n        if (dealt != state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n        if (state.dealer.isDealt) {\n            state.game.started = Date.now();\n        }\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt != state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        state.game.started = Date.now();\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                if (newCard) {\n                    newCard.source = tableau.stacks[i].source;\n                    if (stack.length == tableau.stacks.length - 1 - i) {\n                        newCard.isHidden = false;\n                    }\n                    tableau.deal(newCard, i);\n                    this.dealt++;\n                    this.dealingAt++;\n                    if (this.dealingAt == tableau.stacks.length) {\n                        this.dealingAt = 0;\n                    }\n                    this.isDealt = false;\n                }\n                return;\n            } else {\n                const isFirst = this.dealingAt == 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n    }\n\n    validSettings = () => this.settings.launchSettings.inputMode !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack == stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && this.card && card && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack == stack;\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Model from \"../Model\";\n\nabstract class BasicStack implements IStack {\n    source: string;\n    constructor(source: string) {\n        this.source = source;\n    }\n    suggestion = false;\n    stack: Card[] = [];\n    getTop: () => Card | null = () => (this.stack && this.stack.length && this.stack[this.stack.length - 1]) || null;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n    blinkFor = 0;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick = (a: any) => (s: any) => {};\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    clickEmpty = (a: any) => (s: any) => {};\n    unblink: (model: Model) => void = () => {};\n    abstract accepts: (card: Card | null) => boolean;\n}\nexport default BasicStack;\n","import BasicStack from \"./BasicStack\";\nimport Hand from \"./Hand\";\n\nabstract class HandHoldingStack extends BasicStack {\n    hand: Hand;\n    constructor(source: string, hand: Hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source == this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n}\n\nexport default HandHoldingStack;\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { Suit } from \"../Deck/Suits\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nexport default class FoundationStack extends HandHoldingStack {\n    constructor(source: string, hand: Hand, suit: Suit) {\n        super(source, hand);\n        this.acceptedCards = [...getFoundationOrder()];\n        this.usedCards = [];\n        this.icon = suit.icon;\n        this.color = suit.color;\n    }\n    acceptedCards: string[] = [];\n    usedCards: any[] = [];\n    icon = \"\";\n    color = \"\";\n    getCurrentAccepted = () => {\n        return this.acceptedCards[this.acceptedCards.length - 1];\n    };\n    accepts = (card: Card | null) => {\n        if (!card) return false;\n        const currentAccepted = this.getCurrentAccepted();\n        return this.icon == card.type.icon && currentAccepted == card.face;\n    };\n    setOnClick = (onClick: (c: any, p: any) => (s: any) => void, hand: Hand) => {\n        this.clickEmpty = (p) => onClick(null, p);\n        const cards = this.source == hand.source ? [...this.stack, ...hand.stack] : this.stack;\n        cards.forEach((card, sindex) => {\n            card.onClick = (p: any) => onClick({ ...card }, p);\n            card.canClick = () => sindex == cards.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n}\n","import Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\n\nexport default class MultiStack<T extends HandHoldingStack> {\n    stacks: T[];\n    settings: Settings;\n    hand: Hand;\n    constructor(settings: Settings, hand: Hand, stacks: T[]) {\n        this.stacks = stacks;\n        this.settings = settings;\n        this.hand = hand;\n    }\n}\n","import Card from \"../Deck/Card\";\nimport FoundationStack from \"./FoundationStack\";\nimport Hand from \"./Hand\";\nimport MultiStack from \"./MultiStack\";\nimport Settings from \"./Settings\";\nimport Suits from \"../Deck/Suits\";\n\nexport default class Foundation extends MultiStack<FoundationStack> {\n    constructor(settings: Settings, hand: Hand) {\n        super(settings, hand, [\n            ...Object.keys(Suits)\n                .map((key: string) => Suits[key])\n                .map((suit, index) => new FoundationStack(\"foundation-\" + index, hand, suit)),\n        ]);\n    }\n\n    setOnClick = (onClick: (c: any, p: any, index: number) => (s: any) => void) => {\n        this.stacks.forEach((stack, index) => {\n            stack.setOnClick((c: any, p: any) => onClick(c, p, index), this.hand);\n        });\n    };\n\n    getCurrentAccepted = (index: number) => {\n        return this.stacks[index].getCurrentAccepted();\n    };\n\n    wouldAcceptHand = (index: number) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    accepts = (index: number, card: Card | null) => {\n        return this.stacks[index].accepts(card);\n    };\n\n    add = (index: number, cards: Card[]) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index: number, card: Card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return (card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop()) || null;\n    };\n\n    getPreviousUsed = (index: number) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => f.stack.length).reduce((a, b) => a + b, 0);\n\n    getTop = (index: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig: Foundation, hand: Hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new FoundationStack(origStack.source, hand, origStack);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src, state.foundation.getTop(index));\n            this.tryDetectEnd(state);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card | null, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.face) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    //@todo move this to a generic place, also detect failure\n    tryDetectEnd(state: Model) {\n        const nrofCards = state.foundation.countCards();\n        if (nrofCards === 52) {\n            state.game.isEnded = true;\n            state.game.end = Date.now();\n        }\n    }\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport interface AppliedRating {\n    points: number;\n    text: string;\n    notified?: boolean;\n}\n\nexport interface AppliedRatingWithId extends AppliedRating {\n    id: number;\n}\n\nexport default class Rating {\n    settings: Settings;\n    points: number;\n    multiplicator: number;\n    ratings: AppliedRating[];\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n        this.ratings = [];\n    }\n\n    hasNotifications = () => {\n        return this.ratings.filter((r) => !r.notified).length > 0;\n    };\n\n    getNextNotification = () => {\n        return this.ratings.map((r, id) => ({ ...r, id })).filter((r) => !r.notified)[0];\n    };\n\n    setNotified = (n: number) => {\n        this.ratings[n].notified = true;\n    };\n\n    applyRating = (points: number, text: string) => {\n        console.debug(\"RATING:\", text);\n        this.ratings.push({ points, text });\n    };\n\n    registerMove = (target: string, source: string, card: Card | null) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove, card);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode == \"single\" && this.settings.launchSettings.recyclingMode == \"infinite\") {\n            if (this.points > 0) {\n                let diff = 0;\n                if (this.points < 100) {\n                    diff = this.points * -1;\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                    diff = -100;\n                }\n                this.applyRating(diff, `subtract ${diff} (max 100 points) for RECYCLE`);\n            }\n        }\n    };\n\n    registerUncover = (card: Card | null) => {\n        this.registerHint(this.settings.disableHint());\n        card && card.setSuccess(5);\n        this.points += 5;\n        this.applyRating(5, \"add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on: boolean) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, \"subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other: Rating) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            this.applyRating(penalty * -1, `applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done: boolean) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, `applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move: { source: string; target: string }, card: Card | null) {\n        const isTableau = (obj: string) => obj.substr(0, 7) == \"tableau\";\n        const isFoundation = (obj: string) => obj.substr(0, 10) == \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE tableau -> foundation\");\n                card && card.setSuccess(10);\n                return 10;\n            }\n        } else if (move.source == \"waste\") {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE waste -> foundation\");\n                card && card.setSuccess(10);\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                this.applyRating(5, \"add 5 points for MOVE waste -> tableau\");\n                card && card.setSuccess(5);\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                this.applyRating(-15, \"subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start: number, end: number) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    };\n\n    static copy = (orig: Rating) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        copy.ratings = [...orig.ratings];\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Model from \"../Model\";\n\nexport default class TimeMachine {\n    previousStates: Model[];\n    memorable: boolean;\n    modified: boolean;\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source == target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state: any) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id: number, current: any) => {\n        const isRequested = this.previousStates.length - 1 == id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        if (on) {\n            this.modified = true;\n            this.memorable = false;\n        }\n    }\n\n    stackEquals = (a: IStack, b: IStack) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden == b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a: { stacks: IStack[] }, b: { stacks: IStack[] }) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a: Model, b: Model) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig: TimeMachine) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Rating from \"./Rating\";\nimport Settings from \"./Settings\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    settings: Settings;\n    rating: Rating;\n    timemachine: TimeMachine;\n    started: number;\n    isEnded: boolean;\n    end: number;\n    paused: any;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n        //@todo move to context:\n        this.started = 0;\n        this.isEnded = false;\n        this.end = 0;\n    }\n\n    registerMove = (target: string, source: string, card: Card | null) => {\n        this.rating.registerMove(target, source, card);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = (card: Card | null) => {\n        this.rating.registerUncover(card);\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig: Game) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        copy.paused = orig.paused;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    filter: (stack: any[]) => Card[] = (stack) => {\n        return stack.filter((c) => c);\n    };\n\n    pickUp = (stack: (Card | null)[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = this.filter(stack).map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source == model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.face == \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source == this.source) || null;\n\n    isFromWaste = () => this.source && this.source == \"waste\" || false;\n\n    isFromFoundation = (index: number) => this.source && this.source == `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source == `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) == \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/IStack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: (IStack | undefined)[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source == pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x == -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x == 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        const current = this.current();\n        if (current == undefined) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = current.getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y == 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const current = this.current();\n        const last: number = current ? current.getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (!current) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current()?.source || \"\");\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = (before: { card: Card | null; stack: string }) => {\n        const clickable = this.current()?.getClickable();\n        if (\n            this.model.focus.card &&\n            this.model.focus.card.canClick() &&\n            clickable &&\n            clickable[this.currentIndex.z] &&\n            clickable[this.currentIndex.z].face == this.model.focus.card.face &&\n            clickable[this.currentIndex.z].type.icon == this.model.focus.card.type.icon\n        ) {\n            return (ctx: Model) => {\n                if (this.model.focus.card && this.model.focus.card.equals(before.card)) {\n                    this.model.focus.card.onClick({ isKeyboard: true })(ctx);\n                }\n            };\n        } else if (this.model.focus.stack && this.model.focus.stack == before.stack) {\n            return (ctx: Model) => {\n                this.current()?.clickEmpty({ isKeyboard: true })(ctx);\n            };\n        } else {\n            //this is the entry point in case user starts keyboard nav with action button\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./BasicStack\";\nimport Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Stock extends BasicStack {\n    settings: Settings;\n    recyclings: number;\n    passes: number;\n    constructor(stack: Card[], settings: Settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        if (this.settings.launchSettings.recyclingMode == \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode == \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick: (c: any, p: any, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: any) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n    };\n    accepts = () => false;\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode == \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode == \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste: Card[]) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card: Card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card: Card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result: Card[] = [];\n        if (this.settings.launchSettings.drawMode == \"single\") {\n            const top = this.stack.pop();\n            if (top) result = [top];\n        }\n        if (this.settings.launchSettings.drawMode == \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length == 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig: Stock) => {\n        const copy = new Stock([], orig.settings);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\", state.waste.getTop());\n    };\n\n    recycleWaste = (state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\", state.waste.getTop())) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key == SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key == SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length == 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length == 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].face ==\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].face &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (\n                            this.getPutdownSuggestions(tableauState, true) >\n                            (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)\n                        ) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nexport default class TableauStack extends HandHoldingStack {\n    id = 0;\n    accepts = (current: Card | null) => {\n        const top = this.getTop();\n        if (!top) {\n            return (current && current.face === \"K\") || false;\n        }\n        if (this.source == current?.source) return true;\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = current ? range.indexOf(current.face) : 0;\n        const topIndex = range.indexOf(top.face);\n        return currentIndex + 1 == topIndex && current?.type.color !== top.type.color && top.face !== \"A\";\n    };\n    getTop = (offset?: number) => this.stack[this.stack.length - 1 - (offset || 0)];\n    canUncover = (card: Card) => {\n        const top = this.getTop();\n        return top.isHidden && card && card.equals(this.getTop());\n    };\n    setOnClick = (onClick: (a: any, b: any) => (s: any) => void, onClickhidden: (a: any, b: any) => (s: any) => void) => {\n        this.clickEmpty = (p: any) => onClick(null, p);\n        const cards = this.source == this.hand.source ? [...this.stack, ...this.hand.stack] : this.stack;\n        cards.forEach((card, sindex) => {\n            const click = card.isHidden && sindex == cards.length - 1 ? onClickhidden : onClick;\n            card.onClick = (p: any) => click({ ...card }, p);\n            card.canClick = () => !card.isHidden || (this.canUncover(card) && !this.hand.currentCard()) || false;\n        });\n        this.hand.setOnClick(this);\n    };\n    static copy = (orig: TableauStack) => {\n        const s = new TableauStack(orig.source, orig.hand);\n        s.id = orig.id;\n        s.stack = Card.copyAll(orig.stack);\n        return s;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport MultiStack from \"./MultiStack\";\nimport Settings from \"./Settings\";\nimport TableauStack from \"./TableauStack\";\n\nexport default class Tableau extends MultiStack<TableauStack> {\n    constructor(settings: Settings, hand: Hand) {\n        super(\n            settings,\n            hand,\n            [0, 1, 2, 3, 4, 5, 6].map((id) => {\n                const s = new TableauStack(\"tableau-\" + id, hand);\n                s.id = id;\n                return s;\n            })\n        );\n    }\n\n    setOnClick = (\n        onClick: (a: any, b: any, index: number) => (s: any) => void,\n        onClickhidden: (a: any, b: any, index: number) => (s: any) => void\n    ) => {\n        this.stacks.forEach((stack, index) => {\n            stack.setOnClick(\n                (a: any, b: any) => onClick(a, b, index),\n                (a: any, b: any) => onClickhidden(a, b, index)\n            );\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    //@todo when putting back hand, no entropy is observed\n\n    putDownHand = (index: number) => this.add(index, this.hand.source, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        if (!current) return false;\n        return this.stacks[index].accepts(current);\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        return this.stacks[index].canUncover(card);\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy != 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, source: string, cards: Card[]) => {\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number) => {\n        card.source = this.stacks[index].source;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].getTop(offset);\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map(TableauStack.copy);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\n\nexport default class Waste extends HandHoldingStack {\n    settings: Settings;\n    constructor(settings: Settings, hand: Hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n    }\n\n    setOnClick = (onClick: (c: any, p: any, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        const cards = this.source == this.hand.source ? [...this.stack, ...this.hand.stack] : this.stack;\n        cards.forEach((card, index) => {\n            card.onClick = (p: any) => onClick({ ...card }, p, null);\n            card.canClick = () => index == cards.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card: Card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards: Card[]) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card: Card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    accepts = (card: Card | null) => this.canAdd(card) || false;\n\n    canAdd = (card: Card | null) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card: Card) => (card && card.equals(this.getTop()) && this.stack.pop()) || null;\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig: Waste, hand: Hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Card from \"./Deck/Card\";\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport { IStack } from \"./Game/IStack\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n    token: number;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n        this.token = obj.token;\n    }\n\n    setToken = (token: number) => {\n        this.token = token;\n    };\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    _hasSuggestion = (obj: any) => {\n        return obj.suggestion || (obj.stack && obj.stack.some(this._hasSuggestion)) || (obj.stacks && obj.stacks.some(this._hasSuggestion));\n    };\n\n    hasSuggestions = () => {\n        return (\n            this._hasSuggestion(this.waste) ||\n            this._hasSuggestion(this.stock) ||\n            this._hasSuggestion(this.tableau) ||\n            this._hasSuggestion(this.foundation)\n        );\n    };\n\n    canAutoSolve = () => {\n        return (\n            this.waste.stack.length == 0 &&\n            this.stock.stack.length == 0 &&\n            this.tableau.stacks.every((s) => s.stack.every((c) => !c.isHidden))\n        );\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    clearSuccess = (card: Card) => {\n        const clear = (c: Card, s: IStack) => {\n            s.stack.forEach((_c) => {\n                if (_c.equals(c)) {\n                    _c.success = 0;\n                }\n            });\n        };\n        clear(card, this.stock);\n        clear(card, this.waste);\n        this.foundation.stacks.forEach((s) => clear(card, s));\n        this.tableau.stacks.forEach((s) => clear(card, s));\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()));\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings),\n            token: 0,\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n            token: state.token,\n        });\n    };\n}\n","import { ToastContentProps, ToastOptions, toast } from \"react-toastify\";\n\nimport { AppliedRating } from \"../../Model/Game/Rating\";\nimport GlobalContext from \"../Context\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\n\nconst Judge = () => {\n    //- one checks a context from outside for final status\n    //  - check if other player won\n    //  - check if other player gave up\n    //- the other analyses the game and reports to context\n    //  - check if current player won\n    //  - check if there are no more valid options and offer to give up\n\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n\n    return (\n        <>\n            <Evaluator token={state.token} />\n            {false && <RatingNotifier />}\n            <AutoSolve canAutosolve={state.canAutoSolve()} />\n        </>\n    );\n};\n\n//- auto-resolver\n//  - check if the board can auto-resolve and offer to complete automatically\n//  - auto-complete becomes button in header and option in menu\n\nconst AutoSolve = (props: { canAutosolve: boolean }) => {\n    const [solving, setSolving] = React.useState(false);\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    React.useEffect(() => {\n        if (props.canAutosolve) {\n            updateGameContext((ctx) => (ctx.settings.suggestionMode = SuggestionModes.get(SuggestionModes.NONE)));\n            setSolving(true);\n        }\n    }, [props.canAutosolve]);\n    const canSolve = solving && state?.settings.suggestionMode.key == SuggestionModes.NONE;\n    return !canSolve ? null : <Solver />;\n};\n\n//@todo auto-uncover as feature, in which case action is not undoable\n//@todo also start general confetti firework elements when autosolving\n\nconst Solver = () => {\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            const copy = Model.copy(state).withHandlers();\n            if (copy.hand.currentCard()) {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.foundation)) {\n                    const suggestedFoundations = copy.foundation.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedFoundations.length) {\n                        const suggestedFoundation = suggestedFoundations[0];\n                        updateGameContext(suggestedFoundation.clickEmpty({ isKeyboard: false }));\n                    }\n                }\n            } else {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.tableau)) {\n                    const suggestedTableaus = copy.tableau.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedTableaus.length) {\n                        const suggestedTableau = suggestedTableaus[0];\n                        const suggestedCards = suggestedTableau.stack.filter((c) => c.suggestion);\n                        if (suggestedCards.length) {\n                            const suggestedCard = suggestedCards[0];\n                            updateGameContext(suggestedCard.onClick({ isKeyboard: false }));\n                        }\n                    }\n                }\n            }\n        }, 150);\n\n        return () => clearTimeout(timeout);\n    });\n    return null;\n};\n\nconst useEvaluation: (mode: string, token: number) => [number, () => void] = (mode, token) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state)\n        return [\n            0,\n            () => {\n                throw \"no state\";\n            },\n        ];\n    const [falseResults, setFalseResults] = React.useState<number>(0);\n    const reset = () => setFalseResults(0);\n    React.useEffect(() => {\n        const copy = Model.copy(state);\n        copy.settings.suggestionMode = SuggestionModes.get(mode);\n        copy.suggestor.evaluateOptions(copy);\n        if (copy.hasSuggestions()) {\n            if (falseResults !== 0) {\n                setFalseResults(0);\n            }\n        } else {\n            setFalseResults(falseResults + 1);\n        }\n    }, [token]);\n    return [falseResults, reset];\n};\n\nconst Evaluator = (props: { token: number }) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const [full, resetFull] = useEvaluation(SuggestionModes.FULL, props.token);\n    const [regular, resetRegular] = useEvaluation(SuggestionModes.REGULAR, props.token);\n    const [noRegularSince, setNoRegularSince] = React.useState<number>(0);\n    const [noFullSince, setNoFullSince] = React.useState<number>(0);\n    React.useEffect(() => {\n        if (!state.hand.currentCard()) {\n            console.log(full, regular);\n\n            if (full > 0 && regular > 0) {\n                if (noFullSince >= 0) {\n                    //@todo we need full blown menu here, not just a toast.\n                    toast.error(\n                        (props: ToastContentProps) => (\n                            <div>\n                                <div>😢 looks like the game is over</div>\n                                <div></div>\n                                <div>\n                                    <button\n                                        onClick={() => {\n                                            setNoFullSince(-3);\n                                            props.closeToast && props.closeToast();\n                                        }}\n                                    >\n                                        Keep trying\n                                    </button>\n                                    <button onClick={() => alert(\"@todo\")}>Restart</button>\n                                    <button onClick={() => alert(\"@todo\")}>Give up</button>\n                                </div>\n                            </div>\n                        ),\n                        { autoClose: false, closeButton: false }\n                    );\n                }\n                setNoFullSince(noFullSince + 1);\n                resetFull();\n            } else if (regular > 0 && full == 0) {\n                if (state.settings.suggestionMode.key !== SuggestionModes.FULL && noRegularSince >= 0) {\n                    // toast.warn((props: ToastContentProps) => (\n                    //     <div>\n                    //         <div>😢 looks like youre stuck here. Have you tried enabling full suggestions?</div>\n                    //         <div></div>\n                    //         <div>\n                    //             <button>Enable</button>\n                    //             <button\n                    //                 onClick={() => {\n                    //                     setNoRegularSince(-2);\n                    //                     props.closeToast && props.closeToast();\n                    //                 }}\n                    //             >\n                    //                 Maybe Later\n                    //             </button>\n                    //             <button>Dont ask again</button>\n                    //         </div>\n                    //     </div>\n                    // ));\n                }\n                resetRegular();\n\n                setNoRegularSince(noRegularSince + 1);\n            }\n        }\n    }, [full, regular, state.hand.currentCard()]);\n    return null;\n};\nconst RatingToast = (props: { rating: AppliedRating }) => {\n    return (\n        <div>\n            <div>Rating</div>\n            <div>{props.rating.text}</div>\n        </div>\n    );\n};\nconst RatingToastProps: ToastOptions = { autoClose: 2000, hideProgressBar: true, position: \"bottom-center\" };\n//todo allow opt out\n//showing this all the time is too much\n//use toasts for badges/achievements instead\nconst RatingNotifier = () => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    React.useEffect(() => {\n        if (state?.game.rating && state?.game.rating.hasNotifications()) {\n            const notification = state?.game.rating.getNextNotification();\n            if (notification) {\n                const setNotified = () => {\n                    updateContext((ctx) => {\n                        ctx.game.rating.setNotified(notification.id);\n                    });\n                };\n\n                if (notification.points > 0) {\n                    toast.success(<RatingToast rating={notification} />, RatingToastProps);\n                    setNotified();\n                } else {\n                    toast.warn(<RatingToast rating={notification} />, RatingToastProps);\n                    setNotified();\n                }\n            }\n        }\n    }, [state?.token]);\n    return null;\n};\n\nexport default Judge;\n","import \"./StartScreen/Menu.scss\";\n\nimport { NavigationContext, NavigationProvider, NavigationState } from \"./StartScreen/Context\";\nimport { Universal, getKeyboardLayout } from \"../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../Game/BoardWrap\";\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\n\nconst _Menu = () => {\n    const [navigation, setNavigation] = React.useState<NavigationState>({\n        menu: {\n            x: 0,\n            y: 0,\n        },\n        screen: {\n            x: 0,\n            y: 0,\n        },\n        focus: \"menu\",\n        mainMenu: \"\",\n        screeen: \"\",\n    });\n    const navigationContext = {\n        navigation,\n        setNavigation,\n    };\n    return (\n        <NavigationProvider value={navigationContext}>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too if consented and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = React.useContext(NavigationContext);\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n    if (!state) {\n        return null;\n    }\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining == 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining == 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) [(announcement = \"The game is not paused.\")];\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle label=\"😴\" />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle label=\"😴\" />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon=\"▶️\"\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                        />\n                        <MenuButton\n                            icon=\"🌪️\"\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            toggled={navigation.mainMenu == \"entropy\"}\n                        >\n                            <MenuButton\n                                icon=\"🌪️\"\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                            />\n                            <MenuButton\n                                icon=\"🌬️\"\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon=\"♻️\"\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon=\"🗑️\" title=\"Quit Game\" onClick={() => restart()} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import React from \"react\";\n\nconst usePrevious = <T>(value: T) => {\n    const ref = React.useRef<T>();\n    React.useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n","import Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport usePrevious from \"./usePrevious\";\n\nconst Renderer = (props: { length: number; paused: boolean; started: number }) => {\n    const context = React.useContext(GlobalContext);\n\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout: any = null;\n        if (\n            context &&\n            context.state &&\n            context.state.settings.launchSettings.speed &&\n            started &&\n            !paused &&\n            previous &&\n            (previous?.length != length || previous?.started != started || previous?.paused != paused)\n        ) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (\n                        length == state.stock.stack.length &&\n                        state.stock.passes > 0 &&\n                        (state.stock.stack.length || state.waste.stack.length)\n                    ) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => clearTimeout(timeout);\n    }, [length, paused, started]);\n\n    if (!context || !context.state) return null;\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            <Card\n                index={0}\n                key={0}\n                models={context.state.stock.stack}\n                offsetTop={(index) => (index / 2) * -1}\n                zIndex={0}\n                blink={context?.state?.stock.blinkFor}\n                isSuggested={(index) => context?.state?.stock.suggestion && index == context.state.stock.stack.length - 1}\n            />\n        </div>\n    );\n};\n\nconst Stock = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    useBlinkEffect((model) => model.stock);\n    const pause = React.useContext(PauseContext);\n    const { paused, started } = pause.state;\n    return <Renderer length={state.stock.stack.length} paused={paused} started={started} />;\n};\n\nexport default Stock;\n","import Card from \"./Card\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport TableauModel from \"../../Model/Game/Tableau\";\nimport TableauStack from \"../../Model/Game/TableauStack\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\ntype TableauProps = { index: number; model: TableauStack; parent: TableauModel };\n\nconst TableauStacks = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    return (\n        <>\n            {state.tableau.stacks.map((tableau, index) => (\n                <Tableau key={index} index={index} model={tableau} parent={state.tableau} />\n            ))}\n        </>\n    );\n};\nexport default TableauStacks;\n\nconst Tableau = (props: TableauProps) => {\n    useBlinkEffect((s) => s.tableau.stacks[props.index]);\n    const [accepting, setAccepting] = React.useState<boolean>(false);\n    const { updateGameContext, state } = React.useContext(GlobalContext);\n    const [, drop] = useDrop({\n        accept: \"card\",\n        canDrop: (item: any) => {\n            const accepts = props.model.accepts(item.model);\n            setAccepting(accepts);\n            return accepts;\n        },\n        drop: () => {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n\n    const cards = state?.hand.source == props.model.source ? [...props.model.stack, ...state.hand.stack] : [...props.model.stack];\n\n    let offset = 1;\n    const getOffset = (index: number, cards: CardModel[]) => {\n        for (let i = 0; i <= index; i++) {\n            if (cards[i] && !cards[i].isHidden) {\n                offset = i * 12 + (index - i) * 24;\n                return offset;\n            }\n        }\n        offset = index * 12;\n        return offset;\n    };\n\n    return (\n        <div className=\"board-field\" ref={drop}>\n            <StackBase model={props.model} />\n            <Card\n                index={0}\n                key={0}\n                accepting={accepting}\n                models={cards}\n                blink={props.model.blinkFor}\n                isSuggested={(index) => props.model.suggestion && props.model.stack.length - 1 == index}\n                offsetTop={(index, models) => getOffset(index, models)}\n                isSelected={(index) => index > props.model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\nconst Waste = () => {\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    useBlinkEffect((model) => model.waste);\n    const getOffset = (index: number) => {\n        if (state.settings.launchSettings.drawMode == \"single\") {\n            return 0;\n        }\n        const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n        let additionalOffset = 2;\n        if (length == 2) {\n            additionalOffset = 1;\n        }\n\n        if (length == 1) {\n            additionalOffset = 0;\n        }\n\n        return ((index - length - 2) % 3) + additionalOffset;\n    };\n\n    const [, _drop] = useDrop({\n        accept: \"card\",\n        // eslint-disable-next-line no-unused-vars\n        canDrop: () => {\n            const accepts = state.hand.isFromWaste();\n            //setAccepting(accepts);\n            return accepts;\n        },\n        drop: () => {\n            updateGameContext(state.waste.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n\n    const cards = state?.hand.source == state.waste.source ? [...state.waste.stack, ...state.hand.stack] : [...state.waste.stack];\n\n    return (\n        <div className=\"board-field\" ref={_drop}>\n            <StackBase model={state.waste} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                offsetTop={(index) => (index / 2) * -1}\n                offsetLeft={(index) => getOffset(index)}\n                blink={state.waste.blinkFor}\n                isSuggested={(index) => state.waste.suggestion && index == state.waste.stack.length - 1}\n                isSelected={(index) => index > state.waste.stack.length - 1}\n            />\n        </div>\n    );\n};\nexport default Waste;\n","import \"./Board.scss\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nimport { Slide, ToastContainer } from \"react-toastify\";\n\nimport BoardNavigator from \"./Navigation/BoardNavigator\";\nimport Dealer from \"./Dealer\";\nimport FoundationStacks from \"./Foundation\";\nimport Header from \"../UI/Header/Header\";\nimport Judge from \"./Judge\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport TableauStacks from \"./Tableau\";\nimport Waste from \"./Waste\";\nimport { usePreview } from \"react-dnd-preview\";\n\n//@todo move elsewhere\nconst Preview = (props: { reff: any }) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { display, _itemType, item, style } = usePreview();\n    if (!display) {\n        return null;\n    }\n    const rect = props.reff.getBoundingClientRect();\n    return (\n        <div\n            style={{\n                ...style,\n                position: \"relative\",\n                width: \"100%\",\n                left: rect.left * -1,\n                top: rect.top * -1,\n                zIndex: 2000,\n                opacity: 1,\n            }}\n        >\n            {item.render}\n        </div>\n    );\n};\ntype BoardProps = { mode: string };\nconst Board = (props: BoardProps) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n    //@todo when board lives too long, restart game will lead to duplicate dndprovider error\n    //@todo use different IDs for draggable/droppable elements per user\n    //then have central provider that lives forever\n    return (\n        <>\n            <Menu />\n            <Header mode={props.mode} />\n            <ToastContainer\n                style={{ zIndex: 8888 }}\n                position=\"top-center\"\n                closeOnClick={false}\n                newestOnTop={true}\n                limit={1}\n                pauseOnFocusLoss={false}\n                draggable={false}\n                transition={Slide}\n            />\n            <div className={\"board-jail \" + props.mode}>\n                <div className={\"board-grid-container \" + props.mode}>\n                    <Stock />\n                    <Waste />\n                    <div className=\"board-field spacer\" ref={ref}>\n                        {ref.current && <Preview reff={ref.current} />}\n                    </div>\n                    <FoundationStacks />\n                    <TableauStacks />\n                </div>\n            </div>\n            <Dealer />\n            <BoardNavigator />\n            <Judge />\n        </>\n    );\n};\n\nexport default Board;\n","import \"./Screens.scss\";\n\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\n\nconst EndScreen = () => {\n    const { state, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    //@todo show launch settings (draw mode, recycling mode)\n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../Context\";\nimport React from \"react\";\n\nexport const BoardContext = React.createContext({\n    player: 0,\n});\n\nconst BoardProvider = BoardContext.Provider;\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\n//We use class component here because setState allows partial updates \nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                state.setToken(Math.random());\n                return state;\n            }\n\n            return null;\n        });\n\n    //on every render, we refresh the click handlers in the model and the suggestions\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider value={{ player: this.props.player }}>\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n"],"sourceRoot":""}