{"version":3,"sources":["View/Game/GameContext.ts","View/Game/BoardContext.ts","View/GlobalContext.ts","View/Game/Navigation/BoardGamePad.tsx","View/Game/Navigation/BoardKeyboard.tsx","View/Game/PauseContext.tsx","View/Game/Navigation/BoardNavigator.tsx","View/Game/Dealer.tsx","common/DndPreview.tsx","View/Game/Firework.tsx","View/Game/CardFirework.tsx","View/Game/StackDescription.ts","View/Game/Card.tsx","View/Game/StackBase.tsx","View/Game/useBlinkEffect.ts","View/Game/Foundation.tsx","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/Stack.ts","Model/Game/HandHoldingStack.ts","Model/Game/FoundationStack.tsx","Model/Game/MultiStack.ts","Model/Game/Foundation.ts","Model/Business/Foundation.ts","Model/Game/Rating.ts","Model/Game/TimeMachine.ts","Model/Game/Game.ts","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.ts","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/TableauStack.tsx","Model/Game/Tableau.ts","Model/Game/Waste.ts","Model/Model.ts","View/Game/AutoSolve.tsx","View/Game/Evaluator.tsx","View/Game/Judge.tsx","View/UI/Menu.tsx","View/Game/usePrevious.ts","View/Game/Stock.tsx","View/Game/Tableau.tsx","View/Game/Waste.tsx","View/Game/Board.tsx","View/UI/EndScreen.js","View/Game/BoardWrap.tsx","View/Game/Game.tsx"],"names":["defaultGameState","started","isEnded","end","winner","GameContext","React","createContext","gameState","win","start","BoardContext","player","BoardProvider","Provider","defaultValue","state","replaceContext","updateContext","updateGameContext","restart","GlobalContext","useGlobalContext","ctx","useContext","BoardGamePad","props","isGamePadDriven","settings","launchSettings","inputMode","isSinglePlayer","boardMode","GameModes","SINGLEPLAYER","switchToGamePad","focus","isKeyBoard","GamePad","gamepadIndex","players","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","layout","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","defaultPauseState","paused","pauses","pauseStartedAt","allowed","pausedBy","showMenu","defaultPauseContext","togglePause","getElapsed","PauseContext","PauseProvider","useState","setPaused","context","isPaused","Date","now","length","padleft","i","msec","reduce","a","b","getElapsedMs","hh","Math","floor","mm","ss","value","children","BoardNavigator","before","x","navigator","currentIndex","y","z","beforeFocused","card","stack","handlers","modifier","moveLeft","moveRight","moveUp","moveDown","handler","pressCurrent","finishNav","hand","onClick","isKeyboard","suggestionMode","supportsHints","isTemporary","isVisible","isDisabled","enableHint","_state","previous","game","timemachine","popPreviousState","previousStates","rating","penalize","Dealer","timeouts","useEffect","quickDeal","deal","dealt","push","setTimeout","dealer","isDealt","dealOne","forEach","timeout","clearTimeout","dealAll","DndPreview","usePreview","display","item","_itemType","style","rect","reff","getBoundingClientRect","position","width","left","top","zIndex","opacity","render","Firework","canvasRef","createRef","current","count","intensity","defaults","ticks","origin","particleCount","startVelocity","decay","spread","localConfetti","confetti","create","resize","fire","particleRatio","opts","Object","assign","scalar","ref","CardFirework","setFire","model","success","clearSuccess","token","getStackLabel","source","names","map","id","label","split","parseInt","Card","ReRender","models","slice","index","offsetLeft","isSelected","isDrag","displayName","pause","inputEl","useRef","isFocused","hasCard","setDrag","_isDrag","useDrag","type","collect","monitor","isDragging","canDrag","canClick","isHidden","currentCard","equals","begin","_item","didDrop","dragRef","preview","getEmptyImage","captureDraggingState","icon","face","pointerEvents","className","onFocus","onBlur","offsetTop","entropyStyle","getCardStyle","hasSuggestion","isSuggested","suggestion","blink","accepting","getClassName","e","preventDefault","clientX","clientY","ele","target","includes","offsetParent","click","ownerDocument","defaultView","pageXOffset","pageYOffset","element","disabled","tabIndex","aria-label","title","StackBase","classname","hasStack","blinkFor","clickEmpty","useBlinkEffect","selector","unblink","FoundationStacks","foundation","stacks","Foundation","useDrop","accept","canDrop","accepts","drop","cards","Clock","elapsed","setElapsed","interval","setInterval","clearInterval","Hearts","recyclingMode","stock","passes","createString","Array","from","keys","join","getHearts","Hint","Points","toast","info","ratings","reverse","points","text","autoClose","ToggleMenu","Undo","pow","multiplicator","Header","mode","Blinker","startBlink","registerBlink","s","stopBlink","Tableau","tableau","dispatchPutDown","wouldAcceptHand","src","putDownHand","registerMove","getTop","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","isHoldingCard","uncover","registerUncover","dealingAt","callback","newCard","popOne","isFirst","this","Dispatcher","clickHandler","getHandler","Focus","keyboard","validSettings","setCard","unsetCard","unsetStack","setStack","BasicStack","getClickable","filter","HandHoldingStack","getHandContent","FoundationStack","suit","acceptedCards","usedCards","color","getCurrentAccepted","currentAccepted","setOnClick","p","sindex","getFoundationOrder","MultiStack","Suits","key","c","hasMoreThanOneCard","add","putDown","causeEntropy","min","interactionEntropy","pop","remove","getPreviousUsed","countCards","f","setEntropy","lvl","copy","orig","origStack","copyAll","_card","Rating","applyRating","console","debug","registerHint","disableHint","currentMove","rateMove","registerRecycle","drawMode","diff","setSuccess","other","undoPenalty","penalty","done","hintPenalty","getTimePenalty","secondsToFinish","trunc","getBonusPoints","round","getTotal","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","memorable","modified","pushPreviousState","modelEquals","isRequested","popPrevious","stackEquals","every","stacksEqual","waste","Game","Hand","splice","_onClick","isHoldingKing","isFromCurrentSource","isFromWaste","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","Navigator","rows","getZindex","elem","targets","update","pos","row","j","valid","direction","undefined","clickable","toggleRow","pickLast","last","Settings","baseEntropy","suggestionModes","setSuggestionMode","sm","SuggestionModes","get","getHintMode","next","allSuggestionModes","Stock","recyclings","recycle","setCardProperties","isOnTop","popTop","result","_position","moveToWaste","recycleWaste","addAll","canRecycle","Waste","Suggestions","evaluateOptions","disableAllSuggestions","NONE","getUncoverOptions","getPutdownSuggestions","getPickupOptions","FULL","SCORED","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","range","getTableauOrder","indexOf","offset","canUncover","onClickhidden","getStack","canPutDown","getCard","stackEntropy","entropy","concat","canAdd","suggestor","setToken","withSuggestions","_hasSuggestion","some","hasSuggestions","canAutoSolve","clear","_c","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","AutoSolve","solving","setSolving","canAutosolve","Solver","suggestedFoundations","suggestedFoundation","suggestedTableaus","suggestedCards","suggestedCard","useEvaluation","falseResults","setFalseResults","Evaluator","full","resetFull","REGULAR","regular","resetRegular","noRegularSince","setNoRegularSince","noFullSince","setNoFullSince","log","error","closeToast","alert","closeButton","Judge","Menu","useNavigationContext","navigation","setNavigation","switchToMenu","menu","screeen","mainMenu","remaining","announcement","keyboardLayout","MenuTitle","MenuTree","MenuButton","val","toggleMainMenu","toggled","EntropyLevels","skip","_Menu","screen","navigationContext","usePrevious","Renderer","speed","TableauStacks","parent","setAccepting","getOffset","_drop","additionalOffset","Board","closeOnClick","newestOnTop","limit","pauseOnFocusLoss","draggable","transition","Slide","EndScreen","BoardWrap","setState","random","Component","SinglePlayer","launchState","AspectRatio","ratio","Ratios","_4to3","SplitScreen","inputMethod","setGameState","DelayedSuspense","delay","fallback","VERSUS"],"mappings":"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","file":"static/js/5.03d02ec8.chunk.js","sourcesContent":["import React from \"react\";\n\nexport interface IGameState {\n    started: number;\n    isEnded: boolean;\n    end: number;\n    winner: number;\n}\n\nexport interface IGameContext {\n    gameState: IGameState;\n    win: (player: number) => void;\n    start: () => void;\n}\n\nexport const defaultGameState = {\n    started: 0,\n    isEnded: false,\n    end: 0,\n    winner: -1,\n};\n\nconst GameContext = React.createContext<IGameContext>({\n    gameState: defaultGameState,\n    win: () => {},\n    start: () => {},\n});\n\nexport default GameContext;\n","import React from \"react\";\n\nexport const BoardContext = React.createContext({\n    player: 0,\n});\n\nexport const BoardProvider = BoardContext.Provider;\n","import { StateReplaceFunction, StateUpdateFunction } from \"../Common\";\n\nimport Model from \"../Model/Model\";\nimport React from \"react\";\n\ninterface IGlobalContext {\n    state: Model | null;\n    replaceContext: StateReplaceFunction;\n    updateContext: StateUpdateFunction;\n    updateGameContext: StateUpdateFunction;\n    restart: () => void;\n}\n\ninterface XGlobalContext {\n    state: Model;\n    replaceContext: StateReplaceFunction;\n    updateContext: StateUpdateFunction;\n    updateGameContext: StateUpdateFunction;\n    restart: () => void;\n}\n\nconst useGlobalContext: () => XGlobalContext = () => {\n    const ctx = React.useContext(GlobalContext);\n    if (!ctx.state) {\n        throw \"no state present\";\n    }\n    return { ...ctx, state: ctx.state };\n};\n\nconst defaultValue = {\n    state: null,\n    replaceContext: () => {},\n    updateContext: () => {},\n    updateGameContext: () => {},\n    restart: () => {},\n};\n\nconst GlobalContext = React.createContext<IGlobalContext>(defaultValue);\n\nexport const Provider = GlobalContext.Provider;\n\nexport default useGlobalContext;\n","import { BoardContext } from \"../BoardContext\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GamePad from \"../../../common/GamePad\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst BoardGamePad = (props: CustomInputProps) => {\n    const { state } = useGlobalContext();\n    const { player } = React.useContext(BoardContext);\n    const isGamePadDriven = state.settings.launchSettings.inputMode == \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n\n    const switchToGamePad = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight(switchToGamePad)}\n            onUp={() => props.onUp(switchToGamePad)}\n            onDown={() => props.onDown(switchToGamePad)}\n            onAction={() => props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToGamePad)}\n            onMenu={() => props.onMenu(switchToGamePad)}\n        />\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"../../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../BoardContext\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport Keyboard from \"../../../common/Keyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst BoardKeyboard = (props: CustomInputProps) => {\n    const { state } = useGlobalContext();\n    const { player } = React.useContext(BoardContext);\n    const isKeyboardDriven = state.settings.launchSettings.inputMode === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import React from \"react\";\n\nexport interface IPauseState {\n    started: number;\n    end: number;\n    paused: boolean;\n    pauses: number[];\n    pauseStartedAt: number;\n    allowed: number;\n    isSilent?: boolean;\n    pausedBy: number;\n    showMenu: boolean;\n}\nexport interface IPauseContext {\n    state: IPauseState;\n    togglePause: (isPaused: boolean, pausedBy: number) => void;\n    getElapsed: () => string;\n}\nexport const defaultPauseState = {\n    started: 0,\n    end: 0,\n    paused: false,\n    pauses: [],\n    pauseStartedAt: 0,\n    allowed: 5,\n    pausedBy: -1,\n    showMenu: false,\n};\nexport const defaultPauseContext = {\n    state: defaultPauseState,\n    togglePause: () => {},\n    getElapsed: () => \"\",\n};\n\nconst PauseContext = React.createContext<IPauseContext>(defaultPauseContext);\n\nexport const PauseProvider = (props: any) => {\n    const [paused, setPaused] = React.useState<IPauseState>({ ...defaultPauseState });\n    const getElapsedMs = () => {\n        const pauses = paused.pauses.reduce((a, b) => a + b, 0);\n        return (paused.end || paused.pauseStartedAt || Date.now()) - props.started - pauses;\n    };\n\n    const getElapsed = () => {\n        const padleft = (i: number) => ((i + \"\").length == 1 ? \"0\" + i : i);\n        let msec = getElapsedMs();\n        const hh = Math.floor(msec / 1000 / 60 / 60);\n        msec -= hh * 1000 * 60 * 60;\n        const mm = Math.floor(msec / 1000 / 60);\n        msec -= mm * 1000 * 60;\n        const ss = Math.floor(msec / 1000);\n        msec -= ss * 1000;\n        return hh ? hh + \":\" + padleft(mm) + \":\" + padleft(ss) : padleft(mm) + \":\" + padleft(ss);\n    };\n    const togglePause = (isPaused: boolean, pausedBy: number) => {\n        if (paused.showMenu) {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauses: [...paused.pauses, Date.now() - paused.pauseStartedAt],\n                pauseStartedAt: 0,\n                paused: false,\n                showMenu: false,\n            });\n        } else if (paused.pauses.length < paused.allowed) {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauseStartedAt: Date.now(),\n                paused: true,\n                showMenu: true,\n            });\n        } else {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauseStartedAt: 0,\n                paused: false,\n                showMenu: true,\n            });\n        }\n    };\n    const context = {\n        state: { ...paused, started: props.started },\n        togglePause,\n        getElapsed,\n    };\n\n    return <PauseContext.Provider value={context}>{props.children}</PauseContext.Provider>;\n};\n\nexport default PauseContext;\n","import { BoardContext } from \"../BoardContext\";\nimport BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport Model from \"../../../Model/Model\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\ntype _mod = (state: Model) => void;\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = useGlobalContext();\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const beforeFocused = { card: state.focus.card, stack: state.focus.stack };\n    const isPaused = !!paused.state.paused;\n\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const handlers = {\n        onLeft: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveLeft(before);\n            }),\n\n        onRight: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveRight(before);\n            }),\n\n        onUp: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveUp(before);\n            }),\n\n        onDown: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveDown(before);\n            }),\n\n        onAction: (modifier: _mod) =>\n            updateGameContext((ctx) => {\n                modifier(ctx);\n                const handler = state?.navigator?.pressCurrent(beforeFocused);\n                handler && handler(ctx);\n                ctx.navigator.finishNav();\n            }),\n\n        onCancel: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n            }),\n\n        onPause: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n\n        onHint: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n                if (isVisible(state) && !isDisabled(state)) {\n                    state.settings.enableHint();\n                }\n            });\n        },\n\n        onUndo: () => {\n            //@todo use gamestate token to avoid double processing\n            replaceContext((_state) => {\n                const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n                if (previous) {\n                    previous.game.rating.penalize(_state.game.rating);\n                    return previous;\n                }\n                return null;\n            });\n        },\n        onMenu: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n    };\n\n    return isPaused ? null : (\n        <>\n            <BoardKeyboard {...handlers} />\n            <BoardGamePad {...handlers} />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import GameContext from \"./GameContext\";\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst Dealer = () => {\n    const { state, replaceContext } = useGlobalContext();\n    const { gameState, start } = React.useContext(GameContext);\n    const timeouts: any[] = [];\n    React.useEffect(() => {\n        if (!gameState.started) {\n            if (state.settings.launchSettings.quickDeal) {\n                if (state && state.dealer && !state.dealer.isDealt) {\n                    start();\n                    replaceContext(state.dealer.dealAll());\n                }\n            } else {\n                const deal = (dealt: number) => {\n                    timeouts.push(\n                        setTimeout(() => {\n                            if (state && state.dealer && !state.dealer.isDealt) {\n                                replaceContext(state.dealer.dealOne(dealt, deal));\n                            } else {\n                                start();\n                            }\n                        }, 35)\n                    );\n                };\n\n                deal(state.dealer.dealt);\n                return () =>\n                    timeouts.forEach((timeout) => {\n                        clearTimeout(timeout);\n                    });\n            }\n        }\n    }, []);\n    return null;\n};\nexport default Dealer;\n","import React from \"react\";\nimport { usePreview } from \"react-dnd-preview\";\n\nconst DndPreview = (props: { reff: any }) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { display, _itemType, item, style } = usePreview();\n    if (!display) {\n        return null;\n    }\n    const rect = props.reff.getBoundingClientRect();\n    return (\n        <div\n            style={{\n                ...style,\n                position: \"relative\",\n                width: \"100%\",\n                left: rect.left * -1,\n                top: rect.top * -1,\n                zIndex: 2000,\n                opacity: 1,\n            }}\n        >\n            {item.render}\n        </div>\n    );\n};\n\nexport default DndPreview;\n","import React from \"react\";\nimport confetti from \"canvas-confetti\";\n\nconst Firework = (props: { intensity: number }) => {\n    const canvasRef = React.createRef<HTMLCanvasElement>();\n    React.useEffect(() => {\n        if (canvasRef && canvasRef.current) {\n            const count = 15 * props.intensity;\n            const origin = {\n                x: 0.5,\n                y: 0.33,\n            };\n            const defaults = {\n                ticks: 50,\n                origin,\n                particleCount: 40,\n                startVelocity: 20,\n                decay: 0.8,\n                spread: 360,\n            };\n            const localConfetti = confetti.create(canvasRef.current, { resize: true });\n\n            const fire = (particleRatio: any, opts: any) => {\n                localConfetti(\n                    Object.assign({}, defaults, opts, {\n                        particleCount: Math.floor(count * particleRatio),\n                    })\n                );\n            };\n\n            fire(0.25, {\n                startVelocity: 55,\n            });\n            fire(0.2, {});\n            fire(0.35, {\n                decay: 0.91,\n                scalar: 0.8,\n            });\n            fire(0.1, {\n                startVelocity: 25,\n                decay: 0.92,\n                scalar: 1.2,\n            });\n            fire(0.1, {\n                startVelocity: 45,\n            });\n            fire(0.1, {\n                startVelocity: 45,\n            });\n        }\n    }, [canvasRef]);\n\n    return <canvas ref={canvasRef}></canvas>;\n};\n\nexport default Firework;\n","import CardModel from \"../../Model/Deck/Card\";\nimport Firework from \"./Firework\";\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst CardFirework = (props: { model: CardModel }) => {\n    const { state, updateContext } = useGlobalContext();\n    const [fire, setFire] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        if (props.model.success) {\n            setFire(true);\n            const timeout = setTimeout(() => updateContext((ctx) => ctx.clearSuccess(props.model)), 25);\n            return () => clearTimeout(timeout);\n        }\n    }, [state?.token, props.model.success]);\n    return <>{fire && <Firework intensity={props.model.success} />}</>;\n};\n\nexport default CardFirework;\n","const getStackLabel = (source: string) => {\n    const names = [0, 1, 2, 3, 4, 5, 6].map((id) => \" stack \" + (id + 1));\n    let label = \"\";\n    const split = source.split(\"-\");\n    label += split[0];\n    if (split.length > 1) {\n        label += names[parseInt(split[1])];\n    }\n    return label;\n};\n\nexport default getStackLabel;\n","import CardFirework from \"./CardFirework\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport GameModes from \"../../GameModes\";\nimport PauseContext from \"./PauseContext\";\nimport React from \"react\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport getStackLabel from \"./StackDescription\";\nimport { useDrag } from \"react-dnd\";\nimport useGlobalContext from \"../GlobalContext\";\n\ntype CardProps = {\n    index: number;\n    accepting?: boolean;\n    models: CardModel[];\n    isSuggested?: (index: number) => boolean | undefined;\n    isSelected?: (index: number) => boolean;\n    blink?: number;\n    zIndex?: number;\n    offsetTop?: (index: number, models: CardModel[]) => number;\n    offsetLeft?: (index: number) => number;\n    isDrag?: boolean;\n};\n\nconst Card = (props: CardProps) => {\n    const ReRender = () => (\n        <Card\n            {...{\n                ...props,\n                models: props.models.slice(props.index, props.models.length),\n                offsetLeft: () => 0,\n                isSelected: () => false,\n                index: 0,\n                isDrag: isDrag,\n            }}\n        />\n    );\n    if (!props.models.length) {\n        return null;\n    }\n    const model = props.models[props.index];\n    ReRender.displayName = \"ReRender\";\n    const { state, updateGameContext } = useGlobalContext();\n    const pause = React.useContext(PauseContext);\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const isFocused = state.focus.hasCard(model);\n    const [isDrag, setDrag] = React.useState<boolean>(!!props.isDrag);\n    const _isDrag = props.isDrag || isDrag;\n    const [{ opacity }, dragRef, preview] = useDrag({\n        item: { type: \"card\", model: model, render: ReRender() },\n        collect: (monitor) => {\n            return { opacity: monitor.isDragging() ? 1 : 1 };\n        },\n        canDrag: () => model.canClick() && !model.isHidden && (state.hand.currentCard() == null || model.equals(state.hand.currentCard())),\n        begin: () => {\n            setDrag(true);\n            //@todo if other card is still selected, drop it first.\n            if (model.onClick && (!props.isSelected || !props.isSelected(props.index))) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n        end: (_item, monitor) => {\n            setDrag(false);\n            if (!monitor.didDrop()) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n    });\n\n    //Deactivate native dnd preview - it's fast but it's not working on mobile.\n    React.useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, []);\n\n    const getRef = () => (model.canClick() ? dragRef : inputEl);\n    React.useEffect(() => {\n        if (isFocused && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n    }, [isFocused, state.focus.card]);\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        let ele = e.target;\n\n        while (ele && !ele.className.includes(\"card-base\")) {\n            ele = ele.offsetParent;\n        }\n\n        const rect = ele.getBoundingClientRect();\n\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - (ele?.ownerDocument?.defaultView?.pageXOffset || 0),\n                y: e.clientY - (ele?.ownerDocument?.defaultView?.pageYOffset || 0),\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n\n        const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n        //@todo A11Y allow keyboard actions in singleplayer\n        if (model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.inputMode = \"mouse\";\n                }\n            });\n        }\n    };\n\n    const getClassName = () => {\n        const hasSuggestion = (props.isSuggested && props.isSuggested(props.index)) || model.suggestion;\n        let className = `card card-base suit-${model.type.icon}`;\n        className +=\n            (!props.isSelected || !props.isSelected(props.index)) && !isFocused && !hasSuggestion ? ` card-stack-${model.source}` : \"\";\n        className += !_isDrag && props.isSelected && props.isSelected(props.index) && !_isDrag ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += model.canClick() ? \" clickable\" : \"\";\n        className += hasSuggestion && !isFocused ? \" card-suggested\" : \"\";\n        className += isFocused ? \" card-focused\" : \"\";\n        className += props.accepting ? \" card-accepts\" : \"\";\n        return className;\n    };\n\n    const getCardStyle = () => {\n        const style = {\n            opacity: _isDrag ? 0 : opacity,\n            zIndex: (props.zIndex ? props.zIndex : (props.offsetTop && props.offsetTop(props.index, props.models) > 0 ? 1 : 0) * 20) + 1,\n            top: props.offsetTop ? props.offsetTop(props.index, props.models) / 15 + \"em\" : 0,\n            ...model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft(props.index) * 2 + \"em\";\n        }\n\n        if (!model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    };\n\n    const getStackbaseStyle: () => React.CSSProperties = () => {\n        if (!model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    };\n\n    let label = getStackLabel(model.source);\n    label += \": \";\n\n    label += model.isHidden ? \"hidden card\" : model.type.icon + model.face;\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n\n    return (\n        <>\n            <div style={getStackbaseStyle()} className=\"stack-base\">\n                <button\n                    onFocus={() => {\n                        // updateContext((ctx) => {\n                        //     ctx.navigator.update(model.source, props.model);\n                        // });\n                    }}\n                    onBlur={() => {\n                        //updateContext((ctx) => ctx.focus.unsetCard(props.model));\n                    }}\n                    style={getCardStyle()}\n                    // ref={inputEl}\n                    ref={getRef()}\n                    className={getClassName()}\n                    onClick={onClick}\n                    disabled={!model.canClick() || pause.state.paused}\n                    tabIndex={model.canClick() ? 0 : -1}\n                    aria-label={label}\n                    title={label}\n                >\n                    <CardFirework model={model} />\n                    <div className=\"card-content\">\n                        {model.isHidden || pause.state.paused ? (\n                            <div className=\"card-back\">&nbsp;</div>\n                        ) : (\n                            <div className=\"card-grid-container\">\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-left\">{model.face}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div className=\"mainface\">\n                                    <div className=\"align-center\">{model.face} </div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-right\">{model.face}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </button>\n            </div>\n            {props.models.length - 1 > props.index && <Card {...props} isDrag={_isDrag} index={props.index + 1} />}\n        </>\n    );\n};\n\nexport default Card;\n","import GameModes from \"../../GameModes\";\nimport { IStack } from \"../../Model/Game/Stack\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst StackBase = (props: { model: IStack; children?: any | null }) => {\n    let classname = \"card-base socket\";\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        if (state.focus.hasStack(props.model.source) && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            const current = inputEl && inputEl.current ? inputEl.current : null;\n            current && current.focus();\n        }\n    });\n    if (!props.model.stack.length) {\n        if (props.model.blinkFor) {\n            classname += \" socket-blink\";\n        } else if (state.focus.hasStack(props.model.source)) {\n            classname += \" socket-focused\";\n        } else {\n            classname += \" socket-empty\";\n        }\n    } else {\n        classname += \" socket-full\";\n    }\n\n    if (props.model.suggestion && !props.model.stack.length) {\n        classname += \" socket-suggested\";\n    }\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": empty socket\";\n\n    return (\n        <button\n            onFocus={() => {\n                // updateContext((ctx) => {\n                //     ctx.navigator.update(props.model.parent);\n                // });\n            }}\n            onBlur={() => {\n                // updateContext((ctx) => ctx.focus.unsetStack(props.model.parent));\n            }}\n            ref={inputEl}\n            className={classname}\n            onClick={onClick}\n            disabled={!!props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n            aria-label={label}\n            title={label}\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import { IStack } from \"../../Model/Game/Stack\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\n\ntype _selector = (model: Model) => IStack;\n\nconst useBlinkEffect = (selector: _selector) => {\n    const { updateContext, state } = useGlobalContext();\n    const model = selector(state);\n    let timeout: any = null;\n    React.useEffect(() => {\n        if (state && selector(state).blinkFor) {\n            timeout = setTimeout(\n                () =>\n                    updateContext((state: Model) => {\n                        selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [state, model.blinkFor]);\n};\n\nexport default useBlinkEffect;\n","import Card from \"./Card\";\nimport FoundationStack from \"../../Model/Game/FoundationStack\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\nimport useGlobalContext from \"../GlobalContext\";\n\ntype FoundationProps = { index: number; model: FoundationStack };\n\nconst FoundationStacks = () => {\n    const { state } = useGlobalContext();\n    return (\n        <>\n            {state.foundation.stacks.map((foundation, index) => (\n                <Foundation key={index} model={foundation} index={index} />\n            ))}\n        </>\n    );\n};\n\nexport default FoundationStacks;\n\nconst Foundation = (props: FoundationProps) => {\n    useBlinkEffect((model) => model.foundation.stacks[props.index]);\n    const { updateGameContext, state } = useGlobalContext();\n    const model = props.model;\n    const [, drop] = useDrop({\n        accept: \"card\",\n        canDrop: (item: any) => {\n            return props.model.accepts(item.model);\n        },\n        drop: () => {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n    const cards = state.hand.source == model.source ? [...model.stack, ...state.hand.stack] : [...model.stack];\n    return (\n        <div className=\"board-field\" key={props.index} ref={drop}>\n            <StackBase model={model}>\n                <div className={\"align-center foundation-base suit-\" + model.icon}>{model.icon}</div>\n            </StackBase>\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={model.blinkFor}\n                isSuggested={(index) => model.suggestion && model.stack.length - 1 == index}\n                isSelected={(index) => index > model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import PauseContext from \"../../Game/PauseContext\";\nimport React from \"react\";\n\nconst Clock = () => {\n    const { state, getElapsed } = React.useContext(PauseContext);\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (state.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [state.started, state.paused]);\n\n    return !state.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Hearts = () => {\n    const { state } = useGlobalContext();\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode == \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Hint = () => {\n    const { state, updateContext } = useGlobalContext();\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import React from \"react\";\nimport { toast } from \"react-toastify\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Points = () => {\n    const { state } = useGlobalContext();\n    const showToast = () => {\n        toast.info(\n            <ul>\n                {state.game.rating.ratings.reverse().map((rating, index) => (\n                    <li key={index}>\n                        {rating.points} - {rating.text}\n                    </li>\n                ))}\n            </ul>,\n            { autoClose: false }\n        );\n    };\n    return (\n        <div>\n            <button title=\"Points\" onClick={showToast}>\n                <span className=\"icon\">🏆</span>\n            </button>\n            {state?.game.rating.points}\n        </div>\n    );\n};\n\nexport default Points;\n","import { BoardContext } from \"../../Game/BoardContext\";\nimport PauseContext from \"../../Game/PauseContext\";\nimport React from \"react\";\n\nconst ToggleMenu = () => {\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n\n    return (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Undo = () => {\n    //@todo use gamestate token to avoid double processing\n    const { state, replaceContext } = useGlobalContext();\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"./Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons header-right\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src, state.tableau.getTop(index));\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover(state.tableau.getTop(index));\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: any) => (state: Model) => {\n        if (dealt != state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt != state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                if (newCard) {\n                    newCard.source = tableau.stacks[i].source;\n                    if (stack.length == tableau.stacks.length - 1 - i) {\n                        newCard.isHidden = false;\n                    }\n                    tableau.deal(newCard, i);\n                    this.dealt++;\n                    this.dealingAt++;\n                    if (this.dealingAt == tableau.stacks.length) {\n                        this.dealingAt = 0;\n                    }\n                    this.isDealt = false;\n                }\n                return;\n            } else {\n                const isFirst = this.dealingAt == 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n    }\n\n    validSettings = () => this.settings.launchSettings.inputMode !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack == stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && this.card && card && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack == stack;\n}\n","import Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport interface IStack {\n    source: string;\n    stack: Card[];\n    getTop: () => Card | null;\n    getClickable: () => Card[];\n    clickEmpty: (p: any) => (s: any) => void;\n    blinkFor: number;\n    unblink: (model: Model) => void;\n    suggestion: boolean;\n    accepts: (card: Card | null) => boolean;\n}\n\nabstract class BasicStack implements IStack {\n    source: string;\n    constructor(source: string) {\n        this.source = source;\n    }\n    suggestion = false;\n    stack: Card[] = [];\n    getTop: () => Card | null = () => (this.stack && this.stack.length && this.stack[this.stack.length - 1]) || null;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n    blinkFor = 0;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick = (a: any) => (s: any) => {};\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    clickEmpty = (a: any) => (s: any) => {};\n    unblink: (model: Model) => void = () => {};\n    abstract accepts: (card: Card | null) => boolean;\n}\nexport default BasicStack;\n","import BasicStack from \"./Stack\";\nimport Hand from \"./Hand\";\n\nabstract class HandHoldingStack extends BasicStack {\n    hand: Hand;\n    constructor(source: string, hand: Hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source == this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n}\n\nexport default HandHoldingStack;\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { Suit } from \"../Deck/Suits\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nexport default class FoundationStack extends HandHoldingStack {\n    constructor(source: string, hand: Hand, suit: Suit) {\n        super(source, hand);\n        this.acceptedCards = [...getFoundationOrder()];\n        this.usedCards = [];\n        this.icon = suit.icon;\n        this.color = suit.color;\n    }\n    acceptedCards: string[] = [];\n    usedCards: any[] = [];\n    icon = \"\";\n    color = \"\";\n    getCurrentAccepted = () => {\n        return this.acceptedCards[this.acceptedCards.length - 1];\n    };\n    accepts = (card: Card | null) => {\n        if (!card) return false;\n        const currentAccepted = this.getCurrentAccepted();\n        return this.icon == card.type.icon && currentAccepted == card.face;\n    };\n    setOnClick = (onClick: (c: any, p: any) => (s: any) => void, hand: Hand) => {\n        this.clickEmpty = (p) => onClick(null, p);\n        const cards = this.source == hand.source ? [...this.stack, ...hand.stack] : this.stack;\n        cards.forEach((card, sindex) => {\n            card.onClick = (p: any) => onClick({ ...card }, p);\n            card.canClick = () => sindex == cards.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n}\n","import Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\n\nexport default class MultiStack<T extends HandHoldingStack> {\n    stacks: T[];\n    settings: Settings;\n    hand: Hand;\n    constructor(settings: Settings, hand: Hand, stacks: T[]) {\n        this.stacks = stacks;\n        this.settings = settings;\n        this.hand = hand;\n    }\n}\n","import Card from \"../Deck/Card\";\nimport FoundationStack from \"./FoundationStack\";\nimport Hand from \"./Hand\";\nimport MultiStack from \"./MultiStack\";\nimport Settings from \"./Settings\";\nimport Suits from \"../Deck/Suits\";\n\nexport default class Foundation extends MultiStack<FoundationStack> {\n    constructor(settings: Settings, hand: Hand) {\n        super(settings, hand, [\n            ...Object.keys(Suits)\n                .map((key: string) => Suits[key])\n                .map((suit, index) => new FoundationStack(\"foundation-\" + index, hand, suit)),\n        ]);\n    }\n\n    setOnClick = (onClick: (c: any, p: any, index: number) => (s: any) => void) => {\n        this.stacks.forEach((stack, index) => {\n            stack.setOnClick((c: any, p: any) => onClick(c, p, index), this.hand);\n        });\n    };\n\n    getCurrentAccepted = (index: number) => {\n        return this.stacks[index].getCurrentAccepted();\n    };\n\n    wouldAcceptHand = (index: number) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    accepts = (index: number, card: Card | null) => {\n        return this.stacks[index].accepts(card);\n    };\n\n    add = (index: number, cards: Card[]) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index: number, card: Card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return (card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop()) || null;\n    };\n\n    getPreviousUsed = (index: number) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => f.stack.length).reduce((a, b) => a + b, 0);\n\n    getTop = (index: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig: Foundation, hand: Hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new FoundationStack(origStack.source, hand, origStack);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src, state.foundation.getTop(index));\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card | null, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.face) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport interface AppliedRating {\n    points: number;\n    text: string;\n}\n\nexport interface AppliedRatingWithId extends AppliedRating {\n    id: number;\n}\n\nexport default class Rating {\n    settings: Settings;\n    points: number;\n    multiplicator: number;\n    ratings: AppliedRating[];\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n        this.ratings = [];\n    }\n\n    applyRating = (points: number, text: string) => {\n        console.debug(\"RATING:\", text);\n        this.ratings.push({ points, text });\n    };\n\n    registerMove = (target: string, source: string, card: Card | null) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove, card);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode == \"single\" && this.settings.launchSettings.recyclingMode == \"infinite\") {\n            if (this.points > 0) {\n                let diff = 0;\n                if (this.points < 100) {\n                    diff = this.points * -1;\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                    diff = -100;\n                }\n                this.applyRating(diff, `subtract ${diff} (max 100 points) for RECYCLE`);\n            }\n        }\n    };\n\n    registerUncover = (card: Card | null) => {\n        this.registerHint(this.settings.disableHint());\n        card && card.setSuccess(5);\n        this.points += 5;\n        this.applyRating(5, \"add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on: boolean) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, \"subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other: Rating) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            this.applyRating(penalty * -1, `applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done: boolean) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, `applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move: { source: string; target: string }, card: Card | null) {\n        const isTableau = (obj: string) => obj.substr(0, 7) == \"tableau\";\n        const isFoundation = (obj: string) => obj.substr(0, 10) == \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE tableau -> foundation\");\n                card && card.setSuccess(10);\n                return 10;\n            }\n        } else if (move.source == \"waste\") {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE waste -> foundation\");\n                card && card.setSuccess(10);\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                this.applyRating(5, \"add 5 points for MOVE waste -> tableau\");\n                card && card.setSuccess(5);\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                this.applyRating(-15, \"subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start: number, end: number) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    };\n\n    static copy = (orig: Rating) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        copy.ratings = [...orig.ratings];\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./Stack\";\nimport Model from \"../Model\";\n\nexport default class TimeMachine {\n    previousStates: Model[];\n    memorable: boolean;\n    modified: boolean;\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source == target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state: any) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id: number, current: any) => {\n        const isRequested = this.previousStates.length - 1 == id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        if (on) {\n            this.modified = true;\n            this.memorable = false;\n        }\n    }\n\n    stackEquals = (a: IStack, b: IStack) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden == b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a: { stacks: IStack[] }, b: { stacks: IStack[] }) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a: Model, b: Model) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig: TimeMachine) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Rating from \"./Rating\";\nimport Settings from \"./Settings\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    settings: Settings;\n    rating: Rating;\n    timemachine: TimeMachine;\n    paused: any;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n    }\n\n    registerMove = (target: string, source: string, card: Card | null) => {\n        this.rating.registerMove(target, source, card);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = (card: Card | null) => {\n        this.rating.registerUncover(card);\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig: Game) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        copy.paused = orig.paused;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./Stack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    filter: (stack: any[]) => Card[] = (stack) => {\n        return stack.filter((c) => c);\n    };\n\n    pickUp = (stack: (Card | null)[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = this.filter(stack).map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source == model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.face == \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source == this.source) || null;\n\n    isFromWaste = () => this.source && this.source == \"waste\" || false;\n\n    isFromFoundation = (index: number) => this.source && this.source == `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source == `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) == \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/Stack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: (IStack | undefined)[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source == pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x == -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x == 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        const current = this.current();\n        if (current == undefined) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = current.getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y == 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const current = this.current();\n        const last: number = current ? current.getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (!current) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current()?.source || \"\");\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = (before: { card: Card | null; stack: string }) => {\n        const clickable = this.current()?.getClickable();\n        if (\n            this.model.focus.card &&\n            this.model.focus.card.canClick() &&\n            clickable &&\n            clickable[this.currentIndex.z] &&\n            clickable[this.currentIndex.z].face == this.model.focus.card.face &&\n            clickable[this.currentIndex.z].type.icon == this.model.focus.card.type.icon\n        ) {\n            return (ctx: Model) => {\n                if (this.model.focus.card && this.model.focus.card.equals(before.card)) {\n                    this.model.focus.card.onClick({ isKeyboard: true })(ctx);\n                }\n            };\n        } else if (this.model.focus.stack && this.model.focus.stack == before.stack) {\n            return (ctx: Model) => {\n                this.current()?.clickEmpty({ isKeyboard: true })(ctx);\n            };\n        } else {\n            //this is the entry point in case user starts keyboard nav with action button\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./Stack\";\nimport Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Stock extends BasicStack {\n    settings: Settings;\n    recyclings: number;\n    passes: number;\n    constructor(stack: Card[], settings: Settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        if (this.settings.launchSettings.recyclingMode == \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode == \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick: (c: any, p: any, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: any) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n    };\n    accepts = () => false;\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode == \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode == \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste: Card[]) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card: Card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card: Card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result: Card[] = [];\n        if (this.settings.launchSettings.drawMode == \"single\") {\n            const top = this.stack.pop();\n            if (top) result = [top];\n        }\n        if (this.settings.launchSettings.drawMode == \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length == 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig: Stock) => {\n        const copy = new Stock([], orig.settings);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\", state.waste.getTop());\n    };\n\n    recycleWaste = (state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\", state.waste.getTop())) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key == SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key == SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length == 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length == 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].face ==\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].face &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (\n                            this.getPutdownSuggestions(tableauState, true) >\n                            (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)\n                        ) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nexport default class TableauStack extends HandHoldingStack {\n    id = 0;\n    accepts = (current: Card | null) => {\n        const top = this.getTop();\n        if (!top) {\n            return (current && current.face === \"K\") || false;\n        }\n        if (this.source == current?.source) return true;\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = current ? range.indexOf(current.face) : 0;\n        const topIndex = range.indexOf(top.face);\n        return currentIndex + 1 == topIndex && current?.type.color !== top.type.color && top.face !== \"A\";\n    };\n    getTop = (offset?: number) => this.stack[this.stack.length - 1 - (offset || 0)];\n    canUncover = (card: Card) => {\n        const top = this.getTop();\n        return top.isHidden && card && card.equals(this.getTop());\n    };\n    setOnClick = (onClick: (a: any, b: any) => (s: any) => void, onClickhidden: (a: any, b: any) => (s: any) => void) => {\n        this.clickEmpty = (p: any) => onClick(null, p);\n        const cards = this.source == this.hand.source ? [...this.stack, ...this.hand.stack] : this.stack;\n        cards.forEach((card, sindex) => {\n            const click = card.isHidden && sindex == cards.length - 1 ? onClickhidden : onClick;\n            card.onClick = (p: any) => click({ ...card }, p);\n            card.canClick = () => !card.isHidden || (this.canUncover(card) && !this.hand.currentCard()) || false;\n        });\n        this.hand.setOnClick(this);\n    };\n    static copy = (orig: TableauStack) => {\n        const s = new TableauStack(orig.source, orig.hand);\n        s.id = orig.id;\n        s.stack = Card.copyAll(orig.stack);\n        return s;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport MultiStack from \"./MultiStack\";\nimport Settings from \"./Settings\";\nimport TableauStack from \"./TableauStack\";\n\nexport default class Tableau extends MultiStack<TableauStack> {\n    constructor(settings: Settings, hand: Hand) {\n        super(\n            settings,\n            hand,\n            [0, 1, 2, 3, 4, 5, 6].map((id) => {\n                const s = new TableauStack(\"tableau-\" + id, hand);\n                s.id = id;\n                return s;\n            })\n        );\n    }\n\n    setOnClick = (\n        onClick: (a: any, b: any, index: number) => (s: any) => void,\n        onClickhidden: (a: any, b: any, index: number) => (s: any) => void\n    ) => {\n        this.stacks.forEach((stack, index) => {\n            stack.setOnClick(\n                (a: any, b: any) => onClick(a, b, index),\n                (a: any, b: any) => onClickhidden(a, b, index)\n            );\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    //@todo when putting back hand, no entropy is observed\n\n    putDownHand = (index: number) => this.add(index, this.hand.source, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        if (!current) return false;\n        return this.stacks[index].accepts(current);\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        return this.stacks[index].canUncover(card);\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy != 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, source: string, cards: Card[]) => {\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number) => {\n        card.source = this.stacks[index].source;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].getTop(offset);\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map(TableauStack.copy);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\n\nexport default class Waste extends HandHoldingStack {\n    settings: Settings;\n    constructor(settings: Settings, hand: Hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n    }\n\n    setOnClick = (onClick: (c: any, p: any, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        const cards = this.source == this.hand.source ? [...this.stack, ...this.hand.stack] : this.stack;\n        cards.forEach((card, index) => {\n            card.onClick = (p: any) => onClick({ ...card }, p, null);\n            card.canClick = () => index == cards.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card: Card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards: Card[]) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card: Card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    accepts = (card: Card | null) => this.canAdd(card) || false;\n\n    canAdd = (card: Card | null) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card: Card) => (card && card.equals(this.getTop()) && this.stack.pop()) || null;\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig: Waste, hand: Hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Card from \"./Deck/Card\";\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport { IStack } from \"./Game/Stack\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n    token: number;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n        this.token = obj.token;\n    }\n\n    setToken = (token: number) => {\n        this.token = token;\n    };\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    _hasSuggestion = (obj: any) => {\n        return obj.suggestion || (obj.stack && obj.stack.some(this._hasSuggestion)) || (obj.stacks && obj.stacks.some(this._hasSuggestion));\n    };\n\n    hasSuggestions = () => {\n        return (\n            this._hasSuggestion(this.waste) ||\n            this._hasSuggestion(this.stock) ||\n            this._hasSuggestion(this.tableau) ||\n            this._hasSuggestion(this.foundation)\n        );\n    };\n\n    canAutoSolve = () => {\n        return (\n            this.waste.stack.length == 0 &&\n            this.stock.stack.length == 0 &&\n            this.tableau.stacks.every((s) => s.stack.every((c) => !c.isHidden))\n        );\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    clearSuccess = (card: Card) => {\n        const clear = (c: Card, s: IStack) => {\n            s.stack.forEach((_c) => {\n                if (_c.equals(c)) {\n                    _c.success = 0;\n                }\n            });\n        };\n        clear(card, this.stock);\n        clear(card, this.waste);\n        this.foundation.stacks.forEach((s) => clear(card, s));\n        this.tableau.stacks.forEach((s) => clear(card, s));\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()));\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings),\n            token: 0,\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n            token: state.token,\n        });\n    };\n}\n","//- auto-resolver\n//  - check if the board can auto-resolve and offer to complete automatically\n//  - auto-complete becomes button in header and option in menu\n\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst AutoSolve = (props: { canAutosolve: boolean }) => {\n    const [solving, setSolving] = React.useState(false);\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        if (props.canAutosolve) {\n            updateGameContext((ctx) => (ctx.settings.suggestionMode = SuggestionModes.get(SuggestionModes.NONE)));\n            setSolving(true);\n        }\n    }, [props.canAutosolve]);\n    const canSolve = solving && state.settings.suggestionMode.key == SuggestionModes.NONE;\n    return !canSolve ? null : <Solver />;\n};\n\nexport default AutoSolve;\n\n//@todo auto-uncover as feature, in which case action is not undoable\n//@todo also start general confetti firework elements when autosolving\n\nconst Solver = () => {\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            const copy = Model.copy(state).withHandlers();\n            if (copy.hand.currentCard()) {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.foundation)) {\n                    const suggestedFoundations = copy.foundation.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedFoundations.length) {\n                        const suggestedFoundation = suggestedFoundations[0];\n                        updateGameContext(suggestedFoundation.clickEmpty({ isKeyboard: false }));\n                    }\n                }\n            } else {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.tableau)) {\n                    const suggestedTableaus = copy.tableau.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedTableaus.length) {\n                        const suggestedTableau = suggestedTableaus[0];\n                        const suggestedCards = suggestedTableau.stack.filter((c) => c.suggestion);\n                        if (suggestedCards.length) {\n                            const suggestedCard = suggestedCards[0];\n                            updateGameContext(suggestedCard.onClick({ isKeyboard: false }));\n                        }\n                    }\n                }\n            }\n        }, 150);\n\n        return () => clearTimeout(timeout);\n    });\n    return null;\n};\n","import { ToastContentProps, toast } from \"react-toastify\";\n\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst useEvaluation: (mode: string, token: number) => [number, () => void] = (mode, token) => {\n    const { state } = useGlobalContext();\n    const [falseResults, setFalseResults] = React.useState<number>(0);\n    const reset = () => setFalseResults(0);\n    React.useEffect(() => {\n        const copy = Model.copy(state);\n        copy.settings.suggestionMode = SuggestionModes.get(mode);\n        copy.suggestor.evaluateOptions(copy);\n        if (copy.hasSuggestions()) {\n            if (falseResults !== 0) {\n                setFalseResults(0);\n            }\n        } else {\n            setFalseResults(falseResults + 1);\n        }\n    }, [token]);\n    return [falseResults, reset];\n};\n\nconst Evaluator = (props: { token: number }) => {\n    const { state } = useGlobalContext();\n    const [full, resetFull] = useEvaluation(SuggestionModes.FULL, props.token);\n    const [regular, resetRegular] = useEvaluation(SuggestionModes.REGULAR, props.token);\n    const [noRegularSince, setNoRegularSince] = React.useState<number>(0);\n    const [noFullSince, setNoFullSince] = React.useState<number>(0);\n    //@todo move this to a generic place, also detect failure\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    // const tryDetectEnd = (state: Model) => {\n    //     const nrofCards = state.foundation.countCards();\n    //     if (nrofCards === 52) {\n    //         state.game.isEnded = true;\n    //         state.game.end = Date.now();\n    //     }\n    // };\n    React.useEffect(() => {\n        if (!state.hand.currentCard()) {\n            console.log(full, regular);\n\n            if (full > 0 && regular > 0) {\n                if (noFullSince >= 0) {\n                    //@todo we need full blown menu here, not just a toast.\n                    toast.error(\n                        (props: ToastContentProps) => (\n                            <div>\n                                <div>😢 looks like the game is over</div>\n                                <div></div>\n                                <div>\n                                    <button\n                                        onClick={() => {\n                                            setNoFullSince(-3);\n                                            props.closeToast && props.closeToast();\n                                        }}\n                                    >\n                                        Keep trying\n                                    </button>\n                                    <button onClick={() => alert(\"@todo\")}>Restart</button>\n                                    <button onClick={() => alert(\"@todo\")}>Give up</button>\n                                </div>\n                            </div>\n                        ),\n                        { autoClose: false, closeButton: false }\n                    );\n                }\n                setNoFullSince(noFullSince + 1);\n                resetFull();\n            } else if (regular > 0 && full == 0) {\n                if (state.settings.suggestionMode.key !== SuggestionModes.FULL && noRegularSince >= 0) {\n                    // toast.warn((props: ToastContentProps) => (\n                    //     <div>\n                    //         <div>😢 looks like youre stuck here. Have you tried enabling full suggestions?</div>\n                    //         <div></div>\n                    //         <div>\n                    //             <button>Enable</button>\n                    //             <button\n                    //                 onClick={() => {\n                    //                     setNoRegularSince(-2);\n                    //                     props.closeToast && props.closeToast();\n                    //                 }}\n                    //             >\n                    //                 Maybe Later\n                    //             </button>\n                    //             <button>Dont ask again</button>\n                    //         </div>\n                    //     </div>\n                    // ));\n                }\n                resetRegular();\n\n                setNoRegularSince(noRegularSince + 1);\n            }\n        }\n    }, [full, regular, state.hand.currentCard()]);\n    return null;\n};\n\nexport default Evaluator;\n","import AutoSolve from \"./AutoSolve\";\nimport Evaluator from \"./Evaluator\";\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst Judge = () => {\n    //- one checks a context from outside for final status\n    //  - check if other player won\n    //  - check if other player gave up\n    //- the other analyses the game and reports to context\n    //  - check if current player won\n    //  - check if there are no more valid options and offer to give up\n\n    const { state } = useGlobalContext();\n\n    return (\n        <>\n            <Evaluator token={state.token} />\n            <AutoSolve canAutosolve={state.canAutoSolve()} />\n        </>\n    );\n};\n\nexport default Judge;\n","import \"./StartScreen/Menu.scss\";\n\nimport { Universal, getKeyboardLayout } from \"../../common/KeyboardLayouts\";\nimport useNavigationContext, { NavigationProvider, NavigationState } from \"./StartScreen/NavigationContext\";\n\nimport { BoardContext } from \"../Game/BoardContext\";\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GameModes from \"../../GameModes\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport PauseContext from \"../Game/PauseContext\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst _Menu = () => {\n    const [navigation, setNavigation] = React.useState<NavigationState>({\n        menu: {\n            x: 0,\n            y: 0,\n        },\n        screen: {\n            x: 0,\n            y: 0,\n        },\n        focus: \"menu\",\n        mainMenu: \"\",\n        screeen: \"\",\n    });\n    const navigationContext = {\n        navigation,\n        setNavigation,\n    };\n    return (\n        <NavigationProvider value={navigationContext}>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = useGlobalContext();\n    const pause = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too if consented and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = useNavigationContext();\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining == 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining == 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) [(announcement = \"The game is not paused.\")];\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle label=\"😴\" />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle label=\"😴\" />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon=\"▶️\"\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                        />\n                        <MenuButton\n                            icon=\"🌪️\"\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            toggled={navigation.mainMenu == \"entropy\"}\n                        >\n                            <MenuButton\n                                icon=\"🌪️\"\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                            />\n                            <MenuButton\n                                icon=\"🌬️\"\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon=\"♻️\"\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon=\"🗑️\" title=\"Quit Game\" onClick={() => restart()} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import React from \"react\";\n\nconst usePrevious = <T>(value: T) => {\n    const ref = React.useRef<T>();\n    React.useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n","import Card from \"./Card\";\nimport PauseContext from \"./PauseContext\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePrevious from \"./usePrevious\";\n\nconst Renderer = (props: { length: number; paused: boolean; started: number }) => {\n    const context = useGlobalContext();\n\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout: any = null;\n        if (\n            context.state.settings.launchSettings.speed &&\n            started &&\n            !paused &&\n            previous &&\n            (previous?.length != length || previous?.started != started || previous?.paused != paused)\n        ) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (\n                        length == state.stock.stack.length &&\n                        state.stock.passes > 0 &&\n                        (state.stock.stack.length || state.waste.stack.length)\n                    ) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => clearTimeout(timeout);\n    }, [length, paused, started]);\n\n    if (!context || !context.state) return null;\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            <Card\n                index={0}\n                key={0}\n                models={context.state.stock.stack}\n                offsetTop={(index) => (index / 2) * -1}\n                zIndex={0}\n                blink={context?.state?.stock.blinkFor}\n                isSuggested={(index) => context?.state?.stock.suggestion && index == context.state.stock.stack.length - 1}\n            />\n        </div>\n    );\n};\n\nconst Stock = () => {\n    const { state } = useGlobalContext();\n    useBlinkEffect((model) => model.stock);\n    const pause = React.useContext(PauseContext);\n    const { paused, started } = pause.state;\n    return <Renderer length={state.stock.stack.length} paused={paused} started={started} />;\n};\n\nexport default Stock;\n","import Card from \"./Card\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport TableauModel from \"../../Model/Game/Tableau\";\nimport TableauStack from \"../../Model/Game/TableauStack\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\nimport useGlobalContext from \"../GlobalContext\";\n\ntype TableauProps = { index: number; model: TableauStack; parent: TableauModel };\n\nconst TableauStacks = () => {\n    const { state } = useGlobalContext();\n    return (\n        <>\n            {state.tableau.stacks.map((tableau, index) => (\n                <Tableau key={index} index={index} model={tableau} parent={state.tableau} />\n            ))}\n        </>\n    );\n};\nexport default TableauStacks;\n\nconst Tableau = (props: TableauProps) => {\n    useBlinkEffect((s) => s.tableau.stacks[props.index]);\n    const [accepting, setAccepting] = React.useState<boolean>(false);\n    const { updateGameContext, state } = useGlobalContext();\n    const [, drop] = useDrop({\n        accept: \"card\",\n        canDrop: (item: any) => {\n            const accepts = props.model.accepts(item.model);\n            setAccepting(accepts);\n            return accepts;\n        },\n        drop: () => {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n\n    const cards = state.hand.source == props.model.source ? [...props.model.stack, ...state.hand.stack] : [...props.model.stack];\n\n    let offset = 1;\n    const getOffset = (index: number, cards: CardModel[]) => {\n        for (let i = 0; i <= index; i++) {\n            if (cards[i] && !cards[i].isHidden) {\n                offset = i * 12 + (index - i) * 24;\n                return offset;\n            }\n        }\n        offset = index * 12;\n        return offset;\n    };\n\n    return (\n        <div className=\"board-field\" ref={drop}>\n            <StackBase model={props.model} />\n            <Card\n                index={0}\n                key={0}\n                accepting={accepting}\n                models={cards}\n                blink={props.model.blinkFor}\n                isSuggested={(index) => props.model.suggestion && props.model.stack.length - 1 == index}\n                offsetTop={(index, models) => getOffset(index, models)}\n                isSelected={(index) => index > props.model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import Card from \"./Card\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst Waste = () => {\n    const { state, updateGameContext } = useGlobalContext();\n    useBlinkEffect((model) => model.waste);\n    const getOffset = (index: number) => {\n        if (state.settings.launchSettings.drawMode == \"single\") {\n            return 0;\n        }\n        const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n        let additionalOffset = 2;\n        if (length == 2) {\n            additionalOffset = 1;\n        }\n\n        if (length == 1) {\n            additionalOffset = 0;\n        }\n\n        return ((index - length - 2) % 3) + additionalOffset;\n    };\n\n    const [, _drop] = useDrop({\n        accept: \"card\",\n        // eslint-disable-next-line no-unused-vars\n        canDrop: () => {\n            const accepts = state.hand.isFromWaste();\n            //setAccepting(accepts);\n            return accepts;\n        },\n        drop: () => {\n            updateGameContext(state.waste.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n\n    const cards = state?.hand.source == state.waste.source ? [...state.waste.stack, ...state.hand.stack] : [...state.waste.stack];\n\n    return (\n        <div className=\"board-field\" ref={_drop}>\n            <StackBase model={state.waste} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                offsetTop={(index) => (index / 2) * -1}\n                offsetLeft={(index) => getOffset(index)}\n                blink={state.waste.blinkFor}\n                isSuggested={(index) => state.waste.suggestion && index == state.waste.stack.length - 1}\n                isSelected={(index) => index > state.waste.stack.length - 1}\n            />\n        </div>\n    );\n};\nexport default Waste;\n","import \"./Board.scss\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nimport { Slide, ToastContainer } from \"react-toastify\";\n\nimport BoardNavigator from \"./Navigation/BoardNavigator\";\nimport Dealer from \"./Dealer\";\nimport DndPreview from \"../../common/DndPreview\";\nimport FoundationStacks from \"./Foundation\";\nimport Header from \"../UI/Header/Header\";\nimport Judge from \"./Judge\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport TableauStacks from \"./Tableau\";\nimport Waste from \"./Waste\";\n\ntype BoardProps = { mode: string };\nconst Board = (props: BoardProps) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n    return (\n        <>\n            <Menu />\n            <Header mode={props.mode} />\n            <ToastContainer\n                style={{ zIndex: 8888 }}\n                position=\"top-center\"\n                closeOnClick={false}\n                newestOnTop={true}\n                limit={1}\n                pauseOnFocusLoss={false}\n                draggable={false}\n                transition={Slide}\n            />\n            <div className={\"board-jail \" + props.mode}>\n                <div className={\"board-grid-container \" + props.mode}>\n                    <Stock />\n                    <Waste />\n                    <div className=\"board-field spacer\" ref={ref}>\n                        {ref.current && <DndPreview reff={ref.current} />}\n                    </div>\n                    <FoundationStacks />\n                    <TableauStacks />\n                </div>\n            </div>\n            <Dealer />\n            <BoardNavigator />\n            <Judge />\n        </>\n    );\n};\n\nexport default Board;\n","import \"./Screens.scss\";\n\nimport PauseContext from \"../Game/PauseContext\";\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst EndScreen = () => {\n    const { state, restart } = useGlobalContext();\n    const pause = React.useContext(PauseContext);\n    //@todo show launch settings (draw mode, recycling mode)\n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport {BoardProvider} from \"./BoardContext\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../GlobalContext\";\nimport React from \"react\";\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\n//We use class component here because setState allows partial updates\nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                state.setToken(Math.random());\n                return state;\n            }\n\n            return null;\n        });\n\n    //on every render, we refresh the click handlers in the model and the suggestions\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider value={{ player: this.props.player }}>\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n","import GameContext, { IGameState, defaultGameState } from \"./GameContext\";\n\nimport AspectRatio from \"../../common/AspectRatio/AspectRatio\";\nimport BoardWrap from \"./BoardWrap\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport DelayedSuspense from \"../../common/DelayedSuspense\";\nimport GameModes from \"../../GameModes\";\nimport { LaunchSettings } from \"../../Common\";\nimport { PauseProvider } from \"./PauseContext\";\nimport Ratios from \"../../common/AspectRatio/Ratios\";\nimport React from \"react\";\n\ninterface GameProps {\n    launchState: LaunchSettings;\n    deck: Deck;\n    restart: () => void;\n}\n\nconst SinglePlayer = (props: GameProps) => {\n    const { launchState, deck, restart } = props;\n    return (\n        <AspectRatio ratio={Ratios._4to3}>\n            <div className={\"layout-grid-container singleplayer\"}>\n                <BoardWrap player={0} settings={launchState} restart={restart} deck={deck} />\n            </div>\n        </AspectRatio>\n    );\n};\n\nconst SplitScreen = (props: GameProps) => {\n    const { launchState, deck, restart } = props;\n\n    return (\n        <div className=\"game-layout-container splitscreen\">\n            <div className={\"layout-grid-container \" + launchState.boardMode}>\n                <BoardWrap\n                    player={0}\n                    settings={{ ...launchState, inputMode: launchState.players[0].inputMethod }}\n                    restart={restart}\n                    deck={deck.copy()}\n                />\n            </div>\n\n            <div className={\"layout-grid-container \" + launchState.boardMode}>\n                <BoardWrap\n                    player={1}\n                    settings={{ ...launchState, inputMode: launchState.players[1].inputMethod }}\n                    restart={restart}\n                    deck={deck.copy()}\n                />\n            </div>\n        </div>\n    );\n};\n\nconst Game = (props: GameProps) => {\n    const [gameState, setGameState] = React.useState<IGameState>(defaultGameState);\n    const context = {\n        gameState,\n        win: (player: number) => setGameState({ ...gameState, end: Date.now(), isEnded: true, winner: player }),\n        start: () => setGameState({ ...gameState, started: Date.now() }),\n    };\n    return (\n        <GameContext.Provider value={context}>\n            <PauseProvider started={gameState.started}>\n                <DelayedSuspense delay={500} fallback={<h3>Loading...</h3>}>\n                    {props.launchState.boardMode == GameModes.SINGLEPLAYER && <SinglePlayer {...props} />}\n                    {props.launchState.boardMode == GameModes.VERSUS && <SplitScreen {...props} />}\n                </DelayedSuspense>\n            </PauseProvider>\n        </GameContext.Provider>\n    );\n};\n\nexport default Game;\n"],"sourceRoot":""}