{"version":3,"file":"static/js/454.f9635aca.chunk.js","mappings":"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","sources":["View/Context/GameContext.tsx","View/GlobalContext.ts","View/Context/PauseContext.tsx","View/Game/Actors/AutoDealer.tsx","Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/Stack.ts","Model/Game/HandHoldingStack.ts","Model/Game/FoundationStack.tsx","Model/Game/MultiStack.ts","Model/Game/Foundation.ts","Model/Business/Foundation.ts","Model/Game/Rating.ts","Model/Game/TimeMachine.ts","Model/Game/Game.ts","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.ts","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/TableauStack.tsx","Model/Game/Tableau.ts","Model/Game/Waste.ts","Model/Model.ts","View/Game/Actors/AutoSolver.tsx","View/useGlobalTokenEffect.ts","View/Game/Actors/AutoUncoverer.tsx","View/Context/BoardContext.ts","View/Game/Navigation/BoardGamePad.tsx","View/Game/Navigation/BoardKeyboard.tsx","View/Game/Navigation/BoardNavigator.tsx","View/Game/Actors/Dealer.tsx","View/UI/PossibleFailScreen.tsx","View/Game/Actors/FailDetector.tsx","View/Game/Actors/WinDetector.tsx","View/Game/Actors/Actors.tsx","common/DndPreview.tsx","View/Game/Firework.tsx","View/Game/CardFirework.tsx","View/Game/Card.tsx","View/Game/StackBase.tsx","View/Game/Hooks/useBlinkEffect.ts","View/Game/Hooks/useStackDrop.ts","View/Game/Foundation.tsx","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","View/UI/Menu.tsx","View/Game/Stock.tsx","View/Game/Tableau.tsx","View/Game/Waste.tsx","View/Game/Board.tsx","View/UI/EndScreen.js","View/Game/BoardWrap.tsx","View/Game/Game.tsx"],"sourcesContent":["import React from \"react\";\n\nexport interface IGameState {\n    started: number;\n    isEnded: boolean;\n    end: number;\n    winner: number;\n    loser: number;\n}\n\nexport interface IGameContext {\n    gameState: IGameState;\n    win: (player: number) => void;\n    giveUp: (player: number) => void;\n    start: () => void;\n}\n\nexport const defaultGameState = {\n    started: 0,\n    isEnded: false,\n    end: 0,\n    winner: -1,\n    loser: -1,\n};\n\nconst GameContext = React.createContext<IGameContext>({\n    gameState: defaultGameState,\n    win: () => {},\n    start: () => {},\n    giveUp: () => {},\n});\n\nconst useGameContext = () => React.useContext(GameContext);\n\nexport default useGameContext;\n\nexport const GameContextProvider = (props: { children: React.ReactNode }) => {\n    const [gameState, setGameState] = React.useState<IGameState>(defaultGameState);\n    const context = {\n        gameState,\n        win: (player: number) => setGameState({ ...gameState, end: Date.now(), isEnded: true, winner: player }),\n        start: () => setGameState({ ...gameState, started: Date.now() }),\n        giveUp: (player: number) => {\n            // @todo if one user gives up, the other should be allowed to continue to increase points\n            // - this motivates users to employ the undo function to keep trying\n            // @todo show dialog informaing that other user gave up as well\n            // - options: give up + continue\n            // @todo track \"givenUp\" status per player\n            // - winner is always the player with more points\n            setGameState({ ...gameState, end: Date.now(), isEnded: true, loser: player });\n        },\n    };\n    return <GameContext.Provider value={context}>{props.children}</GameContext.Provider>;\n};\n","import { StateReplaceFunction, StateUpdateFunction } from \"../Common\";\n\nimport Model from \"../Model/Model\";\nimport React from \"react\";\n\ninterface IGlobalContext {\n    state: Model | null;\n    replaceContext: StateReplaceFunction;\n    updateContext: StateUpdateFunction;\n    updateGameContext: StateUpdateFunction;\n    restart: () => void;\n}\n\ninterface XGlobalContext {\n    state: Model;\n    replaceContext: StateReplaceFunction;\n    updateContext: StateUpdateFunction;\n    updateGameContext: StateUpdateFunction;\n    restart: () => void;\n}\n\nconst useGlobalContext: () => XGlobalContext = () => {\n    const ctx = React.useContext(GlobalContext);\n    if (!ctx.state) {\n        throw new Error(\"no state present\");\n    }\n    return { ...ctx, state: ctx.state };\n};\n\nconst defaultValue = {\n    state: null,\n    replaceContext: () => {},\n    updateContext: () => {},\n    updateGameContext: () => {},\n    restart: () => {},\n};\n\nconst GlobalContext = React.createContext<IGlobalContext>(defaultValue);\n\nexport const Provider = GlobalContext.Provider;\n\nexport default useGlobalContext;\n","import React from \"react\";\nimport useGameContext from \"./GameContext\";\n\nexport interface IPauseState {\n    //started: number;\n    end: number;\n    paused: boolean;\n    pauses: number[];\n    pauseStartedAt: number;\n    allowed: number;\n    isSilent?: boolean;\n    pausedBy: number;\n    showMenu: boolean;\n    showCards: boolean;\n}\nexport interface IPauseContext {\n    state: IPauseState;\n    togglePause: (isPaused: boolean, pausedBy: number) => void;\n    toggleMenu: (show: boolean) => void;\n    getElapsed: () => string;\n}\nexport const defaultPauseState: IPauseState = {\n    end: 0,\n    paused: false,\n    pauses: [],\n    pauseStartedAt: 0,\n    allowed: 5,\n    pausedBy: -1,\n    showMenu: false,\n    showCards: true,\n};\nexport const defaultPauseContext = {\n    state: defaultPauseState,\n    togglePause: () => {},\n    toggleMenu: () => {},\n    getElapsed: () => \"\",\n};\n\nconst PauseContext = React.createContext<IPauseContext>(defaultPauseContext);\n\nexport const PauseProvider = (props: { children: React.ReactNode }) => {\n    const { gameState } = useGameContext();\n    const [paused, setPaused] = React.useState<IPauseState>({ ...defaultPauseState });\n    const getElapsedMs = () => {\n        const pauses = paused.pauses.reduce((a, b) => a + b, 0);\n        return (paused.end || paused.pauseStartedAt || Date.now()) - gameState.started - pauses;\n    };\n\n    const getElapsed = () => {\n        const padleft = (i: number) => ((i + \"\").length === 1 ? \"0\" + i : i);\n        let msec = getElapsedMs();\n        const hh = Math.floor(msec / 1000 / 60 / 60);\n        msec -= hh * 1000 * 60 * 60;\n        const mm = Math.floor(msec / 1000 / 60);\n        msec -= mm * 1000 * 60;\n        const ss = Math.floor(msec / 1000);\n        msec -= ss * 1000;\n        return hh ? hh + \":\" + padleft(mm) + \":\" + padleft(ss) : padleft(mm) + \":\" + padleft(ss);\n    };\n    const togglePause = (isPaused: boolean, pausedBy: number) => {\n        if (paused.showMenu) {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauses: [...paused.pauses, Date.now() - paused.pauseStartedAt],\n                pauseStartedAt: 0,\n                paused: false,\n                showMenu: false,\n                showCards: true,\n            });\n        } else if (paused.pauses.length < paused.allowed) {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauseStartedAt: Date.now(),\n                paused: true,\n                showMenu: true,\n                showCards: false,\n            });\n        } else {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauseStartedAt: 0,\n                paused: false,\n                showMenu: true,\n                showCards: false,\n            });\n        }\n    };\n    const toggleMenu = (show: boolean) => {\n        setPaused({\n            ...paused,\n            showMenu: show,\n            showCards: true,\n        });\n    };\n    const context = {\n        state: { ...paused, started: gameState.started },\n        togglePause,\n        toggleMenu,\n        getElapsed,\n    };\n\n    return <PauseContext.Provider value={context}>{props.children}</PauseContext.Provider>;\n};\n\nconst usePauseContext = () => React.useContext(PauseContext);\n\nexport default usePauseContext;\n","import React from \"react\";\nimport useGameContext from \"../../Context/GameContext\";\nimport useGlobalContext from \"../../GlobalContext\";\nimport usePauseContext from \"../../Context/PauseContext\";\nimport { usePrevious } from \"react-use\";\n\nconst AutoDealerRenderer = (props: { length: number; paused: boolean; started: number }) => {\n    const context = useGlobalContext();\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout: NodeJS.Timeout | null = null;\n        if (\n            context.state.settings.launchSettings.speed &&\n            started &&\n            !paused &&\n            previous &&\n            (previous?.length !== length || previous?.started !== started || previous?.paused !== paused)\n        ) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (\n                        length === state.stock.stack.length &&\n                        state.stock.passes > 0 &&\n                        (state.stock.stack.length || state.waste.stack.length)\n                    ) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => {\n            timeout && clearTimeout(timeout);\n        };\n    }, [context, length, paused, previous, started]);\n\n    return null;\n};\n\nconst AutoDealer = () => {\n    const { state } = useGlobalContext();\n    const pause = usePauseContext();\n    const { gameState } = useGameContext();\n    const { paused } = pause.state;\n    return <AutoDealerRenderer length={state.stock.stack.length} paused={paused} started={gameState.started} />;\n};\n\nexport default AutoDealer;\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src, state.tableau.getTop(index));\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover(state.tableau.getTop(index));\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: (n: number) => void) => (state: Model) => {\n        if (dealt !== state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt !== state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                if (newCard) {\n                    newCard.source = tableau.stacks[i].source;\n                    if (stack.length === tableau.stacks.length - 1 - i) {\n                        newCard.isHidden = false;\n                    }\n                    tableau.deal(newCard, i);\n                    this.dealt++;\n                    this.dealingAt++;\n                    if (this.dealingAt === tableau.stacks.length) {\n                        this.dealingAt = 0;\n                    }\n                    this.isDealt = false;\n                }\n                return;\n            } else {\n                const isFirst = this.dealingAt === 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    player: number;\n    constructor(settings: Settings, player: number) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n        this.player = player;\n    }\n\n    validSettings = () => this.settings.launchSettings.players[this.player].inputMethod !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack === stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack === stack;\n}\n","import Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport interface IStack {\n    source: string;\n    stack: Card[];\n    getTop: () => Card | null;\n    getClickable: () => Card[];\n    clickEmpty: (p: any) => (s: Model) => void;\n    blinkFor: number;\n    unblink: (model: Model) => void;\n    suggestion: boolean;\n    accepts: (card: Card | null) => boolean;\n}\n\nabstract class BasicStack implements IStack {\n    source: string;\n    constructor(source: string) {\n        this.source = source;\n    }\n    suggestion = false;\n    stack: Card[] = [];\n    getTop: () => Card | null = () => (this.stack && this.stack.length && this.stack[this.stack.length - 1]) || null;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n    blinkFor = 0;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick = (a: any) => (s: Model) => {};\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    clickEmpty = (a: any) => (s: Model) => {};\n    unblink: (model: Model) => void = () => {};\n    abstract accepts: (card: Card | null) => boolean;\n}\nexport default BasicStack;\n","import BasicStack from \"./Stack\";\nimport Hand from \"./Hand\";\n\nabstract class HandHoldingStack extends BasicStack {\n    hand: Hand;\n    constructor(source: string, hand: Hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source === this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n}\n\nexport default HandHoldingStack;\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Model from \"../Model\";\nimport { Suit } from \"../Deck/Suits\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nexport default class FoundationStack extends HandHoldingStack {\n    constructor(source: string, hand: Hand, suit: Suit) {\n        super(source, hand);\n        this.acceptedCards = [...getFoundationOrder()];\n        this.usedCards = [];\n        this.icon = suit.icon;\n        this.color = suit.color;\n    }\n    acceptedCards: string[] = [];\n    usedCards: any[] = [];\n    icon = \"\";\n    color = \"\";\n    getCurrentAccepted = () => {\n        return this.acceptedCards[this.acceptedCards.length - 1];\n    };\n    accepts = (card: Card | null) => {\n        if (!card) return false;\n        const currentAccepted = this.getCurrentAccepted();\n        return this.icon === card.type.icon && currentAccepted === card.denomination;\n    };\n    setOnClick = (onClick: (c: any, p: any) => (s: Model) => void, hand: Hand) => {\n        this.clickEmpty = (p) => onClick(null, p);\n        const cards = this.source === hand.source ? [...this.stack, ...hand.stack] : this.stack;\n        cards.forEach((card, sindex) => {\n            card.onClick = (p: any) => onClick({ ...card }, p);\n            card.canClick = () => sindex === cards.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n}\n","import Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\n\nexport default class MultiStack<T extends HandHoldingStack> {\n    stacks: T[];\n    settings: Settings;\n    hand: Hand;\n    constructor(settings: Settings, hand: Hand, stacks: T[]) {\n        this.stacks = stacks;\n        this.settings = settings;\n        this.hand = hand;\n    }\n}\n","import Card from \"../Deck/Card\";\nimport FoundationStack from \"./FoundationStack\";\nimport Hand from \"./Hand\";\nimport Model from \"../Model\";\nimport MultiStack from \"./MultiStack\";\nimport Settings from \"./Settings\";\nimport Suits from \"../Deck/Suits\";\n\nexport default class Foundation extends MultiStack<FoundationStack> {\n    constructor(settings: Settings, hand: Hand) {\n        super(settings, hand, [\n            ...Object.keys(Suits)\n                .map((key: string) => Suits[key])\n                .map((suit, index) => new FoundationStack(\"foundation-\" + index, hand, suit)),\n        ]);\n    }\n\n    setOnClick = (onClick: (c: Card, p: any, index: number) => (s: Model) => void) => {\n        this.stacks.forEach((stack, index) => {\n            stack.setOnClick((c: Card, p: any) => onClick(c, p, index), this.hand);\n        });\n    };\n\n    getCurrentAccepted = (index: number) => {\n        return this.stacks[index].getCurrentAccepted();\n    };\n\n    wouldAcceptHand = (index: number) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    accepts = (index: number, card: Card | null) => {\n        return this.stacks[index].accepts(card);\n    };\n\n    add = (index: number, cards: Card[]) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index: number, card: Card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return (card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop()) || null;\n    };\n\n    getPreviousUsed = (index: number) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => f.stack.length).reduce((a, b) => a + b, 0);\n\n    getTop = (index: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig: Foundation, hand: Hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new FoundationStack(origStack.source, hand, origStack);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src, state.foundation.getTop(index));\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card | null, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.denomination) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport interface AppliedRating {\n    points: number;\n    text: string;\n}\n\nexport interface AppliedRatingWithId extends AppliedRating {\n    id: number;\n}\n\nexport default class Rating {\n    settings: Settings;\n    points: number;\n    multiplicator: number;\n    ratings: AppliedRating[];\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n        this.ratings = [];\n    }\n\n    applyRating = (points: number, text: string) => {\n        console.debug(\"RATING:\", text);\n        this.ratings.push({ points, text });\n    };\n\n    registerMove = (target: string, source: string, card: Card | null) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove, card);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode === \"single\" && this.settings.launchSettings.recyclingMode === \"infinite\") {\n            if (this.points > 0) {\n                let diff = 0;\n                if (this.points < 100) {\n                    diff = this.points * -1;\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                    diff = -100;\n                }\n                this.applyRating(diff, `subtract ${diff} (max 100 points) for RECYCLE`);\n            }\n        }\n    };\n\n    registerUncover = (card: Card | null) => {\n        this.registerHint(this.settings.disableHint());\n        card && card.setSuccess(5);\n        this.points += 5;\n        this.applyRating(5, \"add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on: boolean) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, \"subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other: Rating) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            this.applyRating(penalty * -1, `applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done: boolean) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, `applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move: { source: string; target: string }, card: Card | null) {\n        const isTableau = (obj: string) => obj.substr(0, 7) === \"tableau\";\n        const isFoundation = (obj: string) => obj.substr(0, 10) === \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE tableau -> foundation\");\n                card && card.setSuccess(10);\n                return 10;\n            }\n        } else if (move.source === \"waste\") {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE waste -> foundation\");\n                card && card.setSuccess(10);\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                this.applyRating(5, \"add 5 points for MOVE waste -> tableau\");\n                card && card.setSuccess(5);\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                this.applyRating(-15, \"subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start: number, end: number) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    };\n\n    static copy = (orig: Rating) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        copy.ratings = [...orig.ratings];\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./Stack\";\nimport Model from \"../Model\";\n\nexport default class TimeMachine {\n    previousStates: Model[];\n    memorable: boolean;\n    modified: boolean;\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source === target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state: Model) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id: number, current: Model) => {\n        const isRequested = this.previousStates.length - 1 === id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        if (on) {\n            this.modified = true;\n            this.memorable = false;\n        }\n    }\n\n    stackEquals = (a: IStack, b: IStack) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden === b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a: { stacks: IStack[] }, b: { stacks: IStack[] }) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a: Model, b: Model) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig: TimeMachine) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Rating from \"./Rating\";\nimport Settings from \"./Settings\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    settings: Settings;\n    rating: Rating;\n    timemachine: TimeMachine;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n    }\n\n    registerMove = (target: string, source: string, card: Card | null) => {\n        this.rating.registerMove(target, source, card);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = (card: Card | null) => {\n        this.rating.registerUncover(card);\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig: Game) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./Stack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    filter: (stack: any[]) => Card[] = (stack) => {\n        return stack.filter((c) => c);\n    };\n\n    pickUp = (stack: (Card | null)[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = this.filter(stack).map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source === model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.denomination === \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source === this.source) || null;\n\n    isFromWaste = () => (this.source && this.source === \"waste\") || false;\n\n    isFromFoundation = (index: number) => this.source && this.source === `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source === `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) === \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/Stack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: (IStack | undefined)[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source === pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x === -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x === 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        const current = this.current();\n        if (!current) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = current.getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y === 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const current = this.current();\n        const last: number = current ? current.getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (!current) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current()?.source || \"\");\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = (before: { card: Card | null; stack: string }) => {\n        const clickable = this.current()?.getClickable();\n        if (\n            this.model.focus.card &&\n            this.model.focus.card.canClick() &&\n            clickable &&\n            clickable[this.currentIndex.z] &&\n            clickable[this.currentIndex.z].denomination === this.model.focus.card.denomination &&\n            clickable[this.currentIndex.z].type.icon === this.model.focus.card.type.icon\n        ) {\n            return (ctx: Model) => {\n                if (this.model.focus.card && this.model.focus.card.equals(before.card)) {\n                    this.model.focus.card.onClick({ isKeyboard: true })(ctx);\n                }\n            };\n        } else if (this.model.focus.stack && this.model.focus.stack === before.stack) {\n            return (ctx: Model) => {\n                this.current()?.clickEmpty({ isKeyboard: true })(ctx);\n            };\n        } else {\n            //this is the entry point in case user starts keyboard nav with action button\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./Stack\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Settings from \"./Settings\";\n\nexport default class Stock extends BasicStack {\n    settings: Settings;\n    recyclings: number;\n    passes: number;\n    constructor(stack: Card[], settings: Settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        if (this.settings.launchSettings.recyclingMode === \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode === \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick: (c: any, p: any, i: any) => (s: Model) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: any) => onClick({ ...card }, p, null);\n            card.canClick = () => index === this.stack.length - 1;\n        });\n    };\n    accepts = () => false;\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode === \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode === \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste: Card[]) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card: Card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card: Card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result: Card[] = [];\n        if (this.settings.launchSettings.drawMode === \"single\") {\n            const top = this.stack.pop();\n            if (top) result = [top];\n        }\n        if (this.settings.launchSettings.drawMode === \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length === 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig: Stock) => {\n        const copy = new Stock([], orig.settings);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\", state.waste.getTop());\n    };\n\n    recycleWaste = (state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\", state.waste.getTop())) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key === SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key === SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length === 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length === 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].denomination ===\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].denomination &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key === SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (\n                            this.getPutdownSuggestions(tableauState, true) >\n                            (state.settings.suggestionMode.key === SuggestionModes.FULL ? 1 : 0)\n                        ) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Model from \"../Model\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nexport default class TableauStack extends HandHoldingStack {\n    id = 0;\n    accepts = (current: Card | null) => {\n        const top = this.getTop();\n        if (!top) {\n            return (current && current.denomination === \"K\") || false;\n        }\n        if (this.source === current?.source) return true;\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = current ? range.indexOf(current.denomination) : 0;\n        const topIndex = range.indexOf(top.denomination);\n        return currentIndex + 1 === topIndex && current?.type.color !== top.type.color && top.denomination !== \"A\";\n    };\n    getTop = (offset?: number) => this.stack[this.stack.length - 1 - (offset || 0)];\n    canUncover = (card: Card) => {\n        const top = this.getTop();\n        return top.isHidden && card && card.equals(this.getTop());\n    };\n    setOnClick = (onClick: (a: any, b: any) => (s: Model) => void, onClickhidden: (a: any, b: any) => (s: Model) => void) => {\n        this.clickEmpty = (p: any) => onClick(null, p);\n        const cards = this.source === this.hand.source ? [...this.stack, ...this.hand.stack] : this.stack;\n        cards.forEach((card, sindex) => {\n            const click = card.isHidden && sindex === cards.length - 1 ? onClickhidden : onClick;\n            card.onClick = (p: any) => click({ ...card }, p);\n            card.canClick = () => !card.isHidden || (this.canUncover(card) && !this.hand.currentCard()) || false;\n        });\n        this.hand.setOnClick(this);\n    };\n    static copy = (orig: TableauStack) => {\n        const s = new TableauStack(orig.source, orig.hand);\n        s.id = orig.id;\n        s.stack = Card.copyAll(orig.stack);\n        return s;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport Model from \"../Model\";\nimport MultiStack from \"./MultiStack\";\nimport Settings from \"./Settings\";\nimport TableauStack from \"./TableauStack\";\n\nexport default class Tableau extends MultiStack<TableauStack> {\n    constructor(settings: Settings, hand: Hand) {\n        super(\n            settings,\n            hand,\n            [0, 1, 2, 3, 4, 5, 6].map((id) => {\n                const s = new TableauStack(\"tableau-\" + id, hand);\n                s.id = id;\n                return s;\n            })\n        );\n    }\n\n    setOnClick = (\n        onClick: (a: any, b: any, index: number) => (s: Model) => void,\n        onClickhidden: (a: any, b: any, index: number) => (s: Model) => void\n    ) => {\n        this.stacks.forEach((stack, index) => {\n            stack.setOnClick(\n                (a: any, b: any) => onClick(a, b, index),\n                (a: any, b: any) => onClickhidden(a, b, index)\n            );\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    putDownHand = (index: number) => this.add(index, this.hand.source, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        if (!current) return false;\n        return this.stacks[index].accepts(current);\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        return this.stacks[index].canUncover(card);\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    //@todo entropy as animated effect, triggered after rendering gamestate like blink\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy !== 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, source: string, cards: Card[]) => {\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number) => {\n        card.source = this.stacks[index].source;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].getTop(offset);\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map(TableauStack.copy);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Model from \"../Model\";\nimport Settings from \"./Settings\";\n\nexport default class Waste extends HandHoldingStack {\n    settings: Settings;\n    constructor(settings: Settings, hand: Hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n    }\n\n    setOnClick = (onClick: (c: any, p: any, i: any) => (s: Model) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        const cards = this.source === this.hand.source ? [...this.stack, ...this.hand.stack] : this.stack;\n        cards.forEach((card, index) => {\n            card.onClick = (p: any) => onClick({ ...card }, p, null);\n            card.canClick = () => index === cards.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card: Card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards: Card[]) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card: Card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    accepts = (card: Card | null) => this.canAdd(card) || false;\n\n    canAdd = (card: Card | null) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card: Card) => (card && card.equals(this.getTop()) && this.stack.pop()) || null;\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig: Waste, hand: Hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Card from \"./Deck/Card\";\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport { IStack } from \"./Game/Stack\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n    token: number;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n        this.token = obj.token;\n    }\n\n    setToken = (token: number) => {\n        this.token = token;\n    };\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    _hasSuggestion = (obj: any) => {\n        return obj.suggestion || (obj.stack && obj.stack.some(this._hasSuggestion)) || (obj.stacks && obj.stacks.some(this._hasSuggestion));\n    };\n\n    hasNonStockSuggestions = () => {\n        return (\n            this._hasSuggestion(this.waste) ||\n            this._hasSuggestion(this.tableau) ||\n            this._hasSuggestion(this.foundation)\n        );\n    }\n\n    hasSuggestions = () => {\n        return (\n            this._hasSuggestion(this.waste) ||\n            this._hasSuggestion(this.stock) ||\n            this._hasSuggestion(this.tableau) ||\n            this._hasSuggestion(this.foundation)\n        );\n    };\n\n    canAutoSolve = () => {\n        return (\n            this.waste.stack.length === 0 &&\n            this.stock.stack.length === 0 &&\n            this.tableau.stacks.every((s) => s.stack.every((c) => !c.isHidden))\n        );\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    clearSuccess = (card: Card) => {\n        const clear = (c: Card, s: IStack) => {\n            s.stack.forEach((_c) => {\n                if (_c.equals(c)) {\n                    _c.success = 0;\n                }\n            });\n        };\n        clear(card, this.stock);\n        clear(card, this.waste);\n        this.foundation.stacks.forEach((s) => clear(card, s));\n        this.tableau.stacks.forEach((s) => clear(card, s));\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()));\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck, player: number) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings, player),\n            token: 0,\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n            token: state.token,\n        });\n    };\n}\n","//- auto-resolver\n//  - check if the board can auto-resolve and offer to complete automatically\n//  - auto-complete becomes button in header and option in menu\n\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport SuggestionModes from \"../../../Model/Game/Settings/SuggestionModes\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst RenderAutoSolve = (props: { canAutosolve: boolean }) => {\n    const [solving, setSolving] = React.useState(false);\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        if (props.canAutosolve) {\n            updateGameContext((ctx) => (ctx.settings.suggestionMode = SuggestionModes.get(SuggestionModes.NONE)));\n            setSolving(true);\n        }\n    }, [props.canAutosolve, updateGameContext]);\n    const canSolve = solving && state.settings.suggestionMode.key === SuggestionModes.NONE;\n    return !canSolve ? null : <Solver />;\n};\n\nexport const AutoSolver = () => {\n    const { state } = useGlobalContext();\n    return <RenderAutoSolve canAutosolve={state.canAutoSolve()} />;\n};\n\nexport default AutoSolver;\n\n//@todo also start general confetti firework elements when autosolving\n//@todo autosolve looks and feels slow: disable individual fireworks & reduce timeout duration\n\nconst Solver = () => {\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            const copy = Model.copy(state).withHandlers();\n            if (copy.hand.currentCard()) {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.foundation)) {\n                    const suggestedFoundations = copy.foundation.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedFoundations.length) {\n                        const suggestedFoundation = suggestedFoundations[0];\n                        updateGameContext(suggestedFoundation.clickEmpty({ isKeyboard: false }));\n                    }\n                }\n            } else {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.tableau)) {\n                    const suggestedTableaus = copy.tableau.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedTableaus.length) {\n                        const suggestedCards = suggestedTableaus[0].stack.filter((c) => c.suggestion);\n                        if (suggestedCards.length) {\n                            const suggestedCard = suggestedCards[0];\n                            updateGameContext(suggestedCard.onClick({ isKeyboard: false }));\n                        }\n                    }\n                }\n            }\n        }, 150);\n\n        return () => clearTimeout(timeout);\n    });\n    return null;\n};\n","import React from \"react\";\nimport useGlobalContext from \"./GlobalContext\";\n\nconst useTokenEffect = (f: React.EffectCallback) => {\n    const { state } = useGlobalContext();\n    // this hook only runs when the token changes. intentionally.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return React.useEffect(f, [state.token]);\n};\n\nexport default useTokenEffect;\n","import React from \"react\";\nimport useGameContext from \"../../Context/GameContext\";\nimport useGlobalContext from \"../../GlobalContext\";\nimport useTokenEffect from \"../../useGlobalTokenEffect\";\n\nconst Uncoverer = () => {\n    const { state, updateGameContext } = useGlobalContext();\n    useTokenEffect(() => {\n        if (!state.hand.currentCard()) {\n            state.tableau.stacks.forEach((stack) => {\n                if (stack.getTop() && stack.getTop().isHidden && stack.getTop().canClick()) {\n                    updateGameContext(stack.getTop().onClick({ isKeyboard: true }));\n                }\n            });\n        }\n    });\n    return null;\n};\n\nconst AutoUncoverer = () => {\n    const { state } = useGlobalContext();\n    const { gameState } = useGameContext();\n    return !!state.settings.launchSettings.autoUncover && !!gameState.started ? <Uncoverer /> : null;\n};\n\nexport default AutoUncoverer;\n","import React from \"react\";\n\nconst BoardContext = React.createContext({\n    player: 0,\n});\n\nexport const useBoardContext = () => React.useContext(BoardContext);\n\nexport const BoardProvider = BoardContext.Provider;\n","import { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GamePad from \"../../../common/GamePad\";\nimport GamepadLayout from \"../../../common/GamepadLayout\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport { useBoardContext } from \"../../Context/BoardContext\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst BoardGamePad = (props: CustomInputProps) => {\n    const { state } = useGlobalContext();\n    const { player } = useBoardContext();\n    const isGamePadDriven = state.settings.launchSettings.players[player].inputMethod === \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n\n    const switchToGamePad = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.players[player].inputMethod = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            layout={GamepadLayout}\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight(switchToGamePad)}\n            onUp={() => props.onUp(switchToGamePad)}\n            onDown={() => props.onDown(switchToGamePad)}\n            onAction={() => props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToGamePad)}\n            onMenu={() => props.onMenu(switchToGamePad)}\n        />\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"../../../common/KeyboardLayouts\";\n\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport Keyboard from \"../../../common/Keyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport { useBoardContext } from \"../../Context/BoardContext\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst BoardKeyboard = (props: CustomInputProps) => {\n    const { state } = useGlobalContext();\n    const { player } = useBoardContext();\n    const isKeyboardDriven = state.settings.launchSettings.players[player].inputMethod === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.players[player].inputMethod = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport { useBoardContext } from \"../../Context/BoardContext\";\nimport useGlobalContext from \"../../GlobalContext\";\nimport usePauseContext from \"../../Context/PauseContext\";\n\ntype _mod = (state: Model) => void;\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = useGlobalContext();\n    const paused = usePauseContext();\n    const { player } = useBoardContext();\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const beforeFocused = { card: state.focus.card, stack: state.focus.stack };\n    const isPaused = !!paused.state.paused;\n\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const handlers = {\n        onLeft: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveLeft(before);\n            }),\n\n        onRight: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveRight(before);\n            }),\n\n        onUp: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveUp(before);\n            }),\n\n        onDown: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveDown(before);\n            }),\n\n        onAction: (modifier: _mod) =>\n            updateGameContext((ctx) => {\n                modifier(ctx);\n                const handler = state?.navigator?.pressCurrent(beforeFocused);\n                handler && handler(ctx);\n                ctx.navigator.finishNav();\n            }),\n\n        onCancel: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n            }),\n\n        onPause: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n\n        onHint: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n                if (isVisible(state) && !isDisabled(state)) {\n                    state.settings.enableHint();\n                }\n            });\n        },\n\n        onUndo: () => {\n            //@todo use GlobalState token to avoid double processing (pass in token via props to always have updated version)\n            replaceContext((_state) => {\n                const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n                if (previous) {\n                    previous.game.rating.penalize(_state.game.rating);\n                    return previous;\n                }\n\n                return null;\n            });\n        },\n        onMenu: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n    };\n\n    return paused.state.showMenu ? null : (\n        <>\n            <BoardKeyboard {...handlers} />\n            <BoardGamePad {...handlers} />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import { useEffectOnce } from \"react-use\";\nimport useGameContext from \"../../Context/GameContext\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Dealer = () => {\n    const { state, replaceContext } = useGlobalContext();\n    const { gameState, start } = useGameContext();\n    useEffectOnce(() => {\n        if (!gameState.started) {\n            const timeouts: NodeJS.Timeout[] = [];\n            if (state.settings.launchSettings.quickDeal) {\n                if (!state.dealer.isDealt) {\n                    start();\n                    replaceContext(state.dealer.dealAll());\n                }\n            } else {\n                const deal = (dealt: number) =>\n                    timeouts.push(\n                        setTimeout(() => {\n                            if (!state.dealer.isDealt) {\n                                replaceContext(state.dealer.dealOne(dealt, deal));\n                            } else {\n                                start();\n                            }\n                        }, 35)\n                    );\n\n                deal(state.dealer.dealt);\n                return () => timeouts.forEach((timeout) => clearTimeout(timeout));\n            }\n        }\n    });\n    return null;\n};\nexport default Dealer;\n","import { mdiFlagOutline, mdiHandBackLeft, mdiPlay } from \"@mdi/js\";\n\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport { NavigationProvider } from \"./StartScreen/Navigation/NavigationContext\";\nimport React from \"react\";\nimport { Universal } from \"../../common/KeyboardLayouts\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePauseContext from \"../Context/PauseContext\";\nimport useTokenEffect from \"../useGlobalTokenEffect\";\n\nconst PossibleFailScreen = () => {\n    const { state } = useGlobalContext();\n    const [refused, setRefused] = React.useState<{ refused: boolean; since: number }>({ refused: false, since: 0 });\n    const refuse = (val: boolean) => {\n        setRefused({\n            refused: refused.since >= 3 ? false : val,\n            since: refused.since >= 3 ? 0 : refused.since + 1,\n        });\n    };\n    useTokenEffect(() => {\n        if (!state.hand.currentCard() && refused.refused) {\n            refuse(true);\n        }\n    });\n    const pause = usePauseContext();\n    //@todo\n    //instead of immediate quit, use gamestate.giveUp, then allow quitting via EndScreen\n    //in versus this lets the other player gloat and confirm before exiting game\n    const { restart } = useGlobalContext();\n    React.useEffect(() => {\n        if (!pause.state.showMenu) {\n            pause.toggleMenu(true);\n        }\n        return () => pause.toggleMenu(false);\n        //@todo antipattern?\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [refused.refused]);\n    return !refused.refused ? (\n        <NavigationProvider>\n            <div className=\"gamemenu menu dialog\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle icon={mdiHandBackLeft} />\n                        <div className=\"announcement\">The game might be over</div>\n                        <MenuTree keyboardLayout={Universal}>\n                            <MenuButton\n                                icon={mdiPlay}\n                                title=\"Keep trying\"\n                                onClick={() => {\n                                    refuse(true);\n                                }}\n                            />\n                            <MenuButton icon={mdiFlagOutline} title=\"Give up\" onClick={() => restart()} />\n                        </MenuTree>\n                    </div>\n                </div>\n            </div>\n        </NavigationProvider>\n    ) : null;\n};\nexport default PossibleFailScreen;\n","import Card from \"../../../Model/Deck/Card\";\nimport Model from \"../../../Model/Model\";\nimport PossibleFailScreen from \"../../UI/PossibleFailScreen\";\nimport React from \"react\";\nimport SuggestionModes from \"../../../Model/Game/Settings/SuggestionModes\";\nimport useGameContext from \"../../Context/GameContext\";\nimport useGlobalContext from \"../../GlobalContext\";\nimport useTokenEffect from \"../../useGlobalTokenEffect\";\n\nconst FailDetector = () => {\n    const { state } = useGlobalContext();\n    const { gameState } = useGameContext();\n\n    const [suggestions, setSuggestions] = React.useState<{ any: boolean; stock: boolean; nonStock: boolean }>({\n        any: false,\n        stock: false,\n        nonStock: false,\n    });\n    useTokenEffect(() => {\n        if (gameState.started) {\n            const copy = Model.copy(state);\n            copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.FULL);\n            copy.suggestor.evaluateOptions(copy);\n            setSuggestions({\n                any: copy.hasSuggestions(),\n                stock: copy._hasSuggestion(copy.stock),\n                nonStock: copy.hasNonStockSuggestions(),\n            });\n        }\n    });\n\n    const [stockSuggestionCards, setStockSuggestionCards] = React.useState<Card[]>([]);\n    const [isPossibleFail, setPossibleFail] = React.useState<boolean>(false);\n    React.useEffect(() => {\n        if (!state.hand.currentCard() && gameState.started) {\n            //fail detection never ends the game, merely offers to quit or keep trying\n            //it also aquaints the user with the possibiltiy of undoing or restarting to be helpful\n            if (suggestions.nonStock) {\n                setStockSuggestionCards([]);\n                setPossibleFail(false);\n            } else if (suggestions.stock && !suggestions.nonStock) {\n                //@todo CYCLING FAIL DETECTION\n                //even with a full suggestion available, the situation may be hopeless\n                //that is true if the suggestion concerns the stock\n                //to find out if it's really hopeless, we need to track full cycles through the deck\n                //if a full cycle through the stack was performed and only stock suggestions came up\n                //it's basically a loss, same as above\n                //to achieve this we can store all cards that produced stock suggestions in a list\n                //as long as stock suggestions come up we add to the list\n                //once list has same length as stock + waste + hand(waste) we know it's over\n                //once we find a non-stock suggestion we empty out the list\n                const top = state.stock.getTop();\n                if (top) {\n                    setStockSuggestionCards([...stockSuggestionCards, top]);\n                }\n                if (state.stock.stack.length + state.waste.stack.length <= stockSuggestionCards.length) {\n                    setPossibleFail(true);\n                }\n                //however this whole fancy thing doesn't work if there are useless \"full\" suggestions.\n                //if the user is in full mode, and ignores these, it's a sign it's over\n                //if the user is in regular mode or lesser, we could recommend switching to full suggestions\n                //but that's not really the job of a faildetector\n            } else if (!suggestions.any) {\n                //@todo SIMPLE FAIL DETECTION\n                //no full suggestions = no moves possible mean fail unless all cards are in foundation\n                setPossibleFail(true);\n                //@todo implement menu clone that suggests to stop since there is nothing to do anymore\n            }\n        }\n        //@todo anti pattern?\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [suggestions]);\n\n    return isPossibleFail ? <PossibleFailScreen /> : null;\n};\n\nexport default FailDetector;\n","import React from \"react\";\nimport { useBoardContext } from \"../../Context/BoardContext\";\nimport useGameContext from \"../../Context/GameContext\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Detector = () => {\n    const { state } = useGlobalContext();\n    const { win } = useGameContext();\n    const { player } = useBoardContext();\n\n    React.useEffect(() => {\n        if (!state.hand.currentCard() && state.foundation.countCards() === 52) {\n            win(player);\n        }\n    }, [state.token, state.foundation, state.hand, player, win]);\n    return null;\n};\n\nconst WinDetector = () => {\n    const { state } = useGlobalContext();\n    const { gameState } = useGameContext();\n    return (!gameState.isEnded && !!state.settings.launchSettings.autoUncover && !!gameState.started && <Detector />) || null;\n};\n\nexport default WinDetector;\n","import AutoDealer from \"./AutoDealer\";\nimport AutoSolver from \"./AutoSolver\";\nimport AutoUncoverer from \"./AutoUncoverer\";\nimport BoardNavigator from \"../Navigation/BoardNavigator\";\nimport Dealer from \"./Dealer\";\nimport FailDetector from \"./FailDetector\";\nimport React from \"react\";\nimport WinDetector from \"./WinDetector\";\n\nconst Actors = () => {\n    return (\n        <>\n            <Dealer />\n            <BoardNavigator />\n            <AutoSolver />\n            <WinDetector />\n            <FailDetector />\n            <AutoDealer />\n            <AutoUncoverer />\n        </>\n    );\n};\n\nexport default Actors;\n","import React from \"react\";\nimport { WindowDimensionContext } from \"./AspectRatio/AspectRatio\";\nimport { usePreview } from \"react-dnd-preview\";\n\nconst DndPreview = (props: { reff: HTMLElement }) => {\n    const [rect, setRect] = React.useState<{ left: number; top: number }>();\n    const { width, height } = React.useContext(WindowDimensionContext);\n    React.useEffect(() => {\n        const domRect = props.reff.getBoundingClientRect();\n        setRect({\n            left: domRect.left * -1,\n            top: domRect.top * -1,\n        });\n        //@todo introduce resizeContext that we can subscribe to, so we only recalculate the BoundingClientRect of the container when window was resized\n    }, [props.reff, width, height]);\n    const { display, item, style } = usePreview();\n    if (!display || !rect || !item) {\n        return null;\n    }\n    return (\n        <div\n            style={{\n                ...style,\n                position: \"relative\",\n                width: \"100%\",\n                left: rect.left,\n                top: rect.top,\n                zIndex: 2000,\n                opacity: 1,\n            }}\n        >\n            {item.render}\n        </div>\n    );\n};\n\nexport default DndPreview;\n","import React from \"react\";\nimport confetti from \"canvas-confetti\";\n\nconst Firework = (props: { intensity: number }) => {\n    const canvasRef = React.createRef<HTMLCanvasElement>();\n    React.useEffect(() => {\n        if (canvasRef && canvasRef.current && props.intensity) {\n            const count = 15 * props.intensity;\n            const origin = {\n                x: 0.5,\n                y: 0.33,\n            };\n\n            const scalar = window.innerWidth / (1080 / 100) / 100;\n            const defaults = {\n                ticks: 50,\n                origin,\n                particleCount: 40,\n                startVelocity: scalar * 20,\n                decay: 0.8,\n                spread: 360,\n                scalar: scalar,\n            };\n            const localConfetti = confetti.create(canvasRef.current, { resize: true });\n\n            const fire = (particleRatio: number, opts: confetti.Options) => {\n                localConfetti(\n                    Object.assign({}, defaults, opts, {\n                        particleCount: Math.floor(count * particleRatio),\n                    })\n                );\n            };\n\n            fire(0.25, {\n                startVelocity: scalar * 55,\n            });\n            fire(0.2, {\n                decay: 1.2,\n            });\n            fire(0.35, {\n                decay: 0.91,\n                scalar: scalar - 0.2,\n            });\n            fire(0.1, {\n                startVelocity: scalar * 25,\n                decay: 0.92,\n                scalar: scalar + 0.2,\n            });\n            fire(0.1, {});\n            fire(0.1, {\n                startVelocity: scalar * 45,\n            });\n        }\n    }, [canvasRef, props.intensity]);\n\n    return <canvas ref={canvasRef}></canvas>;\n};\n\nexport default Firework;\n","import CardModel from \"../../Model/Deck/Card\";\nimport Firework from \"./Firework\";\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst CardFirework = (props: { model: CardModel }) => {\n    const { state, updateContext } = useGlobalContext();\n\n    React.useEffect(() => {\n        if (props.model.success) {\n            const timeout = setTimeout(() => updateContext((ctx) => ctx.clearSuccess(props.model)));\n            return () => clearTimeout(timeout);\n        }\n    }, [state?.token, props.model, updateContext, props.model.success]);\n    return <Firework intensity={props.model.success} />;\n};\n\nexport default CardFirework;\n","import React, { MouseEventHandler, useCallback } from \"react\";\n\nimport CardFirework from \"./CardFirework\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport GameModes from \"../../GameModes\";\nimport Icon from \"@mdi/react\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport { useBoardContext } from \"../Context/BoardContext\";\nimport { useDrag } from \"react-dnd\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePauseContext from \"../Context/PauseContext\";\n\nconst useCardStyle = (model: CardModel | null, props: CardProps, _isDrag: () => boolean, opacity: any) => {\n    const getCardStyle = useCallback(() => {\n        if (!model) {\n            return {};\n        }\n        const style = {\n            opacity: _isDrag() ? 0 : opacity,\n            zIndex: (props.zIndex ? props.zIndex : (props.offsetTop && props.offsetTop(props.index, props.models) > 0 ? 1 : 0) * 20) + 1,\n            top: props.offsetTop ? props.offsetTop(props.index, props.models) / 15 + \"em\" : 0,\n            ...model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft(props.index) * 2 + \"em\";\n        }\n\n        if (!model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    }, [model, props, _isDrag, opacity]);\n\n    const [cardStyle, setCardStyle] = React.useState<any>(getCardStyle());\n\n    React.useEffect(() => {\n        setCardStyle(getCardStyle);\n    }, [getCardStyle]);\n    return cardStyle;\n};\n\n//@todo this makes the card flash when placing on green table. class is first assigned empty\nconst useClassName = (model: CardModel | null, props: CardProps, _isDrag: () => boolean, isFocused: () => boolean) => {\n    const getClassName = useCallback(() => {\n        if (!model) {\n            return \"card card-base\";\n        }\n        const hasSuggestion = (props.isSuggested && props.isSuggested(props.index)) || model.suggestion;\n        let className = `card card-base card-${model.type.color}`;\n        className +=\n            (!props.isSelected || !props.isSelected(props.index)) && !isFocused() && !hasSuggestion ? ` card-stack-${model.source}` : \"\";\n        className += !_isDrag() && props.isSelected && props.isSelected(props.index) && !_isDrag() ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += model.canClick() ? \" clickable\" : \"\";\n        className += hasSuggestion && !isFocused() ? \" card-suggested\" : \"\";\n        className += isFocused() ? \" card-focused\" : \"\";\n        return className;\n    }, [_isDrag, isFocused, model, props]);\n\n    const [className, setClassName] = React.useState<string>(getClassName());\n\n    React.useEffect(() => {\n        setClassName(getClassName());\n    }, [getClassName]);\n\n    return className;\n};\n\nconst useStackBaseStyle = (model: CardModel | null) => {\n    const getStackbaseStyle: () => React.CSSProperties = useCallback(() => {\n        if (!model || !model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    }, [model]);\n\n    const [stackbaseStyle, setStackbaseStyle] = React.useState<any>(getStackbaseStyle());\n\n    React.useEffect(() => {\n        setStackbaseStyle(getStackbaseStyle());\n    }, [getStackbaseStyle]);\n    return stackbaseStyle;\n};\n\ntype CardProps = {\n    index: number;\n    models: CardModel[];\n    isSuggested?: (index: number) => boolean | undefined;\n    isSelected?: (index: number) => boolean;\n    blink?: number;\n    zIndex?: number;\n    offsetTop?: (index: number, models: CardModel[]) => number;\n    offsetLeft?: (index: number) => number;\n    isDrag?: boolean;\n};\n\nconst ReRender = (props: CardProps) => (\n    <Card\n        {...{\n            ...props,\n            models: props.models.slice(props.index, props.models.length),\n            offsetLeft: () => 0,\n            isSelected: () => false,\n            index: 0,\n        }}\n    />\n);\nReRender.displayName = \"ReRender\";\n\nconst Card = (props: CardProps) => {\n    const { player } = useBoardContext();\n    const { state, updateGameContext } = useGlobalContext();\n    const pause = usePauseContext();\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const [isDrag, setDrag] = React.useState<boolean>(!!props.isDrag);\n    const model: CardModel = props.models[props.index];\n    const isFocused = useCallback(() => (!!model && state.focus.hasCard(model)) || false, [model, state.focus]);\n    const _isDrag = useCallback(() => props.isDrag || isDrag, [props.isDrag, isDrag]);\n    const [{ opacity }, dragRef, preview] = useDrag({\n        type: \"card\",\n        item: (_monitor) => {\n            setDrag(true);\n            if (model.onClick && (!props.isSelected || !props.isSelected(props.index))) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n            return { type: \"card\", model: model, render: ReRender(props) };\n        },\n        collect: (monitor) => {\n            return { opacity: monitor.isDragging() ? 1 : 1 };\n        },\n        canDrag: () => model.canClick() && !model.isHidden && (state.hand.currentCard() === null || model.equals(state.hand.currentCard())),\n\n        end: (_item, monitor) => {\n            setDrag(false);\n            if (!monitor.didDrop()) {\n                setTimeout(\n                    () =>\n                        updateGameContext((context) => {\n                            model.onClick({ isKeyboard: false })(context);\n                        }),\n                    1\n                );\n            }\n        },\n    });\n\n    //Deactivate native dnd preview - it's fast but it's not working on mobile.\n    React.useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, [preview]);\n\n    const getRef = useCallback(() => (model.canClick() ? dragRef : inputEl), [inputEl, model, dragRef]);\n\n    const onClick: MouseEventHandler<HTMLButtonElement> = (e) => {\n        e.preventDefault();\n        //@todo catch all focuses in hidden input element on board\n        //then remove isKeyboard logic from card\n        //tab nav wont be supported\n        const isKeyBoard = e.clientX === 0 && e.clientY === 0;\n        let ele = e.target as HTMLElement;\n\n        while (ele && !ele.className.includes(\"card-base\") && ele.offsetParent) {\n            ele = ele.offsetParent as HTMLElement;\n        }\n\n        const rect = ele.getBoundingClientRect();\n\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - (ele?.ownerDocument?.defaultView?.pageXOffset || 0),\n                y: e.clientY - (ele?.ownerDocument?.defaultView?.pageYOffset || 0),\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n\n        // When clicking on a card, move the focus (switch from keyboard to mouse nav)\n        // @todo do the same on drag start\n        const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n        if (model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.players[player].inputMethod = \"mouse\";\n                }\n            });\n        }\n    };\n\n    const className = useClassName(model, props, _isDrag, isFocused);\n    const cardStyle = useCardStyle(model, props, _isDrag, opacity);\n    const stackbaseStyle = useStackBaseStyle(model);\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n    //@todo entropy as animated effect, triggered after rendering of action\n\n    if (!props.models.length) {\n        return null;\n    }\n\n    //@todo creating a custom layout was fun, but the users deserve a more professional looking SVG\n    //e.g. https://totalnonsense.com/download/download-vector-playing-cards/\n\n    const SuitIcon = () => (\n        <div className=\"align-center\">\n            <Icon size=\"0.8em\" color={model.type.color} path={model.type.icon} />\n        </div>\n    );\n\n    return (\n        <>\n            <div style={stackbaseStyle} className=\"stack-base\">\n                <button\n                    style={cardStyle}\n                    ref={getRef()}\n                    className={className}\n                    onClick={onClick}\n                    disabled={!model.canClick() || !pause.state.showCards}\n                    tabIndex={model.canClick() ? 0 : -1}\n                >\n                    <CardFirework model={model} />\n                    <div className=\"card-content\">\n                        {model.isHidden || !pause.state.showCards ? (\n                            <div className=\"card-back\">&nbsp;</div>\n                        ) : (\n                            <div className=\"card-grid-container\">\n                                <div>\n                                    <SuitIcon />\n                                </div>\n                                <div>\n                                    <div className=\"align-left\">{model.denomination}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <SuitIcon />\n                                </div>\n                                <div className=\"mainface\">\n                                    <div className=\"align-center\">{model.denomination} </div>\n                                </div>\n                                <div>\n                                    <SuitIcon />\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-right\">{model.denomination}</div>\n                                </div>\n                                <div>\n                                    <SuitIcon />\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </button>\n            </div>\n            {props.models.length - 1 > props.index && <Card {...props} isDrag={_isDrag()} index={props.index + 1} />}\n        </>\n    );\n};\n\nexport default Card;\n","import React, { MouseEventHandler, useCallback } from \"react\";\n\nimport { IStack } from \"../../Model/Game/Stack\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst StackBase = (props: { model: IStack; children?: React.ReactNode }) => {\n    const { state, updateGameContext } = useGlobalContext();\n    \n    const getClassName = useCallback(() => {\n        let classname = \"card-base socket\";\n        if (!props.model.stack.length) {\n            if (props.model.blinkFor) {\n                classname += \" socket-blink\";\n            } else if (state.focus.hasStack(props.model.source)) {\n                classname += \" socket-focused\";\n            } else {\n                classname += \" socket-empty\";\n            }\n        } else {\n            classname += \" socket-full\";\n        }\n\n        if (props.model.suggestion && !props.model.stack.length) {\n            classname += \" socket-suggested\";\n        }\n        return classname;\n    }, [props.model.stack.length, props.model.suggestion, props.model.blinkFor, props.model.source, state.focus]);\n\n    const onClick: MouseEventHandler<HTMLButtonElement> = (e) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX === 0 && e.clientY === 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    return (\n        <button\n            className={getClassName()}\n            onClick={onClick}\n            disabled={!!props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import { IStack } from \"../../../Model/Game/Stack\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\ntype _selector = (model: Model) => IStack;\n\nconst useBlinkEffect = (selector: _selector) => {\n    const { updateContext, state } = useGlobalContext();\n    const model = selector(state);\n    React.useEffect(() => {\n        let timeout: NodeJS.Timeout | null = null;\n        if (state && selector(state).blinkFor) {\n            timeout = setTimeout(\n                () =>\n                    updateContext((state: Model) => {\n                        selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n        return () => {\n            timeout && clearTimeout(timeout);\n        };\n    }, [state, model.blinkFor, updateContext, selector]);\n};\n\nexport default useBlinkEffect;\n","import { IStack } from \"../../../Model/Game/Stack\";\nimport { useDrop } from \"react-dnd\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nexport const useStackDrop = (model: IStack, accepts?: (c: any) => boolean) => {\n    const { updateGameContext } = useGlobalContext();\n    return useDrop({\n        accept: \"card\",\n        canDrop: (item: any) => {\n            return (accepts && accepts(item.model)) || model.accepts(item.model);\n        },\n        drop: () => {\n            updateGameContext(model.clickEmpty({ isKeyBoard: false }));\n        },\n    })[1];\n};\n","import Card from \"./Card\";\nimport FoundationStackModel from \"../../Model/Game/FoundationStack\";\nimport Hand from \"../../Model/Game/Hand\";\nimport Icon from \"@mdi/react\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./Hooks/useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\nimport { useStackDrop } from \"./Hooks/useStackDrop\";\n\ntype FoundationProps = { index: number; model: FoundationStackModel, hand:  Hand};\n\nconst Foundation = () => {\n    const { state } = useGlobalContext();\n    return (\n        <>\n            {state.foundation.stacks.map((foundation, index) => (\n                <FoundationStack key={index} model={foundation} index={index} hand={state.hand} />\n            ))}\n        </>\n    );\n};\n\nexport default Foundation;\n\nconst FoundationStack = (props: FoundationProps) => {\n    useBlinkEffect((model) => model.foundation.stacks[props.index]);\n    const model = props.model;\n    const drop = useStackDrop(props.model);\n    const cards = props.hand.source === model.source ? [...model.stack, ...props.hand.stack] : [...model.stack];\n    return (\n        <div className=\"board-field foundation\" key={props.index} ref={drop}>\n            <StackBase model={model}>\n                <div className={\"align-center foundation-base suit-\" + model.icon}>\n                    <Icon path={model.icon} size=\"1em\" horizontal  color={model.color} />\n                </div>\n            </StackBase>\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={model.blinkFor}\n                isSuggested={(index) => model.suggestion && model.stack.length - 1 === index}\n                isSelected={(index) => index > model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import React from \"react\";\nimport useGameContext from \"../../Context/GameContext\";\nimport usePauseContext from \"../../Context/PauseContext\";\n\nconst Clock = () => {\n    const { state, getElapsed } = usePauseContext();\n    const { gameState } = useGameContext();\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (gameState.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [gameState.started, state.paused, getElapsed]);\n\n    return !gameState.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Hearts = () => {\n    const { state } = useGlobalContext();\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode === \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode === \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode === \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Hint = () => {\n    const { state, updateContext } = useGlobalContext();\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import React from \"react\";\nimport { toast } from \"react-toastify\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Points = () => {\n    const { state } = useGlobalContext();\n    const showToast = () => {\n        toast.info(\n            <ul>\n                {state.game.rating.ratings.reverse().map((rating, index) => (\n                    <li key={index}>\n                        {rating.points} - {rating.text}\n                    </li>\n                ))}\n            </ul>,\n            { autoClose: false }\n        );\n    };\n    return (\n        <div>\n            <button title=\"Points\" onClick={showToast}>\n                <span className=\"icon\">🏆</span>\n            </button>\n            {state?.game.rating.points}\n        </div>\n    );\n};\n\nexport default Points;\n","import React from \"react\";\nimport { useBoardContext } from \"../../Context/BoardContext\";\nimport usePauseContext from \"../../Context/PauseContext\";\n\nconst ToggleMenu = () => {\n    const paused = usePauseContext();\n    const { player } = useBoardContext();\n\n    return paused.state.showMenu ? null : (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Undo = () => {\n    //@todo use GlobalState token to avoid double processing\n    const { state, replaceContext } = useGlobalContext();\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"./Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons header-right\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import \"./StartScreen/Menu.scss\";\n\nimport { Universal, getKeyboardLayout } from \"../../common/KeyboardLayouts\";\nimport { mdiDelete, mdiPlay, mdiRecycle, mdiSleep, mdiWeatherTornado, mdiWeatherWindy } from \"@mdi/js\";\nimport useNavigationContext, { NavigationProvider } from \"./StartScreen/Navigation/NavigationContext\";\n\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GameModes from \"../../GameModes\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\nimport { useBoardContext } from \"../Context/BoardContext\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePauseContext from \"../Context/PauseContext\";\n\nconst _Menu = () => {\n    return (\n        <NavigationProvider>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = useGlobalContext();\n    const pause = usePauseContext();\n    const { player } = useBoardContext();\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too if consented and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = useNavigationContext();\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining === 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining === 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) {\n        announcement = \"The game is not paused.\";\n    }\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle icon={mdiSleep } />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle icon={mdiSleep } />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon={mdiPlay}\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                        />\n                        <MenuButton\n                            icon={mdiWeatherTornado}\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            toggled={navigation.mainMenu === \"entropy\"}\n                        >\n                            <MenuButton\n                                icon={mdiWeatherTornado}\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                            />\n                            <MenuButton\n                                icon={mdiWeatherWindy}\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon={mdiRecycle}\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon={mdiDelete} title=\"Quit Game\" onClick={() => restart()} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import Card from \"./Card\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./Hooks/useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst Stock = () => {\n    useBlinkEffect((model) => model.stock);\n    const context = useGlobalContext();\n\n    if (!context || !context.state) return null;\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            <Card\n                index={0}\n                key={0}\n                models={context.state.stock.stack}\n                offsetTop={(index) => (index / 2) * -1}\n                zIndex={0}\n                blink={context?.state?.stock.blinkFor}\n                isSuggested={(index) => context?.state?.stock.suggestion && index === context.state.stock.stack.length - 1}\n            />\n        </div>\n    );\n};\n\nexport default Stock;\n","import Card from \"./Card\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport Hand from \"../../Model/Game/Hand\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport TableauModel from \"../../Model/Game/Tableau\";\nimport TableauStackModel from \"../../Model/Game/TableauStack\";\nimport useBlinkEffect from \"./Hooks/useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\nimport { useStackDrop } from \"./Hooks/useStackDrop\";\n\ntype TableauProps = { index: number; model: TableauStackModel; parent: TableauModel; hand: Hand };\n\nconst Tableau = () => {\n    const { state } = useGlobalContext();\n    return (\n        <>\n            {state.tableau.stacks.map((tableau, index) => (\n                <TableauStack key={index} index={index} model={tableau} parent={state.tableau} hand={state.hand} />\n            ))}\n        </>\n    );\n};\nexport default Tableau;\n\nconst TableauStack = (props: TableauProps) => {\n    useBlinkEffect((s) => s.tableau.stacks[props.index]);\n    const drop = useStackDrop(props.model);\n    const cards = props.hand.source === props.model.source ? [...props.model.stack, ...props.hand.stack] : [...props.model.stack];\n    let offset = 1;\n    const getOffset = (index: number, cards: CardModel[]) => {\n        for (let i = 0; i <= index; i++) {\n            if (cards[i] && !cards[i].isHidden) {\n                offset = i * 12 + (index - i) * 24;\n                return offset;\n            }\n        }\n        offset = index * 12;\n        return offset;\n    };\n\n    const classNames = \"board-field tableau tableau-\" + props.index\n\n    return (\n        <div className={classNames} ref={drop}>\n            <StackBase model={props.model} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={props.model.blinkFor}\n                isSuggested={(index) => props.model.suggestion && props.model.stack.length - 1 === index}\n                offsetTop={(index, models) => getOffset(index, models)}\n                isSelected={(index) => index > props.model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import Card from \"./Card\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./Hooks/useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\nimport { useStackDrop } from \"./Hooks/useStackDrop\";\n\nconst Waste = () => {\n    const { state } = useGlobalContext();\n    useBlinkEffect((model) => model.waste);\n    const getOffset = (index: number) => {\n        if (state.settings.launchSettings.drawMode === \"single\") {\n            return 0;\n        }\n        const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n        let additionalOffset = 2;\n        if (length === 2) {\n            additionalOffset = 1;\n        }\n\n        if (length === 1) {\n            additionalOffset = 0;\n        }\n\n        return ((index - length - 2) % 3) + additionalOffset;\n    };\n\n    const drop = useStackDrop(state.waste, () => state.hand.isFromWaste());\n\n    const cards = state?.hand.source === state.waste.source ? [...state.waste.stack, ...state.hand.stack] : [...state.waste.stack];\n\n    return (\n        <div className=\"board-field waste\" ref={drop}>\n            <StackBase model={state.waste} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                offsetTop={(index) => (index / 2) * -1}\n                offsetLeft={(index) => getOffset(index)}\n                blink={state.waste.blinkFor}\n                isSuggested={(index) => state.waste.suggestion && index === state.waste.stack.length - 1}\n                isSelected={(index) => index > state.waste.stack.length - 1}\n            />\n        </div>\n    );\n};\nexport default Waste;\n","import \"./Board.scss\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nimport { Slide, ToastContainer } from \"react-toastify\";\n\nimport Actors from \"./Actors/Actors\";\nimport DndPreview from \"../../common/DndPreview\";\nimport Foundation from \"./Foundation\";\nimport Header from \"../UI/Header/Header\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\ntype BoardProps = { mode: string };\nconst Board = (props: BoardProps) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n    return (\n        <>\n            <Menu />\n            <Header mode={props.mode} />\n            <ToastContainer\n                style={{ zIndex: 8888 }}\n                position=\"top-center\"\n                closeOnClick={false}\n                newestOnTop={true}\n                limit={1}\n                pauseOnFocusLoss={false}\n                draggable={false}\n                transition={Slide}\n            />\n            <div className={\"board-jail \" + props.mode}>\n                <div className={\"board-grid-container \" + props.mode}>\n                    <Stock />\n                    <Waste />\n                    <div className=\"board-field spacer\" ref={ref}>\n                        {ref.current && <DndPreview reff={ref.current} />}\n                    </div>\n                    <Foundation />\n                    <Tableau />\n                </div>\n            </div>\n            <Actors />\n        </>\n    );\n};\n\nexport default Board;\n","import \"./Screens.scss\";\n\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePauseContext from \"../Context/PauseContext\";\n\nconst EndScreen = () => {\n    const { state, restart } = useGlobalContext();\n    const pause = usePauseContext();\n    //@todo show launch settings (draw mode, recycling mode)\n    //@todo show win or lose situation\n    //@todo how to persist the result? from here?\n    // Or track it via context from beginning on?\n\n    //@todo use new ui elements\n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport { BoardProvider } from \"../Context/BoardContext\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../GlobalContext\";\nimport React from \"react\";\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\n//We use class component here because setState allows partial updates\n//in theory, useState supports partial updates and bailouts too but needs testing of Object.is compatibility on Model \nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck, props.player);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            if (previous.game.timemachine.previousStates.length) {\n                previous.game.timemachine.previousStates = [\n                    //@todo this also assigns non-memorable states\n                    //@todo instead of array, always have single previous state\n                    //@todo this could still grow too big in memory\n                    //@todo implement model.boardEquals and pointsEquals to get rid of 'memorable' states?\n                    previous.game.timemachine.previousStates[previous.game.timemachine.previousStates.length - 1],\n                ];\n            } else {\n                previous.game.timemachine.previousStates = [];\n            }\n\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                state.setToken(Math.random());\n                return state;\n            }\n\n            return null;\n        });\n\n    //on every render, we refresh the click handlers in the model and the suggestions\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider value={{ player: this.props.player }}>\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n","import AspectRatio from \"../../common/AspectRatio/AspectRatio\";\nimport BoardWrap from \"./BoardWrap\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport DelayedSuspense from \"../../common/DelayedSuspense\";\nimport { GameContextProvider } from \"../Context/GameContext\";\nimport GameModes from \"../../GameModes\";\nimport { LaunchSettings } from \"../../Common\";\nimport { PauseProvider } from \"../Context/PauseContext\";\nimport Ratios from \"../../common/AspectRatio/Ratios\";\nimport React from \"react\";\n\ninterface GameProps {\n    launchState: LaunchSettings;\n    deck: Deck;\n    restart: () => void;\n}\n\nconst SinglePlayer = (props: GameProps) => {\n    const { launchState, deck, restart } = props;\n    return (\n        <AspectRatio ratio={Ratios._4to3}>\n            <div className={\"layout-grid-container \" + launchState.boardMode}>\n                <BoardWrap player={0} settings={launchState} restart={restart} deck={deck} />\n            </div>\n        </AspectRatio>\n    );\n};\n\nconst SplitScreen = (props: GameProps) => {\n    const { launchState, deck, restart } = props;\n    const Wrap = (i: number) => (\n        <div className={\"layout-grid-container \" + launchState.boardMode}>\n            <BoardWrap player={i} settings={launchState} restart={restart} deck={deck.copy()} />\n        </div>\n    );\n\n    return (\n        <div className=\"game-layout-container splitscreen\">\n            {Wrap(0)}\n            {Wrap(1)}\n        </div>\n    );\n};\n\nconst Game = (props: GameProps) => {\n    return (\n        <GameContextProvider>\n            <PauseProvider>\n                <DelayedSuspense delay={500} fallback={<h3>Loading...</h3>}>\n                    {props.launchState.boardMode === GameModes.SINGLEPLAYER && <SinglePlayer {...props} />}\n                    {props.launchState.boardMode === GameModes.VERSUS && <SplitScreen {...props} />}\n                </DelayedSuspense>\n            </PauseProvider>\n        </GameContextProvider>\n    );\n};\n\nexport default Game;\n"],"names":["defaultGameState","started","isEnded","end","winner","loser","GameContext","React","gameState","win","start","giveUp","useGameContext","GameContextProvider","props","setGameState","context","player","Date","now","Provider","value","children","defaultValue","state","replaceContext","updateContext","updateGameContext","restart","GlobalContext","useGlobalContext","ctx","Error","defaultPauseState","paused","pauses","pauseStartedAt","allowed","pausedBy","showMenu","showCards","defaultPauseContext","togglePause","toggleMenu","getElapsed","PauseContext","PauseProvider","setPaused","isPaused","length","show","padleft","i","msec","getElapsedMs","reduce","a","b","hh","Math","floor","mm","ss","usePauseContext","AutoDealerRenderer","previous","usePrevious","timeout","settings","launchSettings","speed","setTimeout","stock","stack","passes","waste","hand","isFromWaste","putDownHand","addAll","popTop","canRecycle","recycle","clearTimeout","AutoDealer","pause","Blinker","startBlink","selector","blinkFor","game","registerBlink","unblink","s","stopBlink","Tableau","blink","index","tableau","stacks","dispatchPutDown","card","position","wouldAcceptHand","src","source","registerMove","getTop","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","isHoldingCard","isHidden","uncover","registerUncover","Dealer","dealt","dealingAt","isDealt","dealOne","callback","dealer","deal","dealAll","newCard","popOne","isFirst","this","Dispatcher","clickHandler","getHandler","Focus","keyboard","validSettings","players","inputMethod","isKeyBoard","isKeyboard","setCard","unsetCard","Card","unsetStack","setStack","hasCard","hasStack","BasicStack","suggestion","getClickable","filter","canClick","onClick","clickEmpty","accepts","HandHoldingStack","getHandContent","FoundationStack","suit","acceptedCards","usedCards","icon","color","getCurrentAccepted","currentAccepted","type","denomination","setOnClick","p","cards","forEach","sindex","getFoundationOrder","MultiStack","Foundation","Object","keys","Suits","map","key","c","hasMoreThanOneCard","currentCard","add","putDown","causeEntropy","min","interactionEntropy","push","pop","remove","equals","getPreviousUsed","countCards","f","setEntropy","lvl","element","copy","orig","origStack","foundation","_card","Rating","points","multiplicator","ratings","applyRating","text","console","debug","target","registerHint","disableHint","currentMove","rateMove","registerRecycle","drawMode","recyclingMode","diff","setSuccess","penalize","other","undoPenalty","penalty","pow","done","hintPenalty","getTimePenalty","secondsToFinish","trunc","getBonusPoints","round","getTotal","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","previousStates","memorable","modified","pushPreviousState","modelEquals","popPreviousState","id","current","isRequested","popPrevious","timemachine","stackEquals","every","stacksEqual","Game","rating","Hand","splice","model","_onClick","isHoldingKing","isFromCurrentSource","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","parseInt","Navigator","currentIndex","rows","getZindex","elem","targets","update","pos","row","j","zIndex","x","y","z","finishNav","valid","moveLeft","moveRight","direction","moveUp","clickable","toggleRow","moveDown","pickLast","last","focus","pressCurrent","before","navigator","undefined","Settings","baseEntropy","suggestionModes","suggestionMode","setSuggestionMode","sm","SuggestionModes","enableHint","isTemporary","next","Stock","recyclings","reverse","setCardProperties","isOnTop","result","top","_position","moveToWaste","recycleWaste","Waste","Suggestions","evaluateOptions","disableAllSuggestions","getUncoverOptions","getPutdownSuggestions","getPickupOptions","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","range","getTableauOrder","indexOf","offset","canUncover","onClickhidden","click","getStack","canPutDown","getCard","stackEntropy","entropy","concat","canAdd","suggestor","token","setToken","withSuggestions","_hasSuggestion","some","hasNonStockSuggestions","hasSuggestions","canAutoSolve","clearSuccess","clear","_c","success","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","RenderAutoSolve","solving","setSolving","canAutosolve","Solver","AutoSolver","suggestedFoundations","suggestedFoundation","suggestedTableaus","suggestedCards","suggestedCard","useTokenEffect","Uncoverer","AutoUncoverer","autoUncover","BoardContext","useBoardContext","BoardProvider","BoardGamePad","isGamePadDriven","isSinglePlayer","boardMode","GameModes","switchToGamePad","GamePad","layout","GamepadLayout","gamepadIndex","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","BoardNavigator","beforeFocused","handlers","modifier","handler","isVisible","supportsHints","isDisabled","_state","useEffectOnce","timeouts","quickDeal","PossibleFailScreen","refused","since","setRefused","refuse","val","className","MenuTitle","mdiHandBackLeft","MenuTree","keyboardLayout","MenuButton","mdiPlay","title","mdiFlagOutline","FailDetector","any","nonStock","suggestions","setSuggestions","stockSuggestionCards","setStockSuggestionCards","isPossibleFail","setPossibleFail","Detector","WinDetector","Actors","DndPreview","rect","setRect","WindowDimensionContext","width","height","domRect","reff","getBoundingClientRect","left","usePreview","display","item","style","opacity","render","Firework","canvasRef","intensity","count","scalar","window","innerWidth","defaults","ticks","origin","particleCount","startVelocity","decay","spread","localConfetti","confetti","resize","fire","particleRatio","opts","assign","ref","CardFirework","ReRender","models","slice","offsetLeft","isSelected","displayName","inputEl","isDrag","setDrag","isFocused","useCallback","_isDrag","useDrag","_monitor","collect","monitor","isDragging","canDrag","_item","didDrop","dragRef","preview","getEmptyImage","captureDraggingState","getRef","useClassName","getClassName","hasSuggestion","isSuggested","setClassName","cardStyle","useCardStyle","getCardStyle","offsetTop","entropyStyle","pointerEvents","setCardStyle","stackbaseStyle","useStackBaseStyle","getStackbaseStyle","setStackbaseStyle","SuitIcon","size","path","e","preventDefault","clientX","clientY","ele","includes","offsetParent","ownerDocument","defaultView","pageXOffset","pageYOffset","disabled","tabIndex","StackBase","classname","useBlinkEffect","useStackDrop","useDrop","accept","canDrop","drop","horizontal","Clock","elapsed","setElapsed","interval","setInterval","clearInterval","Hearts","getHearts","createString","Array","from","join","Hint","suggestOnce","Points","showToast","toast","autoClose","ToggleMenu","Undo","undo","Header","mode","Menu","useNavigationContext","navigation","setNavigation","switchToMenu","menu","screeen","mainMenu","remaining","announcement","mdiSleep","label","mdiWeatherTornado","toggleMainMenu","toggled","EntropyLevels","setBaseEntropy","mdiWeatherWindy","setInteractionEntropy","mdiRecycle","reset","skip","mdiDelete","_Menu","parent","classNames","getOffset","additionalOffset","Board","closeOnClick","newestOnTop","limit","pauseOnFocusLoss","draggable","transition","Slide","EndScreen","BoardWrap","setState","random","SinglePlayer","launchState","AspectRatio","ratio","Ratios","SplitScreen","Wrap","DelayedSuspense","delay","fallback"],"sourceRoot":""}