{"version":3,"sources":["View/Game/Navigation/BoardGamePad.tsx","View/Game/Navigation/BoardKeyboard.tsx","View/Game/Navigation/BoardNavigator.tsx","View/Game/Dealer.tsx","View/Game/StackDescription.ts","View/Game/Card.tsx","View/Game/StackBase.tsx","View/Game/useBlinkEffect.ts","View/Game/Foundation.tsx","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","View/UI/Menu.tsx","View/Game/usePrevious.ts","View/Game/Stock.tsx","View/Game/Tableau.tsx","View/Game/Waste.tsx","View/Game/Board.tsx","View/UI/EndScreen.js","Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/BasicStack.ts","Model/Game/HandHoldingStack.ts","Model/Game/Foundation.ts","Model/Business/Foundation.ts","Model/Game/Rating.ts","Model/Game/TimeMachine.ts","Model/Game/Game.ts","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.ts","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/Tableau.ts","Model/Game/Waste.ts","Model/Model.ts","View/Game/BoardWrap.tsx"],"names":["BoardGamePad","props","state","React","useContext","GlobalContext","player","BoardContext","isGamePadDriven","settings","launchSettings","inputMode","isSinglePlayer","boardMode","GameModes","SINGLEPLAYER","switchToGamePad","ctx","focus","isKeyBoard","GamePad","gamepadIndex","players","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","layout","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","BoardNavigator","updateContext","updateGameContext","replaceContext","paused","PauseContext","before","x","navigator","currentIndex","y","z","beforeFocused","card","stack","isPaused","handlers","modifier","moveLeft","moveRight","moveUp","moveDown","handler","pressCurrent","finishNav","hand","length","onClick","isKeyboard","togglePause","suggestionMode","supportsHints","isTemporary","isVisible","isDisabled","enableHint","_state","previous","game","timemachine","popPreviousState","previousStates","rating","penalize","Dealer","timeouts","quickDeal","dealer","isDealt","dealAll","deal","dealt","push","setTimeout","dealOne","useEffect","forEach","timeout","clearTimeout","getStackLabel","source","names","map","id","label","split","parseInt","Card","ReRender","models","slice","index","offsetLeft","isSelected","isDrag","model","displayName","pause","inputEl","useRef","isFocused","hasCard","useState","setDrag","_isDrag","useDrag","item","type","render","collect","monitor","opacity","isDragging","canDrag","canClick","isHidden","currentCard","equals","begin","console","log","context","end","_item","didDrop","dragRef","preview","getEmptyImage","captureDraggingState","current","icon","face","style","pointerEvents","className","onFocus","onBlur","zIndex","offsetTop","top","entropyStyle","left","getCardStyle","ref","hasSuggestion","isSuggested","suggestion","blink","accepting","getClassName","e","preventDefault","clientX","clientY","ele","target","includes","offsetParent","rect","getBoundingClientRect","position","click","ownerDocument","defaultView","pageXOffset","pageYOffset","element","disabled","tabIndex","aria-label","title","StackBase","classname","hasStack","blinkFor","clickEmpty","children","useBlinkEffect","selector","unblink","FoundationStacks","foundation","stacks","Foundation","useDrop","accept","canDrop","accepts","drop","cards","Clock","getElapsed","elapsed","setElapsed","interval","setInterval","started","clearInterval","Hearts","recyclingMode","stock","passes","createString","Array","from","keys","join","getHearts","Hint","Points","points","ToggleMenu","Undo","Math","pow","multiplicator","Header","mode","Menu","restart","NavigationContext","navigation","setNavigation","switchToMenu","menu","pos","screeen","mainMenu","showMenu","remaining","allowed","pauses","announcement","keyboardLayout","pausedBy","MenuTitle","MenuTree","MenuButton","sm","SuggestionModes","next","key","setSuggestionMode","val","toggleMainMenu","toggled","EntropyLevels","baseEntropy","lvl","setEntropy","interactionEntropy","skip","_Menu","screen","navigationContext","value","usePrevious","Renderer","speed","waste","isFromWaste","putDownHand","addAll","popTop","canRecycle","recycle","Stock","TableauStacks","tableau","parent","Tableau","s","setAccepting","i","getOffset","Waste","_drop","drawMode","isHoldingCard","additionalOffset","Preview","usePreview","display","_itemType","reff","width","Board","options","HTML5toTouch","EndScreen","isEnded","getTimePenalty","Date","now","getBonusPoints","getTotal","Blinker","startBlink","registerBlink","stopBlink","dispatchPutDown","wouldAcceptHand","src","registerMove","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","uncover","registerUncover","dealingAt","callback","newCard","popOne","isFirst","this","Dispatcher","clickHandler","getHandler","Focus","keyboard","validSettings","setCard","unsetCard","unsetStack","setStack","BasicStack","getTop","getClickable","filter","HandHoldingStack","getHandContent","FoundationStack","setOnClick","acceptedCards","usedCards","color","getCurrentAccepted","currentAccepted","p","sindex","hasMoreThanOneCard","add","putDown","causeEntropy","min","pop","remove","getPreviousUsed","countCards","f","reduce","a","b","Object","Suits","suit","getFoundationOrder","template","copy","orig","origStack","copyAll","tryDetectEnd","_card","Rating","registerHint","disableHint","currentMove","rateMove","registerRecycle","debug","other","undoPenalty","penalty","done","hintPenalty","start","secondsToFinish","trunc","round","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","memorable","modified","pushPreviousState","modelEquals","isRequested","popPrevious","stackEquals","every","stacksEqual","Game","Hand","c","splice","_onClick","isHoldingKing","isFromCurrentSource","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","Navigator","rows","getZindex","elem","targets","update","row","j","valid","direction","undefined","clickable","toggleRow","pickLast","last","Settings","suggestionModes","get","getHintMode","allSuggestionModes","recyclings","reverse","setCardProperties","isOnTop","result","_position","moveToWaste","recycleWaste","Suggestions","evaluateOptions","disableAllSuggestions","NONE","getUncoverOptions","getPutdownSuggestions","getPickupOptions","FULL","SCORED","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","range","getTableauOrder","indexOf","onClickhidden","canUncover","getStack","canPutDown","getCard","stackEntropy","entropy","concat","offset","canAdd","suggestor","withSuggestions","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","createContext","BoardProvider","Provider","BoardWrap","setState","Component"],"mappings":"iXAuCeA,EA/BM,SAACC,GAA6B,IACvCC,EAAUC,IAAMC,WAAWC,KAA3BH,MACR,IAAKA,EAAO,OAAO,KAF2B,IAGtCI,EAAWH,IAAMC,WAAWG,IAA5BD,OACFE,EAA6D,WAA3CN,EAAMO,SAASC,eAAeC,UAChDC,EAAiBV,EAAMO,SAASC,eAAeG,YAAcC,IAAUC,aAEvEC,EAAkB,SAACC,GACrBA,EAAIC,MAAMC,YAAW,GACjBP,IACAK,EAAIR,SAASC,eAAeC,UAAY,YAIhD,OAAOC,GAAkBJ,EACrB,cAACY,EAAA,EAAD,CACIC,aAAcnB,EAAMO,SAASC,eAAeY,QAAQhB,GAAQiB,YAC5DC,OAAQ,kBAAMvB,EAAMuB,OAAOR,IAC3BS,QAAS,kBAAMxB,EAAMwB,QAAQT,IAC7BU,KAAM,kBAAMzB,EAAMyB,KAAKV,IACvBW,OAAQ,kBAAM1B,EAAM0B,OAAOX,IAC3BY,SAAU,kBAAM3B,EAAM2B,SAASZ,IAC/Ba,SAAU,kBAAM5B,EAAM4B,SAASb,IAC/Bc,OAAQ,kBAAM7B,EAAM6B,OAAOd,IAC3Be,OAAQ,kBAAM9B,EAAM8B,UACpBC,QAAS,kBAAM/B,EAAM+B,QAAQhB,IAC7BiB,OAAQ,kBAAMhC,EAAMgC,OAAOjB,MAE/B,M,gBCMOkB,EAhCO,SAACjC,GAA6B,IACxCC,EAAUC,IAAMC,WAAWC,KAA3BH,MACR,IAAKA,EAAO,OAAO,KAF4B,IAGvCI,EAAWH,IAAMC,WAAWG,IAA5BD,OACF6B,EAA+D,aAA5CjC,EAAMO,SAASC,eAAeC,UACjDC,EAAiBV,EAAMO,SAASC,eAAeG,YAAcC,IAAUC,aACvEqB,EAASxB,EAAiByB,IAAYC,YAAkBpC,EAAMO,SAASC,eAAeY,QAAQhB,GAAQiB,aAEtGgB,EAAmB,SAACtB,GACtBA,EAAIC,MAAMC,YAAW,GACjBP,IACAK,EAAIR,SAASC,eAAeC,UAAY,aAIhD,OAAOwB,GAAoBvB,EACvB,cAAC4B,EAAA,EAAD,CACIJ,OAAQA,EACRZ,OAAQ,kBAAMvB,EAAMuB,OAAOe,IAC3Bd,QAAS,kBAAMxB,EAAMwB,QAAQc,IAC7Bb,KAAM,kBAAMzB,EAAMyB,KAAKa,IACvBZ,OAAQ,kBAAM1B,EAAM0B,OAAOY,IAC3BX,SAAU,kBAAM3B,EAAM2B,SAASW,IAC/BV,SAAU,kBAAM5B,EAAM4B,SAASU,IAC/BT,OAAQ,kBAAM7B,EAAM6B,OAAOS,IAC3BR,OAAQ,kBAAM9B,EAAM8B,UACpBC,QAAS,kBAAM/B,EAAM+B,QAAQO,IAC7BN,OAAQ,kBAAMhC,EAAMgC,OAAOM,MAE/B,M,QCgEOE,EA7FQ,WAAO,IAAD,EAC2CtC,IAAMC,WAAWC,KAA7EH,EADiB,EACjBA,MAAOwC,EADU,EACVA,cAAeC,EADL,EACKA,kBAAmBC,EADxB,EACwBA,eACjD,IAAK1C,EAAO,OAAO,KACnB,IAAM2C,EAAS1C,IAAMC,WAAW0C,KACxBxC,EAAWH,IAAMC,WAAWG,IAA5BD,OACFyC,EAAS,CAAEC,EAAG9C,EAAM+C,UAAUC,aAAaF,EAAGG,EAAGjD,EAAM+C,UAAUC,aAAaC,EAAGC,EAAGlD,EAAM+C,UAAUC,aAAaE,GACjHC,EAAgB,CAAEC,KAAMpD,EAAMgB,MAAMoC,KAAMC,MAAOrD,EAAMgB,MAAMqC,OAC7DC,IAAaX,EAAO3C,MAAM2C,OAK1BY,EAAW,CACbjC,OAAQ,SAACkC,GAAD,OACJhB,GAAc,SAACzB,GACXyC,EAASzC,GACTA,EAAIgC,UAAUU,SAASZ,OAG/BtB,QAAS,SAACiC,GAAD,OACLhB,GAAc,SAACzB,GACXyC,EAASzC,GACTA,EAAIgC,UAAUW,UAAUb,OAGhCrB,KAAM,SAACgC,GAAD,OACFhB,GAAc,SAACzB,GACXyC,EAASzC,GACTA,EAAIgC,UAAUY,OAAOd,OAG7BpB,OAAQ,SAAC+B,GAAD,OACJhB,GAAc,SAACzB,GACXyC,EAASzC,GACTA,EAAIgC,UAAUa,SAASf,OAG/BnB,SAAU,SAAC8B,GAAD,OACNf,GAAkB,SAAC1B,GAAS,IAAD,EACvByC,EAASzC,GACT,IAAM8C,EAAO,OAAG7D,QAAH,IAAGA,GAAH,UAAGA,EAAO+C,iBAAV,aAAG,EAAkBe,aAAaX,GAC/CU,GAAWA,EAAQ9C,GACnBA,EAAIgC,UAAUgB,gBAGtBpC,SAAU,SAAC6B,GAAD,OACNhB,GAAc,SAACzB,GACXyC,EAASzC,GACTA,EAAIiD,KAAKX,MAAMY,QAAUlD,EAAIiD,KAAKX,MAAM,GAAGa,QAAQ,CAAEC,YAAY,GAAxCpD,CAAgDA,OAGjFe,QAAS,SAAC0B,GACNhB,GAAc,SAACxC,GACXwD,EAASxD,MAEb2C,EAAOyB,YAAYd,EAAUlD,IAGjCwB,OAAQ,SAAC4B,GACLhB,GAAc,SAACxC,GACXwD,EAASxD,GAnDH,SAACA,GAAD,OAAkBA,EAAMO,SAAS8D,eAAeC,eAAiBtE,EAAMO,SAAS8D,eAAeE,YAoDjGC,CAAUxE,KAnDP,SAACA,GAAD,OAAkBA,EAAMO,SAAS8D,eAAeE,YAmD9BE,CAAWzE,IAChCA,EAAMO,SAASmE,iBAK3B7C,OAAQ,WACJa,GAAe,SAACiC,GACZ,IAAMC,EAAWD,EAAOE,KAAKC,YAAYC,iBAAiB/E,EAAM6E,KAAKC,YAAYE,eAAef,OAAS,EAAGjE,GAC5G,OAAI4E,GACAA,EAASC,KAAKI,OAAOC,SAASP,EAAOE,KAAKI,QACnCL,GAEJ,SAGf7C,OAAQ,SAACyB,GACLhB,GAAc,SAACxC,GACXwD,EAASxD,MAEb2C,EAAOyB,YAAYd,EAAUlD,KAIrC,OAAOkD,EAAW,KACd,qCACI,cAAC,EAAD,eAAmBC,IACnB,cAAC,EAAD,eAAkBA,QChEf4B,EA/BW,WAAO,IAAD,EACMlF,IAAMC,WAAWC,KAA3CH,EADoB,EACpBA,MAAO0C,EADa,EACbA,eACf,IAAK1C,EAAO,OAAO,KACnB,IAAMoF,EAAkB,GAExB,GAAIpF,EAAMO,SAASC,eAAe6E,UAC1BrF,GAASA,EAAMsF,SAAWtF,EAAMsF,OAAOC,SACvC7C,EAAe1C,EAAMsF,OAAOE,eAE7B,CACH,IAAMC,EAAO,SAAPA,EAAQC,GACVN,EAASO,KACLC,YAAW,WACH5F,GAASA,EAAMsF,SAAWtF,EAAMsF,OAAOC,SACvC7C,EAAe1C,EAAMsF,OAAOO,QAAQH,EAAOD,MAEhD,MAIXxF,IAAM6F,WAAU,WAEZ,OADAL,EAAKzF,EAAMsF,OAAOI,OACX,kBACHN,EAASW,SAAQ,SAACC,GACdC,aAAaD,SAEtB,IACH/F,IAAM6F,WAAU,cAAU,CAAC9F,EAAMsF,OAAOC,UAE5C,OAAO,M,+BCrBIW,EAXO,SAACC,GACnB,IAAMC,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,KAAI,SAACC,GAAD,MAAQ,WAAaA,EAAK,MAC9DC,EAAQ,GACNC,EAAQL,EAAOK,MAAM,KAK3B,OAJAD,GAASC,EAAM,GACXA,EAAMvC,OAAS,IACfsC,GAASH,EAAMK,SAASD,EAAM,MAE3BD,G,QC6NIG,EA/MF,SAAPA,EAAQ3G,GACV,IAAM4G,EAAW,kBACb,cAACD,EAAD,0CAEW3G,GAFX,IAGQ6G,OAAQ7G,EAAM6G,OAAOC,MAAM9G,EAAM+G,MAAO/G,EAAM6G,OAAO3C,QACrD8C,WAAY,kBAAM,GAClBC,WAAY,kBAAM,GAClBF,MAAO,EACPG,OAAQA,OAIpB,IAAKlH,EAAM6G,OAAO3C,OACd,OAAO,KAEX,IAAMiD,EAAQnH,EAAM6G,OAAO7G,EAAM+G,OACjCH,EAASQ,YAAc,WAjBQ,MAmBMlH,IAAMC,WAAWC,KAA9CH,EAnBuB,EAmBvBA,MAAOyC,EAnBgB,EAmBhBA,kBACf,IAAKzC,EAAO,OAAO,KACnB,IAAMoH,EAAQnH,IAAMC,WAAW0C,KACzByE,EAAUpH,IAAMqH,OAA0B,MAC1CC,EAAYvH,EAAMgB,MAAMwG,QAAQN,GAvBP,EAwBLjH,IAAMwH,WAAoB1H,EAAMkH,QAxB3B,mBAwBxBA,EAxBwB,KAwBhBS,EAxBgB,KAyBzBC,EAAU5H,EAAMkH,QAAUA,EAzBD,EA0BSW,YAAQ,CAC5CC,KAAM,CAAEC,KAAM,OAAQZ,MAAOA,EAAOa,OAAQpB,KAC5CqB,QAAS,SAACC,GACN,MAAO,CAAEC,SAASD,EAAQE,aAAe,KAE7CC,QAAS,kBAAMlB,EAAMmB,aAAenB,EAAMoB,WAAyC,MAA5BtI,EAAMgE,KAAKuE,eAAyBrB,EAAMsB,OAAOxI,EAAMgE,KAAKuE,iBACnHE,MAAO,SAACR,GACJS,QAAQC,IAAIV,GACZP,GAAQ,IAEJR,EAAMhD,SAAanE,EAAMiH,YAAejH,EAAMiH,WAAWjH,EAAM+G,QAC/DrE,GAAkB,SAACmG,GACf1B,EAAMhD,QAAQ,CAAEC,YAAY,GAA5B+C,CAAqC0B,OAIjDC,IAAK,SAACC,EAAOb,GACTP,GAAQ,GACHO,EAAQc,WACTtG,GAAkB,SAACmG,GACf1B,EAAMhD,QAAQ,CAAEC,YAAY,GAA5B+C,CAAqC0B,SA9CtB,mBA0BtBV,EA1BsB,KA0BtBA,QAAWc,EA1BW,KA0BFC,EA1BE,KAqD/BhJ,IAAM6F,WAAU,WACZmD,EAAQC,cAAiB,CAAEC,sBAAsB,MAClD,IAGHlJ,IAAM6F,WAAU,WACRyB,GAAavH,EAAMO,SAASC,eAAeG,WAAaC,IAAUC,cAClEwG,GAAWA,EAAQ+B,SAAW/B,EAAQ+B,QAAQpI,UAEnD,CAACuG,EAAWvH,EAAMgB,MAAMoC,OAC3B,IA4EImD,EAAQL,EAAcgB,EAAMf,QAQhC,OAPAI,GAAS,KAETA,GAASW,EAAMoB,SAAW,cAAgBpB,EAAMY,KAAKuB,KAAOnC,EAAMoC,KAM9D,qCACI,qBAAKC,MAjBJrC,EAAMhD,QAIJ,GAHI,CAAEsF,cAAe,QAgBSC,UAAU,aAA3C,SACI,wBACIC,QAAS,aAKTC,OAAQ,aAGRJ,MAhDK,WACjB,IAAMA,EAAK,aACPrB,QAASP,EAAU,EAAIO,EACvB0B,QAAS7J,EAAM6J,OAAS7J,EAAM6J,OAAuF,IAA7E7J,EAAM8J,WAAa9J,EAAM8J,UAAU9J,EAAM+G,MAAO/G,EAAM6G,QAAU,EAAI,EAAI,IAAW,EAC3HkD,IAAK/J,EAAM8J,UAAY9J,EAAM8J,UAAU9J,EAAM+G,MAAO/G,EAAM6G,QAAU,GAAK,KAAO,GAC7EM,EAAM6C,cAYb,OARIhK,EAAMgH,aACNwC,EAAMS,KAAuC,EAAhCjK,EAAMgH,WAAWhH,EAAM+G,OAAa,MAGhDI,EAAMhD,UACPqF,EAAMC,cAAgB,QAGnBD,EA+BYU,GAEPC,IAxGMhD,EAAMmB,WAAaW,EAAU3B,EAyGnCoC,UAlEK,WACjB,IAAMU,EAAiBpK,EAAMqK,aAAerK,EAAMqK,YAAYrK,EAAM+G,QAAWI,EAAMmD,WACjFZ,EAAS,8BAA0BvC,EAAMY,KAAKuB,MAUlD,OATAI,GACM1J,EAAMiH,YAAejH,EAAMiH,WAAWjH,EAAM+G,QAAYS,GAAc4C,EAAgD,GAAxH,sBAAuGjD,EAAMf,QACjHsD,IAAc9B,GAAW5H,EAAMiH,YAAcjH,EAAMiH,WAAWjH,EAAM+G,SAAWa,EAAU,iBAAmB,GAC5G8B,GAAa1J,EAAMuK,MAAQ,SAAW,GACtCb,GAAavC,EAAMmB,WAAa,aAAe,GAE/CoB,GAAaU,IAAkB5C,EAAY,kBAAoB,GAC/DkC,GAAalC,EAAY,gBAAkB,GAC3CkC,GAAa1J,EAAMwK,UAAY,gBAAkB,GAuD1BC,GACXtG,QApGA,SAACuG,GACbA,EAAEC,iBAIF,IAHA,IAAMzJ,EAA0B,GAAbwJ,EAAEE,SAA6B,GAAbF,EAAEG,QACnCC,EAAMJ,EAAEK,OAELD,IAAQA,EAAIpB,UAAUsB,SAAS,cAClCF,EAAMA,EAAIG,aAGd,IAAMC,EAAOJ,EAAIK,wBACXC,EAAW,CACblK,aACAmK,MAAO,CACHtI,EAAG2H,EAAEE,QAAUE,EAAIQ,cAAcC,YAAYC,YAC7CtI,EAAGwH,EAAEG,QAAUC,EAAIQ,cAAcC,YAAYE,aAEjDC,QAAS,CACL3I,EAAGmI,EAAKnI,EACRG,EAAGgI,EAAKhI,IAGVvC,EAAiBV,EAAMO,SAASC,eAAeG,YAAcC,IAAUC,aAEzEqG,EAAMhD,UAAYiH,EAASlK,YAC3BwB,GAAkB,SAACmG,GACf1B,EAAMhD,QAAQiH,EAAdjE,CAAwB0B,GACpBlI,IACAkI,EAAQrI,SAASC,eAAeC,UAAY,aA0E5CiL,UAAWxE,EAAMmB,YAAcjB,EAAMpH,MAAM2C,OAC3CgJ,SAAUzE,EAAMmB,WAAa,GAAK,EAClCuD,aAAYrF,EACZsF,MAAOtF,EAjBX,SAmBI,qBAAKkD,UAAU,eAAf,SACKvC,EAAMoB,UAAYlB,EAAMpH,MAAM2C,OAC3B,qBAAK8G,UAAU,YAAf,kBAEA,sBAAKA,UAAU,sBAAf,UACI,8BACI,qBAAKA,UAAU,eAAf,SAA+BvC,EAAMY,KAAKuB,SAE9C,8BACI,qBAAKI,UAAU,aAAf,SAA6BvC,EAAMoC,SAEvC,uCACA,8BACI,qBAAKG,UAAU,eAAf,SAA+BvC,EAAMY,KAAKuB,SAE9C,qBAAKI,UAAU,WAAf,SACI,sBAAKA,UAAU,eAAf,UAA+BvC,EAAMoC,KAArC,SAEJ,8BACI,qBAAKG,UAAU,eAAf,SAA+BvC,EAAMY,KAAKuB,SAE9C,uCACA,8BACI,qBAAKI,UAAU,cAAf,SAA8BvC,EAAMoC,SAExC,8BACI,qBAAKG,UAAU,eAAf,SAA+BvC,EAAMY,KAAKuB,kBAOjEtJ,EAAM6G,OAAO3C,OAAS,EAAIlE,EAAM+G,OAAS,cAACJ,EAAD,2BAAU3G,GAAV,IAAiBkH,OAAQU,EAASb,MAAO/G,EAAM+G,MAAQ,SC9J9FgF,EA5DG,SAAC/L,GACf,IAAIgM,EAAY,mBACV1E,EAAUpH,IAAMqH,OAA0B,MAFmB,EAG9BrH,IAAMC,WAAWC,KAA9CH,EAH2D,EAG3DA,MAAOyC,EAHoD,EAGpDA,kBACf,IAAKzC,EAAO,OAAO,KACnBC,IAAM6F,WAAU,WACZ,GAAI9F,EAAMgB,MAAMgL,SAASjM,EAAMmH,MAAMf,SAAWnG,EAAMO,SAASC,eAAeG,WAAaC,IAAUC,aAAc,CAC/G,IAAMuI,EAAU/B,GAAWA,EAAQ+B,QAAU/B,EAAQ+B,QAAU,KAC/DA,GAAWA,EAAQpI,YAGtBjB,EAAMmH,MAAM7D,MAAMY,OASnB8H,GAAa,eARThM,EAAMmH,MAAM+E,SACZF,GAAa,gBACN/L,EAAMgB,MAAMgL,SAASjM,EAAMmH,MAAMf,QACxC4F,GAAa,kBAEbA,GAAa,gBAMjBhM,EAAMmH,MAAMmD,aAAetK,EAAMmH,MAAM7D,MAAMY,SAC7C8H,GAAa,qBAGjB,IAQIxF,EAAQL,EAAcnG,EAAMmH,MAAMf,QAGtC,OAFAI,GAAS,iBAGL,wBACImD,QAAS,aAKTC,OAAQ,aAGRO,IAAK7C,EACLoC,UAAWsC,EACX7H,QAvBQ,SAACuG,GACbA,EAAEC,iBACF,IAAMzJ,EAA0B,GAAbwJ,EAAEE,SAA6B,GAAbF,EAAEG,QAClC3J,GACDwB,EAAkB1C,EAAMmH,MAAMgF,WAAW,CAAEjL,iBAoB3CyK,WAAY3L,EAAMmH,MAAM7D,MAAMY,OAC9B0H,SAAW5L,EAAMmH,MAAM7D,MAAMY,QAAc,EAAL,EACtC2H,aAAYrF,EACZsF,MAAOtF,EAfX,SAiBKxG,EAAMoM,YClCJC,EArBQ,SAACC,GAAyB,IAAD,EACXpM,IAAMC,WAAWC,KAA1CqC,EADoC,EACpCA,cAAexC,EADqB,EACrBA,MACvB,GAAKA,EAAL,CACA,IAAMkH,EAAQmF,EAASrM,GACnBgG,EAAe,KACnB/F,IAAM6F,WAAU,WAUZ,OATI9F,GAASqM,EAASrM,GAAOiM,WACzBjG,EAAUJ,YACN,kBACIpD,GAAc,SAACxC,GACXqM,EAASrM,GAAOsM,QAAQtM,QAEhC,MAGD,WACHiG,aAAaD,MAElB,CAAChG,EAAOkH,EAAM+E,a,QCHNM,EAZU,WAAO,IACpBvM,EAAUC,IAAMC,WAAWC,KAA3BH,MACR,OAAKA,EAED,mCACKA,EAAMwM,WAAWC,OAAOpG,KAAI,SAACmG,EAAY1F,GAAb,OACzB,cAAC,EAAD,CAAwBI,MAAOsF,EAAY1F,MAAOA,GAAjCA,QAJV,MAYjB4F,EAAa,SAAC3M,GAChBqM,GAAe,SAAClF,GAAD,OAAWA,EAAMsF,WAAWC,OAAO1M,EAAM+G,UADb,IAEnCrE,EAAsBxC,IAAMC,WAAWC,KAAvCsC,kBACFyE,EAAQnH,EAAMmH,MAHuB,EAI1ByF,YAAQ,CACrBC,OAAQ,OACRC,QAAS,SAAChF,GACN,OAAO9H,EAAMmH,MAAM4F,QAAQjF,EAAKX,QAEpC6F,KAAM,WACFtK,EAAkB1C,EAAMmH,MAAMgF,WAAW,CAAEjL,YAAY,QANtD8L,EAJkC,oBAanC/M,EAAUC,IAAMC,WAAWC,KAA3BH,MACFgN,GAAa,OAALhN,QAAK,IAALA,OAAA,EAAAA,EAAOgE,KAAKmC,SAAUe,EAAMf,OAA5B,sBAAyCe,EAAM7D,OAA/C,YAAyDrD,EAAMgE,KAAKX,QAApE,YAAiF6D,EAAM7D,OACrG,OACI,sBAAKoG,UAAU,cAAgCS,IAAK6C,EAApD,UACI,cAAC,EAAD,CAAW7F,MAAOA,EAAlB,SACI,qBAAKuC,UAAW,qCAAuCvC,EAAMmC,KAA7D,SAAoEnC,EAAMmC,SAE9E,cAAC,EAAD,CACIvC,MAAO,EAEPF,OAAQoG,EACR1C,MAAOpD,EAAM+E,SACb7B,YAAa,SAACtD,GAAD,OAAWI,EAAMmD,YAAcnD,EAAM7D,MAAMY,OAAS,GAAK6C,GACtEE,WAAY,SAACF,GAAD,OAAWA,EAAQI,EAAM7D,MAAMY,OAAS,IAJ/C,KANqBlE,EAAM+G,Q,QChBjCmG,G,MArBD,WAAO,IAAD,EACchN,IAAMC,WAAW0C,KAAvC5C,EADQ,EACRA,MAAOkN,EADC,EACDA,WADC,EAEcjN,IAAMwH,SAAS,IAF7B,mBAET0F,EAFS,KAEAC,EAFA,KAahB,OAVAnN,IAAM6F,WAAU,WACZ,IAAMuH,EAAWC,aAAY,WACrBtN,EAAMuN,UAAYvN,EAAM2C,QACxByK,EAAWF,OAEhB,KAEH,OAAO,kBAAMM,cAAcH,MAC5B,CAACrN,EAAMuN,QAASvN,EAAM2C,SAEjB3C,EAAMuN,SAAYJ,EACtB,sBAAK1D,UAAU,eAAf,UACI,qBAAKA,UAAU,iBAAf,0BACC0D,KAH2B,OCWzBM,EAxBA,WAAO,IACVzN,EAAUC,IAAMC,WAAWC,KAA3BH,MACR,IAAKA,EAAO,OAAO,KAoBnB,OAAO,qBAAKyJ,UAAU,kBAAf,SAnBW,WACd,GAAmD,YAA/CzJ,EAAMO,SAASC,eAAekN,cAC9B,MAAO,eAGX,GAAmD,UAA/C1N,EAAMO,SAASC,eAAekN,cAC9B,OAAO1N,EAAM2N,MAAMC,OAAS,EAAI,eAAO,eAG3C,GAAmD,UAA/C5N,EAAMO,SAASC,eAAekN,cAA2B,CACzD,IAAMG,EAAe,SAAC5J,EAAgBoF,GAAjB,OACjByE,MAAMC,KAAK,IAAID,MAAM7J,GAAQ+J,QACxB3H,KAAI,kBAAMgD,KACV4E,KAAK,KAEd,OAAOJ,EAAa7N,EAAM2N,MAAMC,OAAQ,gBAAQC,EAAa,EAAI7N,EAAM2N,MAAMC,OAAQ,gBAEzF,OAAO,KAE8BM,MCC9BC,EAtBF,WAAO,IAAD,EACkBlO,IAAMC,WAAWC,KAA1CH,EADO,EACPA,MAAOwC,EADA,EACAA,cACf,IAAKxC,EAAO,OAAO,KACnB,IAAMwE,EAAY,SAACxE,GAAD,OAAkBA,EAAMO,SAAS8D,eAAeC,eAAiBtE,EAAMO,SAAS8D,eAAeE,aAE3GE,EAAa,SAACzE,GAAD,OAAkBA,EAAMO,SAAS8D,eAAeE,aASnE,OAAQC,EAAUxE,GACd,8BACI,wBAAQ6L,MAAM,OAAO3H,QAAS,kBARlC1B,GAAc,SAACxC,GACPwE,EAAUxE,KAAWyE,EAAWzE,IAChCA,EAAMO,SAASmE,iBAMgCgH,SAAUjH,EAAWzE,GAAxE,SACI,sBAAMyJ,UAAU,OAAhB,8BAHe,MCLhB2E,EAVA,WAAO,IACVpO,EAAUC,IAAMC,WAAWC,KAA3BH,MAER,OACI,qCACI,qBAAKyJ,UAAU,iBAAf,0BADJ,WAC8CzJ,QAD9C,IAC8CA,OAD9C,EAC8CA,EAAO6E,KAAKI,OAAOoJ,WCS1DC,EAbI,WACf,IAAM3L,EAAS1C,IAAMC,WAAW0C,KACxBxC,EAAWH,IAAMC,WAAWG,IAA5BD,OAER,OACI,8BACI,wBAAQyL,MAAM,WAAW3H,QAAS,kBAAMvB,EAAOyB,aAAazB,EAAO3C,MAAM2C,OAAQvC,IAAjF,SACI,sBAAMqJ,UAAU,OAAhB,yBCuBD8E,EA/BF,WAAO,IAAD,EACmBtO,IAAMC,WAAWC,KAA3CH,EADO,EACPA,MAAO0C,EADA,EACAA,eACf,IAAK1C,EAAO,OAAO,KAYnB,OAAKA,EAAM6E,KAAKC,YAAYE,eAAef,OAKvC,8BACI,wBACIyH,UAAW1L,EAAM6E,KAAKC,YAAYE,eAAef,OACjD4H,MAAO,iBAAmB2C,KAAKC,IAAI,EAAGzO,EAAM6E,KAAKI,OAAOyJ,eAAiB,IACzExK,QAnBC,kBACTxB,GAAe,SAACiC,GACZ,IAAMC,EAAWD,EAAOE,KAAKC,YAAYC,iBAAiB/E,EAAM6E,KAAKC,YAAYE,eAAef,OAAS,EAAGjE,GAC5G,OAAI4E,GACAA,EAASC,KAAKI,OAAOC,SAASP,EAAOE,KAAKI,QACnCL,GAEJ,SASP,SAKI,sBAAM6E,UAAU,OAAhB,wBAVD,MCOAkF,EAfA,SAAC5O,GAAD,OACX,sBAAK0J,UAAW,UAAY1J,EAAM6O,KAAlC,UACI,sBAAKnF,UAAU,eAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,OAEJ,cAAC,EAAD,IACA,sBAAKA,UAAU,iBAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,wDCqBNoF,EAAO,WAAO,IAAD,EAC2C5O,IAAMC,WAAWC,KAAnEH,EADO,EACPA,MAAOwC,EADA,EACAA,cAAeE,EADf,EACeA,eAAgBoM,EAD/B,EAC+BA,QACxC1H,EAAQnH,IAAMC,WAAW0C,KACvBxC,EAAWH,IAAMC,WAAWG,IAA5BD,OAHO,EAmBuBH,IAAMC,WAAW6O,KAA/CC,EAnBO,EAmBPA,WAAYC,EAnBL,EAmBKA,cAEdC,EAAe,SAACC,EAAcC,GAAf,OACjBH,EAAc,2BAAKD,GAAN,IAAkBhO,MAAO,OAAQqO,QAAS,GAAIC,SAAUH,EAAMA,KAAK,eAAMC,OAU1F,IAAKhI,EAAMpH,MAAMuP,SACb,OAAO,KAEX,IAAKvP,EACD,OAAO,KAGX,IAAMwP,EAAYpI,EAAMpH,MAAMyP,QAAUrI,EAAMpH,MAAM0P,OAAOzL,OAAS,EAEhE0L,EAAY,iCAA6BH,EAA7B,gBACC,GAAbA,IACAG,EAAY,iCAA6BH,EAA7B,gBAEC,GAAbA,IACAG,EAAe,sFAEfH,EAAY,IAAKG,EAAe,2BAEpC,IACMC,EADiB5P,EAAMO,SAASC,eAAeG,YAAcC,IAAUC,aACrCsB,IAAYC,YAAkBpC,EAAMO,SAASC,eAAeY,QAAQhB,GAAQiB,aAEpH,OAAI+F,EAAMpH,MAAM6P,WAAazP,EAErB,qBAAKqJ,UAAU,gBAAf,SACI,qBAAKA,UAAU,mBAAf,SACI,sBAAKA,UAAU,YAAf,UACI,cAACqG,EAAA,EAAD,CAAWvJ,MAAM,iBAChBa,EAAMpH,MAAM6P,SACb,qBAAKpG,UAAU,eAAf,SAA+BkG,WAQ/C,qBAAKlG,UAAU,gBAAf,SACI,qBAAKA,UAAU,mBAAf,SACI,sBAAKA,UAAU,YAAf,UACI,cAACqG,EAAA,EAAD,CAAWvJ,MAAM,iBAEjB,qBAAKkD,UAAU,eAAf,SAA+BkG,IAC/B,eAACI,EAAA,EAAD,CAAUH,eAAgBA,EAA1B,UACI,cAACI,EAAA,EAAD,CACI3G,KAAK,eACLwC,MAAM,SACN3H,QAAS,WA9D7BkD,EAAMhD,aAAY,GAAQ,MAkEV,cAAC4L,EAAA,EAAD,CACI3G,KAAMrJ,EAAMO,SAAS8D,eAAegF,KACpCwC,MAAK,uBAAkB7L,EAAMO,SAAS8D,eAAekC,OACrDrC,QAAS,WA1EP,IAAC+L,IA2EmBC,IAAgBC,KAAKnQ,EAAMO,SAAS8D,gBAAgB+L,IA3ExD5N,GAAc,SAACxC,GAAD,OAAWA,EAAMO,SAAS8P,kBAAkBJ,SA8EhF,eAACD,EAAA,EAAD,CACI3G,KAAK,qBACLwC,MAAM,UACN3H,QAAS,SAACkL,GAAD,OApEV,SAACkB,EAAalB,GAC7BJ,EAAWM,WAAagB,EACxBpB,EAAaoB,EAAKlB,GAElBF,EAAa,GAAIE,GAgEqBmB,CAAe,UAAWnB,IAChDoB,QAAgC,WAAvBxB,EAAWM,SAJxB,UAMI,cAACU,EAAA,EAAD,CACI3G,KAAK,qBACLwC,MAAK,wBAAmB4E,IAAczQ,EAAMO,SAASmQ,cACrDxM,QAAS,WAtFd,IAACyM,IAwFY3Q,EAAMO,SAASmQ,YAAcD,IAAcxM,OAAS,EAAIjE,EAAMO,SAASmQ,YAAc,EAAI,EAxFrFlO,GAAc,SAACxC,GAAD,OAAWA,EAAM4Q,WAAWD,SA4F1D,cAACX,EAAA,EAAD,CACI3G,KAAK,qBACLwC,MAAK,0BAAqB4E,IAAczQ,EAAMO,SAASsQ,qBACvD3M,QAAS,WA9FP,IAACyM,IAgGK3Q,EAAMO,SAASsQ,mBAAqBJ,IAAcxM,OAAS,EACrDjE,EAAMO,SAASsQ,mBAAqB,EACpC,EAlGKrO,GAAc,SAACxC,GAAD,OAAYA,EAAMO,SAASsQ,mBAAqBF,WAuGzF,cAACX,EAAA,EAAD,CACI3G,KAAK,eACLwC,MAAM,eACN3H,QAAS,kBAjH7BkD,EAAMhD,aAAY,GAAO,QACzB1B,GAAe,SAAC1C,GAAD,OAAYA,EAAM6E,KAAKC,YAAYE,eAAiBhF,EAAM6E,KAAKC,YAAYE,eAAe,GAAK,SAiH1F8L,MAAO9Q,EAAM6E,KAAKC,YAAYE,eAAef,SAEjD,cAAC+L,EAAA,EAAD,CAAY3G,KAAK,qBAAMwC,MAAM,YAAY3H,QAAS,kBAAM4K,kBAOjEiC,EAzJD,WAAO,IAAD,EACoB9Q,IAAMwH,SAA0B,CAChE0H,KAAM,CACFrM,EAAG,EACHG,EAAG,GAEP+N,OAAQ,CACJlO,EAAG,EACHG,EAAG,GAEPjC,MAAO,OACPsO,SAAU,GACVD,QAAS,KAZG,mBAcV4B,EAAoB,CACtBjC,WAfY,KAgBZC,cAhBY,MAkBhB,OACI,cAAC,IAAD,CAAoBiC,MAAOD,EAA3B,SACI,cAAC,EAAD,OC5BGE,EAPK,SAAID,GACpB,IAAMhH,EAAMjK,IAAMqH,SAIlB,OAHArH,IAAM6F,WAAU,WACZoE,EAAId,QAAU8H,KAEXhH,EAAId,SCCTgI,EAAW,SAACrR,GAAiE,IAAD,EACxE6I,EAAU3I,IAAMC,WAAWC,KAEzB8D,EAA4BlE,EAA5BkE,OAAQsJ,EAAoBxN,EAApBwN,QAAS5K,EAAW5C,EAAX4C,OACnBiC,EAAWuM,EAAY,CAAElN,SAAQtB,SAAQ4K,YAkC/C,OAjCAtN,IAAM6F,WAAU,WACZ,IAAIE,EAAe,KA6BnB,OA3BI4C,GACAA,EAAQ5I,OACR4I,EAAQ5I,MAAMO,SAASC,eAAe6Q,OACtC9D,IACC5K,GACDiC,KACS,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUX,SAAUA,IAAkB,OAARW,QAAQ,IAARA,OAAA,EAAAA,EAAU2I,UAAWA,IAAmB,OAAR3I,QAAQ,IAARA,OAAA,EAAAA,EAAUjC,SAAUA,KAEnFqD,EAAUJ,YAAW,WACjBgD,EAAQpG,eAAc,SAACxC,GAEfiE,GAAUjE,EAAM2N,MAAMtK,MAAMY,QAC5BjE,EAAM2N,MAAMC,OAAS,IACpB5N,EAAM2N,MAAMtK,MAAMY,QAAUjE,EAAMsR,MAAMjO,MAAMY,UAE3CjE,EAAMgE,KAAKuN,eACXvR,EAAMsR,MAAME,cAEZxR,EAAM2N,MAAMtK,MAAMY,OAClBjE,EAAMsR,MAAMG,OAAOzR,EAAM2N,MAAM+D,UACxB1R,EAAM2N,MAAMgE,cACnB3R,EAAM2N,MAAMiE,QAAQ5R,EAAMsR,MAAMM,iBAI7C,MAEA,kBAAM3L,aAAaD,MAC3B,CAAC/B,EAAQtB,EAAQ4K,IAEf3E,GAAYA,EAAQ5I,MAGrB,sBAAKyJ,UAAU,oBAAf,UACI,cAAC,EAAD,CAAWvC,MAAO0B,EAAQ5I,MAAM2N,QAChC,cAAC,EAAD,CACI7G,MAAO,EAEPF,OAAQgC,EAAQ5I,MAAM2N,MAAMtK,MAC5BwG,UAAW,SAAC/C,GAAD,OAAYA,EAAQ,GAAM,GACrC8C,OAAQ,EACRU,MAAK,OAAE1B,QAAF,IAAEA,GAAF,UAAEA,EAAS5I,aAAX,aAAE,EAAgB2N,MAAM1B,SAC7B7B,YAAa,SAACtD,GAAD,aAAkB,OAAP8B,QAAO,IAAPA,GAAA,UAAAA,EAAS5I,aAAT,eAAgB2N,MAAMtD,aAAcvD,GAAS8B,EAAQ5I,MAAM2N,MAAMtK,MAAMY,OAAS,IALnG,MAPsB,MA2B5B4N,EATD,WAAO,IACT7R,EAAUC,IAAMC,WAAWC,KAA3BH,MACR,IAAKA,EAAO,OAAO,KACnBoM,GAAe,SAAClF,GAAD,OAAWA,EAAMyG,SAChC,IAJgB,EAIF1N,IAAMC,WAAW0C,KACG5C,MAA1B2C,EALQ,EAKRA,OAAQ4K,EALA,EAKAA,QAChB,OAAO,cAAC,EAAD,CAAUtJ,OAAQjE,EAAM2N,MAAMtK,MAAMY,OAAQtB,OAAQA,EAAQ4K,QAASA,KC/CjEuE,EAXO,WAAO,IACjB9R,EAAUC,IAAMC,WAAWC,KAA3BH,MACR,OAAKA,EAED,mCACKA,EAAM+R,QAAQtF,OAAOpG,KAAI,SAAC0L,EAASjL,GAAV,OACtB,cAAC,EAAD,CAAqBA,MAAOA,EAAOI,MAAO6K,EAASC,OAAQhS,EAAM+R,SAAnDjL,QAJP,MAWjBmL,EAAU,SAAClS,GACbqM,GAAe,SAAC8F,GAAD,OAAOA,EAAEH,QAAQtF,OAAO1M,EAAM+G,UADR,MAEH7G,IAAMwH,UAAkB,GAFrB,mBAE9B8C,EAF8B,KAEnB4H,EAFmB,KAG7B1P,EAAsBxC,IAAMC,WAAWC,KAAvCsC,kBAH6B,EAIpBkK,YAAQ,CACrBC,OAAQ,OACRC,QAAS,SAAChF,GACN,IAAMiF,EAAU/M,EAAMmH,MAAM4F,QAAQjF,EAAKX,OAEzC,OADAiL,EAAarF,GACNA,GAEXC,KAAM,WACFtK,EAAkB1C,EAAMmH,MAAMgF,WAAW,CAAEjL,YAAY,QARtD8L,EAJ4B,oBAgB7B/M,EAAUC,IAAMC,WAAWC,KAA3BH,MACFgN,GAAa,OAALhN,QAAK,IAALA,OAAA,EAAAA,EAAOgE,KAAKmC,SAAUpG,EAAMmH,MAAMf,OAAlC,sBAA+CpG,EAAMmH,MAAM7D,OAA3D,YAAqErD,EAAMgE,KAAKX,QAAhF,YAA6FtD,EAAMmH,MAAM7D,OAcvH,OACI,sBAAKoG,UAAU,cAAcS,IAAK6C,EAAlC,UACI,cAAC,EAAD,CAAW7F,MAAOnH,EAAMmH,QACxB,cAAC,EAAD,CACIJ,MAAO,EAEPyD,UAAWA,EACX3D,OAAQoG,EACR1C,MAAOvK,EAAMmH,MAAM+E,SACnB7B,YAAa,SAACtD,GAAD,OAAW/G,EAAMmH,MAAMmD,YAActK,EAAMmH,MAAM7D,MAAMY,OAAS,GAAK6C,GAClF+C,UAAW,SAAC/C,EAAOF,GAAR,OArBL,SAACE,EAAekG,GAC9B,IAAK,IAAIoF,EAAI,EAAGA,GAAKtL,EAAOsL,IACxB,GAAIpF,EAAMoF,KAAOpF,EAAMoF,GAAG9J,SAEtB,OADa,GAAJ8J,EAAuB,IAAbtL,EAAQsL,GAKnC,OADiB,GAARtL,EAc6BuL,CAAUvL,EAAOF,IAC/CI,WAAY,SAACF,GAAD,OAAWA,EAAQ/G,EAAMmH,MAAM7D,MAAMY,OAAS,IANrD,OCFNqO,EApDD,WAAO,IAAD,EACqBrS,IAAMC,WAAWC,KAA9CH,EADQ,EACRA,MAAOyC,EADC,EACDA,kBACf,IAAKzC,EAAO,OAAO,KACnBoM,GAAe,SAAClF,GAAD,OAAWA,EAAMoK,SAChC,IAJgB,EAqBE3E,YAAQ,CACtBC,OAAQ,OAERC,QAAS,WAGL,OAFgB7M,EAAMgE,KAAKuN,eAI/BxE,KAAM,WACFtK,EAAkBzC,EAAMsR,MAAMpF,WAAW,CAAEjL,YAAY,QATtDsR,EArBO,oBAkCVvF,GAAa,OAALhN,QAAK,IAALA,OAAA,EAAAA,EAAOgE,KAAKmC,SAAUnG,EAAMsR,MAAMnL,OAAlC,sBAA+CnG,EAAMsR,MAAMjO,OAA3D,YAAqErD,EAAMgE,KAAKX,QAAhF,YAA6FrD,EAAMsR,MAAMjO,OAEvH,OACI,sBAAKoG,UAAU,cAAcS,IAAKqI,EAAlC,UACI,cAAC,EAAD,CAAWrL,MAAOlH,EAAMsR,QACxB,cAAC,EAAD,CACIxK,MAAO,EAEPF,OAAQoG,EACRnD,UAAW,SAAC/C,GAAD,OAAYA,EAAQ,GAAM,GACrCC,WAAY,SAACD,GAAD,OAxCN,SAACA,GACf,GAA8C,UAA1C9G,EAAMO,SAASC,eAAegS,SAC9B,OAAO,EAEX,IAAMvO,EAASjE,EAAMgE,KAAKyO,iBAAmBzS,EAAMgE,KAAKuN,cAAgBvR,EAAMsR,MAAMjO,MAAMY,OAAS,EAAIjE,EAAMsR,MAAMjO,MAAMY,OACrHyO,EAAmB,EASvB,OARc,GAAVzO,IACAyO,EAAmB,GAGT,GAAVzO,IACAyO,EAAmB,IAGd5L,EAAQ7C,EAAS,GAAK,EAAKyO,EA0BLL,CAAUvL,IACjCwD,MAAOtK,EAAMsR,MAAMrF,SACnB7B,YAAa,SAACtD,GAAD,OAAW9G,EAAMsR,MAAMjH,YAAcvD,GAAS9G,EAAMsR,MAAMjO,MAAMY,OAAS,GACtF+C,WAAY,SAACF,GAAD,OAAWA,EAAQ9G,EAAMsR,MAAMjO,MAAMY,OAAS,IANrD,O,SCjCf0O,GAAU,SAAC5S,GAAyB,MAEM6S,eAApCC,EAF8B,EAE9BA,QAAoBhL,GAFU,EAErBiL,UAFqB,EAEVjL,MAAM0B,EAFI,EAEJA,MAClC,IAAKsJ,EACD,OAAO,KAEX,IAAM5H,EAAOlL,EAAMgT,KAAK7H,wBACxB,OACI,qBACI3B,MAAK,2BACEA,GADF,IAED4B,SAAU,WACV6H,MAAO,OACPhJ,MAAmB,EAAbiB,EAAKjB,KACXF,KAAiB,EAAZmB,EAAKnB,IACVF,OAAQ,IACR1B,QAAS,IARjB,SAWKL,EAAKE,UA4BHkL,GAvBD,SAAClT,GACX,IAAMmK,EAAMjK,IAAMqH,OAAuB,MACzC,OACI,eAAC,IAAD,CAAa4L,QAASC,IAAtB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAQvE,KAAM7O,EAAM6O,OACpB,qBAAKnF,UAAW,cAAgB1J,EAAM6O,KAAtC,SACI,sBAAKnF,UAAW,wBAA0B1J,EAAM6O,KAAhD,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,qBAAKnF,UAAU,qBAAqBS,IAAKA,EAAzC,SACKA,EAAId,SAAW,cAAC,GAAD,CAAS2J,KAAM7I,EAAId,YAEvC,cAAC,EAAD,IACA,cAAC,EAAD,SAGR,cAAC,EAAD,IACA,cAAC,EAAD,QC5BGgK,I,MAvBG,WAAO,IAAD,EACOnT,IAAMC,WAAWC,KAApCH,EADY,EACZA,MAAO8O,EADK,EACLA,QACT1H,EAAQnH,IAAMC,WAAW0C,KAE/B,OAAQ5C,EAAM6E,KAAKwO,QACf,sBAAK5J,UAAU,uBAAf,UACI,qBAAKA,UAAU,QAAf,0BACA,sBAAKA,UAAU,UAAf,UACI,yCAAYrC,EAAM8F,gBAClB,2CAAclN,EAAM6E,KAAKI,OAAOoJ,UAChC,iDAAoBrO,EAAM6E,KAAKI,OAAOqO,eAAetT,EAAM6E,KAAK0I,QAASvN,EAAM6E,KAAKgE,KAAO0K,KAAKC,UAChG,iDAAoBxT,EAAM6E,KAAKI,OAAOwO,eAAezT,EAAM6E,KAAK0I,QAASvN,EAAM6E,KAAKgE,KAAO0K,KAAKC,UAChG,iDAAoBxT,EAAM6E,KAAKI,OAAOyO,SAAS1T,EAAM6E,KAAK0I,QAASvN,EAAM6E,KAAKgE,KAAO0K,KAAKC,UAC1F,8BACI,yBAAQtP,QAAS4K,EAAjB,+BACO,sDAXM,OCAZ6E,G,iDACjBC,WAAa,SAACvH,EAAyBrM,GAC/BqM,EAASrM,GAAOiM,SAAW,KAC3BI,EAASrM,GAAOiM,SAAW,GAC3BjM,EAAM6E,KAAKgP,eAAc,GACzBxH,EAASrM,GAAOsM,QAAU,SAAC4F,GAAD,OAAc,EAAK4B,UAAUzH,EAAU6F,M,KAIzE4B,UAAY,SAACzH,EAAyBrM,GAClCqM,EAASrM,GAAOiM,SAAW,EAC3BjM,EAAM6E,KAAKgP,eAAc,KCfZ5B,G,iDACjB3H,MAAuB,SAACtK,EAAO8G,GAAR,OAAkB,IAAI6M,IAAUC,YAAW,SAAC1B,GAAD,OAAcA,EAAEH,QAAQtF,OAAO3F,KAAQ9G,I,KAEzG+T,gBAAkB,SAAC3Q,EAAY+H,EAAenL,EAAc8G,GACxD,GAAI9G,EAAM+R,QAAQiC,gBAAgBlN,GAAQ,CACtC,IAAMmN,EAAMjU,EAAMgE,KAAKmC,OACvBnG,EAAM+R,QAAQP,YAAY1K,IAAU9G,EAAM6E,KAAKqP,aAAa,WAAapN,EAAOmN,QAEhF,EAAK3J,MAAMtK,EAAO8G,I,KAI1BqN,eAAiB,SAAC/Q,EAAmB+H,EAAenL,EAAc8G,GAC1D1D,EACApD,EAAMgE,KAAKoQ,OAAOpU,EAAM+R,QAAQsC,iBAAiBjR,EAAM0D,GAAQ1D,EAAK+C,OAAQgF,IAAanL,EAAM6E,KAAKyP,iBAC5FlR,GACR,EAAKkH,MAAMtK,EAAO8G,KAKjByN,GAAb,4MACIJ,eAAiB,SAAC/Q,EAAmB+H,EAAenL,EAAc8G,GAC1D1D,GACA,EAAKoR,WAAWpR,EAAM0D,EAAO9G,IAHzC,EAOIwU,WAAa,SAACpR,EAAY0D,EAAe9G,GAA5B,OACRA,EAAMgE,KAAKyO,iBAAmBrP,EAAKkF,UAAYtI,EAAM+R,QAAQ0C,QAAQ3N,EAAO1D,IAASpD,EAAM6E,KAAK6P,mBARzG,YAAmCzC,ICvBd9M,GAKjB,aAAe,IAAD,gCAJdO,WAIc,OAHdiP,eAGc,OAFdpP,aAEc,OAMdM,QAAU,SAACH,EAAekP,GAAhB,OAAkC,SAAC5U,GACzC,OAAI0F,GAAS1F,EAAMsF,OAAOI,MACf,MAGX1F,EAAMsF,OAAOG,KAAKzF,EAAM2N,MAAO3N,EAAM+R,SACjC/R,EAAMsF,OAAOC,UACbvF,EAAM6E,KAAK0I,QAAUgG,KAAKC,OAGzBxT,EAAMsF,OAAOC,SACdqP,EAAS5U,EAAMsF,OAAOI,OAGnB1F,KApBG,KAuBdwF,QAAU,kBAAM,SAACxF,GACb,GAAI,EAAK0F,OAAS1F,EAAMsF,OAAOI,MAC3B,OAAO,KAEX,MAAQ1F,EAAMsF,OAAOC,SACjBvF,EAAMsF,OAAOG,KAAKzF,EAAM2N,MAAO3N,EAAM+R,SAGzC,OADA/R,EAAM6E,KAAK0I,QAAUgG,KAAKC,MACnBxT,IA/BG,KAkCdyF,KAAO,SAACkI,EAAcoE,GAClB,IAAK,IAAIK,EAAI,EAAKuC,UAAWvC,EAAIL,EAAQtF,OAAOxI,OAAQmO,IAAK,CACzD,IAAM/O,EAAQ0O,EAAQtF,OAAO2F,GAAG/O,MAChC,GAAIA,EAAMY,QAAU8N,EAAQtF,OAAOxI,OAASmO,EAAI,EAAG,CAC/C,IAAMyC,EAAUlH,EAAMmH,SActB,YAbID,IACAA,EAAQ1O,OAAS4L,EAAQtF,OAAO2F,GAAGjM,OAC/B9C,EAAMY,QAAU8N,EAAQtF,OAAOxI,OAAS,EAAImO,IAC5CyC,EAAQvM,UAAW,GAEvByJ,EAAQtM,KAAKoP,EAASzC,GACtB,EAAK1M,QACL,EAAKiP,YACD,EAAKA,WAAa5C,EAAQtF,OAAOxI,SACjC,EAAK0Q,UAAY,GAErB,EAAKpP,SAAU,IAInB,IAAMwP,EAA4B,GAAlB,EAAKJ,UAGrB,OAFA,EAAKA,UAAY,OACjB,EAAKpP,QAAUwP,GAKvB,EAAKxP,SAAU,GA5DfyP,KAAKtP,MAAQ,EACbsP,KAAKL,UAAY,EACjBK,KAAKzP,SAAU,GCPF0P,GAGjB,WAAYC,GAA6B,IAAD,gCAFxCA,kBAEwC,OAIxCC,WAAa,SAACnR,GACV,OAAIA,GAAQA,EAAKyO,gBACN,EAAKsB,gBAEL,EAAKI,gBARoB,KAYxCJ,gBAAkB,SAAC3Q,EAAY+H,EAAerE,GAA5B,OAA8C,SAAC9G,GACzDA,EAAMgE,KAAKyO,iBACX,EAAKyC,aAAanB,gBAAgB3Q,EAAM+H,EAAUnL,EAAO8G,KAdzB,KAkBxCqN,eAAiB,SAAC/Q,EAAY+H,EAAerE,GAA5B,OAA8C,SAAC9G,GACvDA,EAAMgE,KAAKyO,iBACZ,EAAKyC,aAAaf,eAAe/Q,EAAM+H,EAAUnL,EAAO8G,KAnB5DkO,KAAKE,aAAeA,G,SCNPE,GAKjB,WAAY7U,GAAqB,IAAD,gCAJhCA,cAIgC,OAHhC6C,UAGgC,OAFhCC,WAEgC,OADhCgS,cACgC,OAOhCC,cAAgB,iBAAiD,UAA3C,EAAK/U,SAASC,eAAeC,WAPnB,KAShCQ,WAAa,SAACkD,GACV,EAAKkR,SAAWlR,GAVY,KAahCoR,QAAU,SAACnS,GACP,EAAKA,KAAOA,EACZ,EAAKC,MAAQ,IAfe,KAkBhCmS,UAAY,SAACpS,GACL,EAAKA,MAAQA,GAAQsD,KAAK8B,OAAO,EAAKpF,KAAMA,KAC5C,EAAKA,KAAO,OApBY,KAwBhCqS,WAAa,SAACpS,GACN,EAAKA,OAASA,GAAS,EAAKA,OAASA,IACrC,EAAKA,MAAQ,KA1BW,KA8BhCqS,SAAW,SAACrS,GACR,EAAKD,KAAO,KACZ,EAAKC,MAAQA,GAhCe,KAmChCmE,QAAU,SAACpE,GAAD,OAAgB,EAAKiS,UAAY,EAAKC,iBAAmB,EAAKlS,MAAQA,GAAQsD,KAAK8B,OAAO,EAAKpF,KAAMA,IAnC/E,KAqChC4I,SAAW,SAAC3I,GAAD,OAAmB,EAAKgS,UAAY,EAAKC,iBAAmB,EAAKjS,OAASA,GAAS,EAAKA,OAASA,GApCxG2R,KAAKzU,SAAWA,EAChByU,KAAK5R,KAAO,KACZ4R,KAAK3R,MAAQ,GACb2R,KAAKK,UAAW,G,SCVHM,GAEjB,WAAYxP,GAAiB,IAAD,gCAD5BA,YAC4B,OAG5B9C,MAAgB,GAHY,KAI5BuS,OAA4B,kBAAO,EAAKvS,OAAS,EAAKA,MAAMY,QAAU,EAAKZ,MAAM,EAAKA,MAAMY,OAAS,IAAO,MAJhF,KAK5BoG,YAAa,EALe,KAM5BwL,aAAe,kBAAM,EAAKxS,MAAMyS,QAAO,SAAC1S,GAAD,OAAUA,EAAKiF,eALlD2M,KAAK7O,OAASA,GCFD4P,G,kDAEjB,WAAY5P,EAAgBnC,GAAa,IAAD,8BACpC,cAAMmC,IAFVnC,UACwC,IAIxCgS,eAAiB,kBAAO,EAAKhS,KAAKmC,QAAU,EAAKA,OAAS,EAAKnC,KAAKX,MAAQ,IAJpC,EAKxCwS,aAAe,uCAAU,EAAKxS,MAAMyS,QAAO,SAAC1S,GAAD,OAAUA,EAAKiF,eAA3C,YAA2D,EAAK2N,iBAAiBF,QAAO,SAAC1S,GAAD,OAAUA,EAAKiF,iBAL9E,EAMxC4D,SAAW,EAN6B,EAOxCK,QAAU,aALN,EAAKtI,KAAOA,EAFwB,E,UAFE2R,I,SCSjCM,GAAb,4MACIC,WAAyB,aAD7B,EAEIC,cAA0B,GAF9B,EAGIC,UAAmB,GAHvB,EAII/M,KAAe,GAJnB,EAKIgN,MAAgB,GALpB,EAMIpK,SAAmB,EANvB,EAOIC,WAA8B,aAPlC,EAQIoK,mBAAqB,WACjB,OAAO,EAAKH,cAAc,EAAKA,cAAclS,OAAS,IAT9D,EAWI6I,QAAU,SAAC1J,GACP,IAAKA,EAAM,OAAO,EAClB,IAAMmT,EAAkB,EAAKD,qBAC7B,OAAO,EAAKjN,MAAQjG,EAAK0E,KAAKuB,MAAQkN,GAAmBnT,EAAKkG,MAdtE,YAAqCyM,IAiBhBrJ,GAMjB,WAAYnM,EAAoByD,GAAa,IAAD,gCAL5CzD,cAK4C,OAJ5CyD,UAI4C,OAH5CyI,YAG4C,OAF5CR,cAE4C,OAD5CK,aAC4C,OAsB5C4J,WAAa,SAAChS,GACV,EAAKuI,OAAO1G,SAAQ,SAAC1C,EAAOyD,GACxBzD,EAAM6I,WAAa,SAACsK,GAAD,OAAOtS,EAAQ,KAAMsS,EAAG1P,IAC3CzD,EAAMA,MAAM0C,SAAQ,SAAC3C,EAAMqT,GACvBrT,EAAKc,QAAU,SAACsS,GAAD,OAAWtS,EAAQ,eAAKd,GAAQoT,EAAG1P,IAClD1D,EAAKiF,SAAW,kBAAMoO,GAAUpT,EAAMA,MAAMY,OAAS,MAEzD,EAAKD,KAAKkS,WAAW7S,OA7Be,KAiC5CiT,mBAAqB,SAACxP,GAClB,OAAO,EAAK2F,OAAO3F,GAAOwP,sBAlCc,KAqC5CtC,gBAAkB,SAAClN,GAAD,OAAoB,EAAK9C,KAAK0S,sBAAwB,EAAK5J,QAAQhG,EAAO,EAAK9C,KAAKuE,gBArC1D,KAuC5CiJ,YAAc,SAAC1K,GAAD,OAAmB,EAAK6P,IAAI7P,EAAO,EAAK9C,KAAK4S,YAvCf,KAyC5C9J,QAAU,SAAChG,EAAe1D,GACtB,OAAO,EAAKqJ,OAAO3F,GAAOgG,QAAQ1J,IA1CM,KA6C5CuT,IAAM,SAAC7P,EAAekG,GAClB,IAAM5J,EAAO4J,EAAM,GAInB,OAHA5J,EAAKyT,aAAarI,KAAKsI,IAAI,EAAKvW,SAASsQ,mBAAoB,IAC7DzN,EAAK+C,OAAS,EAAKsG,OAAO3F,GAAOX,OACjC,EAAKsG,OAAO3F,GAAOzD,MAAMsC,KAAKvC,GACvB,EAAKqJ,OAAO3F,GAAOsP,UAAUzQ,KAAK,EAAK8G,OAAO3F,GAAOqP,cAAcY,QAlDlC,KAqD5CC,OAAS,SAAClQ,EAAe1D,GAErB,OADA,EAAKqJ,OAAO3F,GAAOqP,cAAcxQ,KAAK,EAAK8G,OAAO3F,GAAOsP,UAAUW,OAC3D3T,GAAQA,EAAKoF,OAAO,EAAKoN,OAAO9O,KAAW,EAAK2F,OAAO3F,GAAOzD,MAAM0T,OAAU,MAvD9C,KA0D5CE,gBAAkB,SAACnQ,GAAD,OAAmB,YAAI,EAAK2F,OAAO3F,GAAOsP,WAAWW,OA1D3B,KA4D5CG,WAAa,kBAAM,EAAKzK,OAAOpG,KAAI,SAAC8Q,GAAD,OAAOA,EAAE9T,MAAMY,UAAQmT,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,IA5DtC,KA8D5C1B,OAAS,SAAC9O,GAAD,OAAmB,EAAK2F,OAAO3F,GAAOzD,MAAM,EAAKoJ,OAAO3F,GAAOzD,MAAMY,OAAS,IA9D3C,KA8E5C2M,WAAa,SAACD,GAEV,OADA,EAAKlE,OAAO1G,SAAQ,SAAC1C,GAAD,OAAWA,EAAMA,MAAM0C,SAAQ,SAAC0F,GAAD,OAAaA,EAAQoL,aAAarI,KAAKsI,IAAI,EAAGnG,UAC1F,GA/EPqE,KAAKzU,SAAWA,EAChByU,KAAKhR,KAAOA,EACZ,IAUMyI,EAAS8K,OAAOvJ,KAAKwJ,MACtBnR,KAAI,SAAC+J,GAAD,OAAiBoH,KAAMpH,MAC3B/J,KAAI,SAACoR,EAAM3Q,GAAP,OAZQ,SAACA,EAAe2Q,GAC7B,IAAMvF,EAAI,IAAI+D,GAAgB,cAAgBnP,EAAO9C,GAOrD,OANAkO,EAAE7O,MAAQ,GACV6O,EAAEiE,cAAF,YAAsBuB,gBACtBxF,EAAEkE,UAAY,GACdlE,EAAE7I,KAAOoO,EAAKpO,KACd6I,EAAEmE,MAAQoB,EAAKpB,MACfnE,EAAEjG,SAAW,EACNiG,EAIgByF,CAAS7Q,EAAO2Q,MAC3CzC,KAAKvI,OAAL,YAAkBA,GAElBuI,KAAK/I,SAAW,EAChB+I,KAAK1I,QAAU,cAzBFI,GAsEVkL,KAAO,SAACC,EAAkB7T,GAC7B,IAAM4T,EAAO,IAAIlL,GAAWmL,EAAKtX,SAAUyD,GAU3C,OATA4T,EAAKnL,OAASoL,EAAKpL,OAAOpG,KAAI,SAACyR,GAC3B,IAAM5F,EAAI,IAAI+D,GAAgB6B,EAAU3R,OAAQnC,GAMhD,OALAkO,EAAE7O,MAAQqD,KAAKqR,QAAQD,EAAUzU,OACjC6O,EAAEiE,cAAF,YAAsB2B,EAAU3B,eAChCjE,EAAEkE,UAAF,YAAkB0B,EAAU1B,WAC5BlE,EAAE7I,KAAOyO,EAAUzO,KACnB6I,EAAEmE,MAAQyB,EAAUzB,MACbnE,KAEJ0F,G,aCxGMlL,G,4DACjBpC,MAAuB,SAACtK,EAAO8G,GAAR,OAAkB,IAAI6M,IAAUC,YAAW,SAAC1B,GAAD,OAAcA,EAAE1F,WAAWC,OAAO3F,KAAQ9G,I,KAE5G+T,gBAAkB,SAAC3Q,EAAY+H,EAAenL,EAAc8G,GACxD,GAAI9G,EAAMwM,WAAWwH,gBAAgBlN,GAAQ,CACzC,IAAMmN,EAAMjU,EAAMgE,KAAKmC,OACvBnG,EAAMwM,WAAWgF,YAAY1K,IAAU9G,EAAM6E,KAAKqP,aAAa,cAAgBpN,EAAOmN,GACtF,EAAK+D,aAAahY,QAElB,EAAKsK,MAAMtK,EAAO8G,I,KAI1BqN,eAAiB,SAAC8D,EAAoB9M,EAAenL,EAAc8G,GAC/D,IAAM1D,EAAOpD,EAAMwM,WAAWoJ,OAAO9O,GACjC1D,GAAQpD,EAAMwM,WAAWyK,gBAAgBnQ,KAAW1D,EAAKkG,KACzDtJ,EAAMgE,KAAKoQ,OAAO,CAACpU,EAAMwM,WAAWwK,OAAOlQ,EAAO1D,IAAQA,EAAK+C,OAAQgF,IAAanL,EAAM6E,KAAKyP,iBAE/F,EAAKhK,MAAMtK,EAAO8G,I,0DAKb9G,GAES,KADAA,EAAMwM,WAAW0K,eAE/BlX,EAAM6E,KAAKwO,SAAU,EACrBrT,EAAM6E,KAAKgE,IAAM0K,KAAKC,W,KC/Bb0E,G,WAIjB,WAAY3X,GAAqB,IAAD,gCAHhCA,cAGgC,OAFhC8N,YAEgC,OADhCK,mBACgC,OAMhCwF,aAAe,SAACpJ,EAAgB3E,GAC5B,EAAKgS,aAAa,EAAK5X,SAAS6X,eAChC,IAAMC,EAAc,CAChBlS,OAAQA,EACR2E,OAAQA,GAEZ,EAAKuD,QAAU,EAAKiK,SAASD,IAZD,KAehCE,gBAAkB,WACd,EAAKJ,aAAa,EAAK5X,SAAS6X,eACa,UAAzC,EAAK7X,SAASC,eAAegS,UAAsE,YAA9C,EAAKjS,SAASC,eAAekN,gBAC9E,EAAKW,OAAS,IACV,EAAKA,OAAS,IACd,EAAKA,OAAS,EAEd,EAAKA,QAAU,KAGvB3F,QAAQ8P,MAAM,mDAzBU,KA6BhC9D,gBAAkB,WACd,EAAKyD,aAAa,EAAK5X,SAAS6X,eAChC,EAAK/J,QAAU,EACf3F,QAAQ8P,MAAM,qCAhCc,KA0ChCtT,SAAW,SAACuT,GACR,GAAI,EAAKlY,SAASC,eAAekY,YAAa,CAC1C,IAAMC,EAAUnK,KAAKC,IAAI,EAAGgK,EAAM/J,eAClChG,QAAQ8P,MAAR,sCAA6CG,EAA7C,qBACA,EAAKtK,OAASG,KAAKsI,IAAI,EAAKzI,OAAQoK,EAAMpK,QAAUsK,EACpD,EAAKjK,cAAgB+J,EAAM/J,cAAgB,IA/CnB,KAmDhCyJ,aAAe,SAACS,GACRA,GAAQ,EAAKrY,SAASC,eAAeqY,cACrC,EAAKxK,QAAU,GACf3F,QAAQ8P,MAAR,oDAtDwB,KAqFhClF,eAAiB,SAACwF,EAAejQ,GAC7B,IAAMkQ,GAAmBlQ,EAAMiQ,GAAS,IACxC,OAA0C,EAAnCtK,KAAKwK,MAAMD,EAAkB,IAvFR,KA0FhCtF,eAAiB,SAACqF,EAAejQ,GAC7B,IAAMkQ,GAAmBlQ,EAAMiQ,GAAS,IACxC,OAAIC,EAAkB,GACX,EAEJvK,KAAKyK,MAAO,IAAQF,EAAmB,KA/FlB,KAkGhCrF,SAAW,SAACoF,EAAejQ,GACvB,OAAO,EAAKwF,OAAS,EAAKoF,eAAeqF,EAAOjQ,GAAO,EAAKyK,eAAewF,EAAOjQ,IAlGlFmM,KAAKzU,SAAWA,EAChByU,KAAK3G,OAAS,EACd2G,KAAKtG,cAAgB,E,2DAgCXwK,GACNA,GAAMlE,KAAKzU,SAASC,eAAe2Y,cACnCnE,KAAK3G,QAAU,GACf3F,QAAQ8P,MAAM,oD,+BAoBbY,GACL,IAAMC,EAAY,SAACC,GAAD,MAAqC,WAApBA,EAAIC,OAAO,EAAG,IAC3CC,EAAe,SAACF,GAAD,MAAsC,cAArBA,EAAIC,OAAO,EAAG,KACpD,GAAIF,EAAUD,EAAKjT,SACf,GAAIqT,EAAaJ,EAAKtO,QAElB,OADApC,QAAQ8P,MAAM,wDACP,QAER,GAAmB,SAAfY,EAAKjT,OAAmB,CAC/B,GAAIqT,EAAaJ,EAAKtO,QAElB,OADApC,QAAQ8P,MAAM,sDACP,GAEX,GAAIa,EAAUD,EAAKtO,QAEf,OADApC,QAAQ8P,MAAM,kDACP,OAER,GAAIgB,EAAaJ,EAAKjT,SACrBkT,EAAUD,EAAKtO,QAEf,OADApC,QAAQ8P,MAAM,8DACN,GAIhB,OAAO,M,KAtFMN,GA0GVN,KAAO,SAACC,GACX,IAAMD,EAAO,IAAIM,GAAOL,EAAKtX,UAG7B,OAFAqX,EAAKvJ,OAASwJ,EAAKxJ,OACnBuJ,EAAKlJ,cAAgBmJ,EAAKnJ,cACnBkJ,G,IC5GM6B,G,WAIjB,aAAe,IAAD,gCAHdzU,oBAGc,OAFd0U,eAEc,OADdC,cACc,OAMdzF,aAAe,SAACpJ,EAAgB3E,GAC5B,EAAKuT,WAAY,EACjB,EAAKC,UAAW,EAEZxT,GAAU2E,IACV,EAAK4O,WAAY,IAXX,KAedE,kBAAoB,SAAC5Z,GACjB,IAAM4E,EAAW,EAAKI,eAAe,EAAKA,eAAef,OAAS,GAC7DW,GAAa,EAAKiV,YAAY7Z,EAAO4E,IACtC,EAAKI,eAAeW,KAAK3F,IAlBnB,KAsBdsU,eAAiB,WACb,EAAKqF,UAAW,EAChB,EAAKD,WAAY,GAxBP,KA2Bd3U,iBAAmB,SAACuB,EAAY8C,GAI5B,IAHA,IAAM0Q,EAAc,EAAK9U,eAAef,OAAS,GAAKqC,EAChDyT,EAAc,kBAAMD,GAAe,EAAK9U,gBAAkB,EAAKA,eAAe+R,OAChFnS,EAAWmV,IACRnV,KAAcA,EAASC,KAAKC,YAAY4U,WAAa,EAAKG,YAAYjV,EAAUwE,KAAa,EAAKpE,eAAef,QACpHW,EAAWmV,IAEf,OAAOnV,GAlCG,KAqCd2T,gBAAkB,WACd,EAAKmB,WAAY,EACjB,EAAKC,UAAW,GAvCN,KA0CdjF,gBAAkB,WAGd,OAFA,EAAKgF,WAAY,EACjB,EAAKC,UAAW,GACT,GA7CG,KAuDdK,YAAc,SAAC3C,EAAWC,GACtB,OAAOD,EAAEhU,MAAM4W,OAAM,SAAC7W,EAAMgP,GAAP,OAAa1L,KAAK8B,OAAOpF,EAAMkU,EAAEjU,MAAM+O,KAAOhP,EAAKkF,UAAYgP,EAAEjU,MAAM+O,GAAG9J,aAxDrF,KA2Dd4R,YAAc,SAAC7C,EAAyBC,GACpC,OAAOD,EAAE5K,OAAOwN,OAAM,SAAC5W,EAAO+O,GAAR,OAAc,EAAK4H,YAAY3W,EAAOiU,EAAE7K,OAAO2F,QA5D3D,KA+DdyH,YAAc,SAACxC,EAAUC,GACrB,OACI,EAAK0C,YAAY3C,EAAE1J,MAAO2J,EAAE3J,QAC5B,EAAKqM,YAAY3C,EAAE/F,MAAOgG,EAAEhG,QAC5B,EAAK4I,YAAY7C,EAAEtF,QAASuF,EAAEvF,UAC9B,EAAKmI,YAAY7C,EAAE7K,WAAY8K,EAAE9K,aAnErCwI,KAAKhQ,eAAiB,GACtBgQ,KAAK0E,WAAY,EACjB1E,KAAK2E,UAAW,E,2DA6CNT,GACNA,IACAlE,KAAK2E,UAAW,EAChB3E,KAAK0E,WAAY,O,KAvDRD,GA4EV7B,KAAO,SAACC,GACX,IAAMD,EAAO,IAAI6B,GAIjB,OAHA7B,EAAK5S,eAAL,YAA0B6S,EAAK7S,gBAC/B4S,EAAK8B,UAAY7B,EAAK6B,UACtB9B,EAAK+B,SAAW9B,EAAK8B,SACd/B,G,ICjFMuC,G,WAQjB,WAAY5Z,GAAqB,IAAD,gCAPhCA,cAOgC,OANhC0E,YAMgC,OALhCH,iBAKgC,OAJhCyI,aAIgC,OAHhC8F,aAGgC,OAFhCxK,SAEgC,OADhClG,YACgC,OAUhCuR,aAAe,SAACpJ,EAAgB3E,GAG5B,OAFA,EAAKlB,OAAOiP,aAAapJ,EAAQ3E,GACjC,EAAKrB,YAAYoP,aAAapJ,EAAQ3E,IAC/B,GAbqB,KAgBhCmO,eAAiB,WAEb,OADA,EAAKxP,YAAYwP,kBACV,GAlBqB,KAqBhCiE,gBAAkB,WAGd,OAFA,EAAKtT,OAAOsT,kBACZ,EAAKzT,YAAYyT,mBACV,GAxBqB,KA2BhC7D,gBAAkB,WAGd,OAFA,EAAKzP,OAAOyP,kBACZ,EAAK5P,YAAY4P,mBACV,GA7BPM,KAAKzU,SAAWA,EAChByU,KAAK/P,OAAS,IAAIiT,GAAO3X,GACzByU,KAAKlQ,YAAc,IAAI2U,GAEvBzE,KAAKzH,QAAU,EACfyH,KAAK3B,SAAU,EACf2B,KAAKnM,IAAM,E,2DA0BDqQ,GAGV,OAFAlE,KAAK/P,OAAO4O,cAAcqF,GAC1BlE,KAAKlQ,YAAY+O,cAAcqF,IACxB,M,KA5CMiB,GA+CVvC,KAAO,SAACC,GACX,IAAMD,EAAO,IAAIuC,GAAKtC,EAAKtX,UAI3B,OAHAqX,EAAK9S,YAAc2U,GAAY7B,KAAKC,EAAK/S,aACzC8S,EAAK3S,OAASiT,GAAON,KAAKC,EAAK5S,QAC/B2S,EAAKjV,OAASkV,EAAKlV,OACZiV,G,ICpDMwC,GAIjB,aAAe,IAAD,gCAHd/W,WAGc,OAFd8C,YAEc,OADdgF,cACc,OAMd2K,OAAmC,SAACzS,GAChC,OAAOA,EAAMyS,QAAO,SAACuE,GAAD,OAAOA,MAPjB,KAUdjG,OAAS,SAAC/Q,EAAwB8C,EAAgBgF,GAU9C,OATI9H,GAASA,EAAM,KACf,EAAKA,MAAQ,EAAKyS,OAAOzS,GAAOgD,KAAI,SAACgU,GAEjC,OADAA,EAAEhQ,YAAa,EACRgQ,KAEX,EAAKlU,OAASA,EACd,EAAKgF,SAAWA,GAGb9H,GApBG,KAuBduT,QAAU,WAGN,OAFA,EAAKzQ,OAAS,GACC,EAAK9C,MAAMiX,OAAO,EAAG,EAAKjX,MAAMY,SAzBrC,KA6BdiS,WAAa,SAAChP,GACV,GAAI,EAAKf,QAAU,EAAKA,QAAUe,EAAMf,OAAQ,CAC5C,IAAIoU,EAAWrT,EAAMgF,WACjBhF,EAAM7D,MAAMY,SACZsW,EAAWrT,EAAM7D,MAAM6D,EAAM7D,MAAMY,OAAS,GAAGC,SAEnD,EAAKb,MAAM0C,SAAQ,SAAC3C,GAChBA,EAAKc,QAAUqW,EACfnX,EAAKiF,SAAW,kBAAM,QArCpB,KA0CdoK,cAAgB,mBAAQ,EAAKpP,MAAMY,QA1CrB,KA4CduW,cAAgB,wBAAM,EAAK/H,iBAAmB,EAAKlK,eAA6C,MAA5B,YAAKA,qBAAL,eAAoBe,OA5C1E,KA8Cdf,YAAiC,kBAAO,EAAKkK,iBAAmB,EAAKpP,MAAM,IAAO,MA9CpE,KAgDdqT,mBAAqB,kBAAM,EAAKrT,MAAMY,OAAS,GAhDjC,KAkDdwW,oBAAsB,SAACrX,GAAD,OAAiB,EAAK+C,QAAU/C,EAAK+C,QAAU,EAAKA,QAAW,MAlDvE,KAoDdoL,YAAc,kBAAM,EAAKpL,QAAyB,SAAf,EAAKA,SAAqB,GApD/C,KAsDduU,iBAAmB,SAAC5T,GAAD,OAAmB,EAAKX,QAAU,EAAKA,QAAL,qBAA6BW,IAtDpE,KAwDd6T,cAAgB,SAAC7T,GAAD,OAAmB,EAAKX,QAAU,EAAKA,QAAL,kBAA0BW,IAxD9D,KA0Dd8T,iBAAmB,kBAAM,EAAKzU,QAAyC,YAA/B,EAAKA,OAAO0U,UAAU,EAAG,IA1DnD,KA4DdC,gBAAgC,kBAAO,EAAK3U,QAAUM,SAAS,EAAKN,OAAO0U,UAAU,KAAQ,GA3DzF7F,KAAK3R,MAAQ,GACb2R,KAAK7O,OAAS,GACd6O,KAAK7J,SAAW,MAPHiP,GAkEVxC,KAAO,SAACC,GACX,IAAMD,EAAO,IAAIwC,GAIjB,OAHAxC,EAAKvU,MAAQqD,KAAKqR,QAAQF,EAAKxU,OAC/BuU,EAAKzR,OAAS0R,EAAK1R,OACnByR,EAAKzM,SAAW0M,EAAK1M,SACdyM,G,ICjEMmD,GAIjB,WAAY7T,GAAe,IAAD,gCAH1BA,WAG0B,OAF1BlE,kBAE0B,OAD1BgY,UAC0B,OAM1BC,UAAY,SAACC,EAAc9X,GAEvB,IADA,IAAM+X,EAAUD,EAAKrF,eACZzD,EAAI,EAAGA,EAAI+I,EAAQlX,OAAQmO,IAChC,GAAI1L,KAAK8B,OAAOpF,EAAM+X,EAAQ/I,IAC1B,OAAOA,EAGf,OAAO,GAbe,KAgB1BgJ,OAAS,SAAChM,EAAahM,GACnB,IAAK,IAAIgP,EAAI,EAAGA,EAAI,EAAK4I,KAAK/W,OAAQmO,IAElC,IADA,IAAMiJ,EAAM,EAAKL,KAAK5I,GACbkJ,EAAI,EAAGA,EAAID,EAAIpX,OAAQqX,IAAK,CACjC,IAAMJ,EAAOG,EAAIC,GACjB,GAAIJ,GAAQA,EAAK/U,QAAUiJ,EAAK,CAC5B,IAAMxF,EAAS,EAAKqR,UAAUC,EAAM9X,GAGpC,OAFA,EAAKJ,aAAe,CAAEF,EAAGwY,EAAGrY,EAAGmP,EAAGlP,EAAG0G,QACrC,EAAK7F,eAxBK,KA+B1BwX,MAAQ,SAACnM,GAAD,OAAmBA,EAAItM,IAAM,EAAKE,aAAaF,GAAKsM,EAAInM,IAAM,EAAKD,aAAaC,GAAKmM,EAAIlM,IAAM,EAAKF,aAAaE,GA/B/F,KAiC1BO,SAAW,SAAC2L,GAAD,OACP,EAAKgK,KAAKhK,GAAK,WACX,EAAKpM,aAAaF,KACU,GAAxB,EAAKE,aAAaF,IAClB,EAAKE,aAAaF,EAAI,OArCR,KAyC1BY,UAAY,SAAC0L,GAAD,OACR,EAAKgK,KAAKhK,GAAK,WACX,EAAKpM,aAAaF,IACS,GAAvB,EAAKE,aAAaF,IAClB,EAAKE,aAAaF,EAAI,OA7CR,KAiD1BsW,KAAO,SAAChK,EAAeoM,GACnB,GAAK,EAAKD,MAAMnM,GAAhB,CAGAoM,IACA,IAAMpS,EAAU,EAAKA,eACNqS,GAAXrS,EACA,EAAKgQ,KAAK,EAAKpW,aAAcwY,IAE7B,EAAKxY,aAAaE,EAAIkG,EAAQyM,eAAe5R,OAAS,EACtD,EAAKF,eA3Da,KA+D1BJ,OAAS,SAACyL,GAAmB,IAAD,EACxB,GAAK,EAAKmM,MAAMnM,GAAhB,CAGA,IAAMsM,EAAS,UAAG,EAAKtS,iBAAR,aAAG,EAAgByM,eAC9B6F,GAAaA,EAAUzX,QAAU,EAAKjB,aAAaE,EAAI,GACvD,EAAKF,aAAaE,IAClB,EAAKa,aAEL,EAAK4X,WAAU,KAxEG,KA4E1B/X,SAAW,SAACwL,GAAmB,IAAD,EAC1B,GAAK,EAAKmM,MAAMnM,GAAhB,CAGA,IAAMsM,EAAS,UAAG,EAAKtS,iBAAR,aAAG,EAAgByM,eAC9B6F,GAAaA,EAAUzX,QAAU,EAAKjB,aAAaE,EAAIwY,EAAUzX,OAAS,GAC1E,EAAKjB,aAAaE,IAClB,EAAKa,aAEL,EAAK4X,WAAU,KArFG,KAyF1BA,UAAY,SAACC,GACkB,GAAvB,EAAK5Y,aAAaC,EAClB,EAAKD,aAAaC,EAAI,EAEtB,EAAKD,aAAaC,EAAI,EAE1B,IAAMmG,EAAU,EAAKA,UACfyS,EAAezS,EAAUA,EAAQyM,eAAe5R,OAAS,EAAI,EACnE,EAAKjB,aAAaE,EAAI0Y,EAAWC,EAAO,EACnCzS,EAGD,EAAKrF,YAFL,EAAKN,SAAS,EAAKT,eAnGD,KAyG1Be,UAAY,WAAO,IAAD,EAIP,EAHD2X,EAAS,UAAG,EAAKtS,iBAAR,aAAG,EAAgByM,eAC9B6F,GAAaA,EAAU,EAAK1Y,aAAaE,GACzC,EAAKgE,MAAMlG,MAAMuU,QAAQmG,EAAU,EAAK1Y,aAAaE,IAErD,EAAKgE,MAAMlG,MAAM0U,UAAS,YAAKtM,iBAAL,eAAgBjD,SAAU,IAExD,OAAO,GAhHe,KAmH1BiD,QAAU,WACN,OAAO,EAAK4R,KAAK,EAAKhY,aAAaC,GAAG,EAAKD,aAAaF,IApHlC,KAuH1BgB,aAAe,SAACjB,GAAkD,IAAD,EACvD6Y,EAAS,UAAG,EAAKtS,iBAAR,aAAG,EAAgByM,eAClC,OACI,EAAK3O,MAAMlG,MAAMoC,MACjB,EAAK8D,MAAMlG,MAAMoC,KAAKiF,YACtBqT,GACAA,EAAU,EAAK1Y,aAAaE,IAC5BwY,EAAU,EAAK1Y,aAAaE,GAAGoG,MAAQ,EAAKpC,MAAMlG,MAAMoC,KAAKkG,MAC7DoS,EAAU,EAAK1Y,aAAaE,GAAG4E,KAAKuB,MAAQ,EAAKnC,MAAMlG,MAAMoC,KAAK0E,KAAKuB,KAEhE,SAACtI,GACA,EAAKmG,MAAMlG,MAAMoC,MAAQ,EAAK8D,MAAMlG,MAAMoC,KAAKoF,OAAO3F,EAAOO,OAC7D,EAAK8D,MAAMlG,MAAMoC,KAAKc,QAAQ,CAAEC,YAAY,GAA5C,CAAoDpD,IAGrD,EAAKmG,MAAMlG,MAAMqC,OAAS,EAAK6D,MAAMlG,MAAMqC,OAASR,EAAOQ,MAC3D,SAACtC,GAAgB,IAAD,EACnB,YAAKqI,iBAAL,SAAgB8C,WAAW,CAAE/H,YAAY,GAAzC,CAAiDpD,IAI9C,SAACA,GACJA,EAAIgC,UAAUgB,YACdhD,EAAI8D,KAAKC,YAAY6U,UAAW,IA7IxC3E,KAAK9N,MAAQA,EACb8N,KAAKhS,aAAe,CAAEF,EAAG,EAAGG,EAAG,EAAGC,EAAG,GACrC8R,KAAKgG,KAAO,CAAC,CAAChG,KAAK9N,MAAMyG,MAAOqH,KAAK9N,MAAMoK,WAAOmK,GAAtC,mBAAoDzG,KAAK9N,MAAMsF,WAAWC,SAA1E,YAAuFuI,KAAK9N,MAAM6K,QAAQtF,UCbzGqP,GAOjB,WAAYtb,GAAiC,IAAD,gCAN5CA,oBAM4C,OAL5CkQ,iBAK4C,OAJ5CG,wBAI4C,OAH5CkL,qBAG4C,OAF5C1X,oBAE4C,OAQ5CgM,kBAAoB,SAACJ,GACb,EAAK5L,eAAe+L,MAAQH,IAC5B,EAAK5L,eAAiB6L,IAAgB8L,IAAI/L,KAVN,KAc5CvL,WAAa,WACT,EAAKL,eAAiB6L,IAAgB+L,eAfE,KAkB5C7D,YAAc,WACV,SAAI,EAAK/T,eAAeE,cAAe,EAAKF,eAAe8L,QACvD,EAAK9L,eAAiB6L,IAAgB8L,IAAI,EAAK3X,eAAe8L,OACvD,IApBX6E,KAAKxU,eAAiBA,EACtBwU,KAAKtE,YAAclQ,EAAekQ,YAClCsE,KAAKnE,mBAAqBrQ,EAAeqQ,mBACzCmE,KAAK+G,gBAAkB7L,IAAgBgM,qBACvClH,KAAK3Q,eAAiB6L,IAAgB8L,IAAIxb,EAAe6D,iBAZ5CyX,GAiCVlE,KAAO,SAACC,GACX,IAAMD,EAAO,IAAIkE,GAASjE,EAAKrX,gBAI/B,OAHAoX,EAAKvT,eAAiBwT,EAAKxT,eAC3BuT,EAAKlH,YAAcmH,EAAKnH,YACxBkH,EAAK/G,mBAAqBgH,EAAKhH,mBACxB+G,G,aCpCM/F,G,kDAOjB,WAAYxO,EAAe9C,GAAqB,IAAD,8BAC3C,cAAM,UAPVA,cAM+C,IAL/C4b,gBAK+C,IAJ/CvO,YAI+C,IAH/C3B,cAG+C,IAF/CK,aAE+C,IAD/CJ,gBAC+C,IAkB/CgK,WAAa,SAAChS,GACV,EAAKgI,WAAa,SAACsK,GAAD,OAAOtS,EAAQ,KAAMsS,EAAG,OAC1C,EAAKnT,MAAM0C,SAAQ,SAAC3C,EAAM0D,GACtB1D,EAAKc,QAAU,SAACsS,GAAD,OAAWtS,EAAQ,eAAKd,GAAQoT,EAAG,OAClDpT,EAAKiF,SAAW,kBAAMvB,GAAS,EAAKzD,MAAMY,OAAS,OAtBZ,EAyB/C6I,QAAU,kBAAM,GAzB+B,EA2B/CgI,OAAS,WAEL,OADe,EAAKzR,MAAM0T,OA5BiB,EAuC/CnF,QAAU,SAACN,GACP,QAAIA,EAAMrN,SACN,EAAKZ,MAAQiO,EAAM8K,UAAU/V,IAAI,EAAKgW,mBACtC,EAAKhZ,MAAM,EAAKA,MAAMY,OAAS,GAAGoE,SAAW,kBAAM,GACnD,EAAK8T,cACE,IA5CgC,EAkD/CE,kBAAoB,SAACjZ,GAIjB,OAHAA,EAAKyT,aAAarI,KAAKsI,IAAI,EAAKvW,SAASsQ,mBAAoB,IAC7DzN,EAAKkF,UAAW,EAChBlF,EAAK+C,OAAS,EAAKA,OACZ/C,GAtDoC,EAyD/CkZ,QAAU,SAAClZ,GAAD,OAAgBA,GAAQA,EAAKoF,OAAO,EAAKoN,WAzDJ,EA2D/ClE,OAAS,WACL,IAAI6K,EAAiB,GACrB,GAA6C,UAAzC,EAAKhc,SAASC,eAAegS,SAAsB,CACnD,IAAM1I,EAAM,EAAKzG,MAAM0T,MACnBjN,IAAKyS,EAAS,CAACzS,IASvB,MAP6C,UAAzC,EAAKvJ,SAASC,eAAegS,WAC7B+J,EAAS,EAAKlZ,MAAMiX,OAAO,EAAKjX,MAAMY,OAAS,IAE1B,GAArB,EAAKZ,MAAMY,QACX,EAAK2J,SAGF2O,GAxEoC,EAmF/C3L,WAAa,SAACD,GAEV,OADA,EAAKtN,MAAM0C,SAAQ,SAAC0F,GAAD,OAAaA,EAAQoL,aAAarI,KAAKsI,IAAInG,EAAK,OAC5D,iBAnFP,EAAKpQ,SAAWA,EAChB,EAAK8C,MAAQA,EAAMgD,IAAI,EAAKgW,mBAC5B,EAAKF,WAAa,EAClB,EAAKvO,QAAU,EAEf,EAAK3B,SAAW,EAChB,EAAKK,QAAU,aACf,EAAKJ,WAAa,kBAAM,cAC0B,UAA9C,EAAK3L,SAASC,eAAekN,gBAC7B,EAAKE,OAAS,GAEgC,UAA9C,EAAKrN,SAASC,eAAekN,gBAC7B,EAAKE,OAAS,GAdyB,E,0DAiC3C,MACkD,YAA9CoH,KAAKzU,SAASC,eAAekN,eACkB,UAA9CsH,KAAKzU,SAASC,eAAekN,eAA6BsH,KAAKmH,WAAa,M,GA1CtDxG,IAAd9D,GAkFV+F,KAAO,SAACC,GACX,IAAMD,EAAO,IAAI/F,GAAM,GAAIgG,EAAKtX,UAIhC,OAHAqX,EAAKvU,MAAQqD,KAAKqR,QAAQF,EAAKxU,OAC/BuU,EAAKhK,OAASiK,EAAKjK,OACnBgK,EAAKuE,WAAatE,EAAKsE,WAChBvE,G,ICtFM/F,GAEjB,WAAY9O,GAAuB,IAAD,gCADlCA,eACkC,OAIlCuH,MAAuB,SAACtK,GAAD,OAAkB,IAAI2T,IAAUC,YAAW,SAAC1B,GAAD,OAAcA,EAAEvE,QAAO3N,IAJvD,KAMlC+T,gBAAkB,SAACkE,EAAauE,EAAgBxc,GAA9B,OAA+C,EAAKsK,MAAMtK,EAAO,IANjD,KAQlCmU,eAAiB,SAAC/Q,EAAmBoZ,EAAgBxc,GACjD,OAAe,MAARoD,EAAe,EAAKqZ,YAAYrZ,EAAMpD,GAAS,EAAK0c,aAAa1c,IAT1C,KAYlCyc,YAAc,SAACrZ,EAAYpD,GACvB,OAAOA,EAAM2N,MAAM2O,QAAQlZ,IAASpD,EAAMsR,MAAMG,OAAOzR,EAAM2N,MAAM+D,WAAa1R,EAAM6E,KAAKqP,aAAa,QAAS,UAbnF,KAgBlCwI,aAAe,SAAC1c,GACZ,IAAKA,EAAM2N,MAAMiI,SACb,QACO5V,EAAMsR,MAAMsE,UACX5V,EAAM2N,MAAMgE,cACZ3R,EAAM2N,MAAMiE,QAAQ5R,EAAMsR,MAAMM,YAChC5R,EAAM6E,KAAK0T,mBACX,EAAKxV,UAAUgB,aACnB,EAAKuG,MAAMtK,EAAO,IAvB1BgV,KAAKjS,UAAYA,GCJJuP,G,iDACjBhI,MAAuB,SAACtK,GAAD,OAAkB,IAAI2T,IAAUC,YAAW,SAAC1B,GAAD,OAAcA,EAAEZ,QAAOtR,I,KAEzF+T,gBAAkB,SAAC3Q,EAAY+H,EAAenL,GAA5B,OACbA,EAAMsR,MAAM0C,mBAAqBhU,EAAMsR,MAAME,eAAiBxR,EAAM6E,KAAKqP,aAAa,QAAS,UAAa,EAAK5J,MAAMtK,EAAO,I,KAEnImU,eAAiB,SAAC/Q,EAAmB+H,EAAenL,GAAnC,OACZoD,GAAQpD,EAAMgE,KAAKoQ,OAAO,CAACpU,EAAMsR,MAAMI,OAAOtO,IAAQ,QAAS+H,IAAanL,EAAM6E,KAAKyP,kBAAqB,EAAKhK,MAAMtK,EAAO,KCRlH2c,GAIjB,aAAe,IAAD,gCAHd5K,aAGc,OAFdT,WAEc,OAKdsL,gBAAkB,SAAC5c,GACf,EAAK6c,sBAAsB7c,GAEvBA,EAAMO,SAAS8D,eAAe+L,MAAQF,IAAgB4M,MACrD,EAAKC,kBAAkB/c,IACvB,EAAKgd,sBAAsBhd,IAC3BA,EAAMgE,KAAKyO,iBACV,EAAKwK,iBAAiBjd,IAAUA,EAAMO,SAAS8D,eAAe+L,KAAOF,IAAgBgN,OACtFld,EAAM2N,MAAMiI,WAAY5V,EAAM2N,MAAMgE,cACrC3R,EAAMO,SAAS8D,eAAe+L,MAAQF,IAAgBiN,SAEtDnd,EAAM2N,MAAMtD,YAAa,IAhBnB,KAoBd2S,sBAAwB,SAAChd,EAAcod,GACnC,IAAKpd,EAAMgE,KAAKyO,iBAAmBzS,EAAMO,SAAS8D,eAAe+L,KAAOF,IAAgB4M,KACpF,OAAO,EAGX,IAAMO,EAAW,GACjB,GAAIrd,EAAMsR,MAAM0C,oBACRhU,EAAMO,SAAS8D,eAAe+L,MAAQF,IAAgBgN,OAASld,EAAMgE,KAAKuN,eAAe,CACzF,IAAM6H,EAAO,CAAEtO,OAAQ,QAAS3E,OAAQnG,EAAMgE,KAAKmC,SAC/CnG,EAAMO,SAAS8D,eAAe+L,MAAQF,IAAgBiN,QAAUnd,EAAM6E,KAAKI,OAAOqT,SAASc,GAAQ,KACnGiE,EAAS1X,KAAKyT,GACdpZ,EAAMsR,MAAMjH,YAAa,GAiDrC,OA5CArK,EAAMwM,WAAWC,OAAO1G,SAAQ,SAAC1C,EAAOyD,GACpC,GAAI9G,EAAMwM,WAAWwH,gBAAgBlN,KAC7B9G,EAAMO,SAAS8D,eAAe+L,MAAQF,IAAgBgN,OAASld,EAAMgE,KAAK0W,iBAAiB5T,IAAQ,CACnG,IAAMsS,EAAO,CAAEtO,OAAQzH,EAAM8C,OAAQA,OAAQnG,EAAMgE,KAAKmC,SACpDnG,EAAMO,SAAS8D,eAAe+L,MAAQF,IAAgBiN,QAAUnd,EAAM6E,KAAKI,OAAOqT,SAASc,GAAQ,KACnGiE,EAAS1X,KAAKyT,GACd/V,EAAMgH,YAAa,OAMnCrK,EAAM+R,QAAQtF,OAAO1G,SAAQ,SAAC1C,EAAOyD,GACjC,GAAI9G,EAAM+R,QAAQiC,gBAAgBlN,KAC1B9G,EAAMO,SAAS8D,eAAe+L,MAAQF,IAAgBgN,OAASld,EAAMgE,KAAK2W,cAAc7T,IAAQ,CAChG,IAAMwW,EACFtd,EAAMgE,KAAKwW,iBACW,GAAtBnX,EAAMA,MAAMY,QACZjE,EAAMgE,KAAK4W,oBACwD,GAAnE5a,EAAM+R,QAAQtF,OAAOzM,EAAMgE,KAAK8W,mBAAmBzX,MAAMY,OAEvDsZ,EACFla,EAAMA,MAAMY,OAAS,GACrBjE,EAAMgE,KAAK4W,oBACX5a,EAAM+R,QAAQtF,OAAOzM,EAAMgE,KAAK8W,mBAAmBzX,MAAMY,OAAS,GAClEZ,EAAMA,MAAMA,EAAMA,MAAMY,OAAS,GAAGqF,MAChCtJ,EAAM+R,QAAQtF,OAAOzM,EAAMgE,KAAK8W,mBAAmBzX,MAC/CrD,EAAM+R,QAAQtF,OAAOzM,EAAMgE,KAAK8W,mBAAmBzX,MAAMY,OAAS,GACpEqF,OACLtJ,EAAM+R,QAAQ6D,OAAO5V,EAAMgE,KAAK8W,mBAAmBxS,SAElDkV,GAAaF,IAAkCC,EAErD,IAAKH,GAAcpd,EAAMO,SAAS8D,eAAe+L,MAAQF,IAAgBgN,MAAQM,EAAW,CACxF,IAAMpE,EAAO,CAAEtO,OAAQzH,EAAM8C,OAAQA,OAAQnG,EAAMgE,KAAKmC,SACpDnG,EAAMO,SAAS8D,eAAe+L,MAAQF,IAAgBiN,QAAUnd,EAAM6E,KAAKI,OAAOqT,SAASc,GAAQ,KACnGiE,EAAS1X,KAAKyT,GACd/V,EAAMgH,YAAa,QAOhCgT,EAASpZ,QAhFN,KAmFdgZ,iBAAmB,SAACjd,GAChB,IAAIyd,GAAW,EACTC,EAAaC,GAAM/F,KAAK5X,GAwB9B,OAvBA,EAAKsR,MAAM6C,eAAeuJ,EAAWpM,MAAMsE,SAAU,KAAM8H,GACvDA,EAAW7Y,KAAKC,YAAY6U,UACxB,EAAKqD,sBAAsBU,GAAY,IAAS1d,EAAMO,SAAS8D,eAAe+L,KAAOF,IAAgBgN,KAAO,EAAI,KAChHld,EAAMsR,MAAMjH,YAAa,EACzBoT,GAAW,GAInBzd,EAAM+R,QAAQtF,OAAO1G,SAAQ,SAACgM,EAASjL,GAAV,OACzBiL,EAAQ1O,MACHgD,KAAI,SAACjD,EAAMwa,GAAP,MAAsB,CAAEA,YAAWxa,WACvC0S,QAAO,qBAAG1S,KAAiBkF,YAC3BvC,SAAQ,YAA0B,IAAvB3C,EAAsB,EAAtBA,KAAMwa,EAAgB,EAAhBA,UACRC,EAAeF,GAAM/F,KAAK5X,GAChC,EAAK+R,QAAQoC,eAAe/Q,EAAM,KAAMya,EAAc/W,GAClD+W,EAAahZ,KAAKC,YAAY6U,UAC1B,EAAKqD,sBAAsBa,GAAc,IAAS7d,EAAMO,SAAS8D,eAAe+L,KAAOF,IAAgBgN,KAAO,EAAI,KAClHnL,EAAQ1O,MAAMua,GAAWvT,YAAa,EACtCoT,GAAW,SAKxBA,GA7GG,KAgHdV,kBAAoB,SAAC/c,GACjB,IAAKA,EAAMgE,KAAKyO,gBAAiB,CAC7B,IAAMqL,EAAW9d,EAAM+R,QAAQtF,OAC1BpG,KAAI,SAAC0X,EAAQjX,GAAT,OAAmBA,KACvBgP,QAAO,SAAChP,GAAD,OAAW9G,EAAM+R,QAAQ6D,OAAO9O,IAAU9G,EAAM+R,QAAQ6D,OAAO9O,GAAOwB,YAIlF,OAHAwV,EAAS/X,SAAQ,SAACe,GACd9G,EAAM+R,QAAQ6D,OAAO9O,GAAOuD,YAAa,KAEtCyT,EAAS7Z,OAGpB,OAAO,GA3HG,KA8Hd4Y,sBAAwB,SAAC7c,GACrB,IAAMge,EAAoB,SAApBA,EAAqB1E,GACvBA,EAAIjP,YAAa,EACjBiP,EAAIjW,OAASiW,EAAIjW,MAAM0C,QAAQiY,GAC/B1E,EAAI7M,QAAU6M,EAAI7M,OAAO1G,QAAQiY,IAGrCA,EAAkBhe,EAAMsR,OACxB0M,EAAkBhe,EAAM2N,OACxBqQ,EAAkBhe,EAAM+R,SACxBiM,EAAkBhe,EAAMwM,aAvIxBwI,KAAKjD,QAAU,IAAIE,GACnB+C,KAAK1D,MAAQ,IAAIgB,ICJZ2L,GAAb,4MAEIhS,SAAW,EAFf,EAGI3F,GAAK,EAHT,EAKIpC,QAAU,SAACmT,GAAD,OAAY,SAACnF,MAL3B,EAOIhG,WAAa,SAACmL,GAAD,OAAY,SAACnF,MAP9B,EAQIgE,WAAa,aARjB,EASIpJ,QAAU,SAAC1D,GACP,IAAMU,EAAM,EAAK8L,SACjB,IAAK9L,EACD,OAAQV,GAA4B,MAAjBA,EAAQE,OAAiB,EAEhD,GAAI,EAAKnD,SAAL,OAAeiD,QAAf,IAAeA,OAAf,EAAeA,EAASjD,QAAQ,OAAO,EAC3C,GAAI2D,EAAIxB,SACJ,OAAO,EAEX,IAAM4V,EAAK,YAAOC,gBAGlB,OAFqB/U,EAAU8U,EAAME,QAAQhV,EAAQE,MAAQ,GAEvC,GADL4U,EAAME,QAAQtU,EAAIR,QACW,OAAPF,QAAO,IAAPA,OAAA,EAAAA,EAAStB,KAAKuO,SAAUvM,EAAIhC,KAAKuO,OAAsB,MAAbvM,EAAIR,MArB7F,YAAkCyM,IAwBb9D,GAKjB,WAAY1R,EAAoByD,GAAa,IAAD,gCAJ5CyI,YAI4C,OAH5ClM,cAG4C,OAF5CyD,UAE4C,OAa5CkS,WAAa,SACThS,EACAma,EACAra,GAEA,EAAKyI,OAAO1G,SAAQ,SAAC1C,EAAOyD,GACxBzD,EAAM6I,WAAa,SAACsK,GAAD,OAAYtS,EAAQ,KAAMsS,EAAG1P,IAChDzD,EAAMA,MAAM0C,SAAQ,SAAC3C,EAAMqT,GACvB,IAAMrL,EAAQhI,EAAKkF,UAAYmO,GAAUpT,EAAMA,MAAMY,OAAS,EAAIoa,EAAgBna,EAClFd,EAAKc,QAAU,SAACsS,GAAD,OAAYpL,EAAM,eAAKhI,GAAQoT,EAAG1P,IACjD1D,EAAKiF,SAAW,kBAAOjF,EAAKkF,UAAY,EAAKgW,WAAWxX,EAAO1D,KAAS,MAE5EY,EAAKkS,WAAW7S,OAzBoB,KA6B5Ckb,SAAW,SAACzX,GAAD,OAAmB,EAAK2F,OAAO3F,IA7BE,KA+B5CkN,gBAAkB,SAAClN,GAAD,OAAmB,EAAK0X,WAAW,EAAK5I,OAAO9O,GAAQ,EAAK9C,KAAM8C,IA/BxC,KAiC5C0K,YAAc,SAAC1K,GAAD,OAAmB,EAAK6P,IAAI7P,EAAO,EAAK9C,KAAK4S,YAjCf,KAmC5C4H,WAAa,SAACpb,EAAYY,EAAY8C,GAAzB,OACR1D,GAAQA,EAAKkF,UAAYtE,EAAKyW,oBAAoBrX,IACnD,EAAK0J,QAAQhG,EAAO9C,EAAKuE,iBACvBnF,GAAQY,EAAK2W,cAAc7T,IAtCW,KAwC5CgG,QAAU,SAAChG,EAAesC,GACtB,QAAKA,GACE,EAAKqD,OAAO3F,GAAOgG,QAAQ1D,IA1CM,KA6C5CqV,QAAU,SAAC3X,EAAe1D,GACtB,IAAK,IAAIkY,EAAI,EAAGA,EAAI,EAAK7O,OAAO3F,GAAOzD,MAAMY,OAAQqX,IACjD,GAAIlY,GAAQA,EAAKoF,OAAO,EAAKiE,OAAO3F,GAAOzD,MAAMiY,KAAOlY,EAAKkF,WAAa,EAAKmE,OAAO3F,GAAOzD,MAAMiY,GAAGhT,SAClG,OAAO,EAAKmE,OAAO3F,GAAOzD,MAAMiY,GAGxC,OAAO,GAnDiC,KAsD5CjH,iBAAmB,SAACjR,EAAYgP,GAC5B,IAAK,IAAIkJ,EAAI,EAAGA,EAAI,EAAK7O,OAAO2F,GAAG/O,MAAMY,OAAQqX,IAC7C,GAAIlY,GAAQA,EAAKoF,OAAO,EAAKiE,OAAO2F,GAAG/O,MAAMiY,IAAK,CAC9C,IAAMiB,EAAS,EAAK9P,OAAO2F,GAAG/O,MAAMiX,OAAOgB,EAAG,EAAK7O,OAAO2F,GAAG/O,MAAMY,QAEnE,OADA,EAAKya,aAAatM,GACXmK,EAIf,MAAO,IA/DiC,KAkE5C9W,KAAO,SAACrC,EAAY0D,GAChB,EAAK2F,OAAO3F,GAAOzD,MAAMsC,KAAKvC,IAnEU,KAsE5Ckb,WAAa,SAACxX,EAAe1D,GAEzB,OADY,EAAKwS,OAAO9O,GACbwB,UAAYlF,GAAQA,EAAKoF,OAAO,EAAKoN,OAAO9O,KAxEf,KA2E5C2N,QAAU,SAAC3N,EAAe1D,GACtB,IAAM0G,EAAM,EAAK8L,OAAO9O,GACxB,QAAI,EAAKwX,WAAWxX,EAAO1D,KACvB0G,EAAIxB,UAAW,EACf,EAAKoW,aAAa5X,IACX,IAhF6B,KAsF5C4X,aAAe,SAAC5X,GAIZ,IAHA,IAAI6X,EAAU,EAAKpe,SAASsQ,mBACxBV,EAAO,EACPrG,EAAM,EAAK8L,OAAO9O,GACf6X,GAAsB,GAAXA,GAAgB7U,GAC9BA,EAAI+M,aAAa8H,GACjBA,IACA7U,EAAM,EAAK8L,OAAO9O,EAAOqJ,GACzBA,KA9FoC,KAkG5CwG,IAAM,SAAC7P,EAAekG,GAGlB,OAFA,EAAKP,OAAO3F,GAAOzD,MAAQ,EAAKoJ,OAAO3F,GAAOzD,MAAMub,OAAO5R,EAAM3G,KAAI,SAACgU,GAAD,OAAO,EAAKgC,kBAAkBhC,EAAGvT,OACtG,EAAK4X,aAAa5X,GACXkG,GArGiC,KAwG5CqP,kBAAoB,SAACjZ,EAAY0D,GAE7B,OADA1D,EAAK+C,OAAS,EAAKsG,OAAO3F,GAAOX,OAC1B/C,GA1GiC,KA6G5CwS,OAAS,SAAC9O,EAAe+X,GAAhB,OAAoC,EAAKpS,OAAO3F,GAAOzD,MAAM,EAAKoJ,OAAO3F,GAAOzD,MAAMY,OAAS,GAAK4a,GAAU,KA7G3E,KA0H5CjO,WAAa,SAACD,GAEV,OADA,EAAKlE,OAAO1G,SAAQ,SAAC1C,GAAD,OAAWA,EAAMA,MAAM0C,SAAQ,SAAC0F,GAAD,OAAaA,EAAQoL,aAAarI,KAAKsI,IAAInG,EAAK,UAC5F,GA1HPqE,KAAKhR,KAAOA,EACZgR,KAAKvI,OAFO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEbpG,KAAI,SAACC,GACnB,IAAM4L,EAAI,IAAI+L,GAAa,WAAa3X,EAAItC,GAI5C,OAHAkO,EAAE7O,MAAQ,GACV6O,EAAEjG,SAAW,EACbiG,EAAE5L,GAAKA,EACA4L,KAEX8C,KAAKzU,SAAWA,GAfH0R,GAoHV2F,KAAO,SAACC,EAAe7T,GAC1B,IAAM4T,EAAO,IAAI3F,GAAQ4F,EAAKtX,SAAUyD,GAOxC,OANA4T,EAAKnL,OAASoL,EAAKpL,OAAOpG,KAAI,SAAChD,EAAOyD,GAClC,IAAMoL,EAAI,IAAI+L,GAAa5a,EAAM8C,OAAQnC,GAGzC,OAFAkO,EAAE5L,GAAKQ,EACPoL,EAAE7O,MAAQqD,KAAKqR,QAAQ1U,EAAMA,OACtB6O,KAEJ0F,G,ICrJMtF,G,kDAKjB,WAAY/R,EAAoByD,GAAa,IAAD,8BACxC,cAAM,QAASA,IALnBzD,cAI4C,IAH5C0L,cAG4C,IAF5CK,aAE4C,IAD5CJ,gBAC4C,IAU5CgK,WAAa,SAAChS,GACV,EAAKgI,WAAa,SAACsK,GAAD,OAAOtS,EAAQ,KAAMsS,EAAG,OAC1C,EAAKnT,MAAM0C,SAAQ,SAAC3C,EAAM0D,GACtB1D,EAAKc,QAAU,SAACsS,GAAD,OAAWtS,EAAQ,eAAKd,GAAQoT,EAAG,OAClDpT,EAAKiF,SAAW,kBAAMvB,GAAS,EAAKzD,MAAMY,OAAS,MAEvD,EAAKD,KAAKkS,WAAV,kBAhBwC,EAmB5C1E,YAAc,kBAAM,EAAKC,OAAO,EAAKzN,KAAK4S,YAnBE,EAqB5CD,IAAM,SAACvT,GAAD,OAAgBA,GAAQ,EAAKC,MAAMsC,KAAK,EAAK0W,kBAAkBjZ,KArBzB,EAuB5CqO,OAAS,SAACzE,GAAD,OAAmBA,GAASA,EAAM/I,QAAU+I,EAAM3G,IAAI,EAAKsQ,MAvBxB,EAyB5C0F,kBAAoB,SAACjZ,GAIjB,OAHAA,EAAK+C,OAAS,EAAKA,OACnB/C,EAAKkF,UAAW,EAChBlF,EAAKyT,aAAarI,KAAKsI,IAAI,EAAKvW,SAASsQ,mBAAoB,IACtDzN,GA7BiC,EAgC5C4Q,gBAAkB,kBAAM,EAAKhQ,KAAKuN,eAAiB,EAAKuN,OAAO,EAAK9a,KAAKuE,gBAhC7B,EAkC5CuE,QAAU,SAAC1J,GAAD,OAAuB,EAAK0b,OAAO1b,KAAS,GAlCV,EAoC5C0b,OAAS,SAAC1b,GAAD,OAAuBA,KAAU,EAAKwS,WAAaxS,EAAKoF,OAAO,EAAKoN,YApCjC,EAsC5ClE,OAAS,SAACtO,GAAD,OAAiBA,GAAQA,EAAKoF,OAAO,EAAKoN,WAAa,EAAKvS,MAAM0T,OAAU,MAtCzC,EAwC5CnF,QAAU,kBAAM,EAAKvO,MAAMiX,OAAO,EAAG,EAAKjX,MAAMY,SAxCJ,EAgD5C2M,WAAa,SAACD,GAEV,OADA,EAAKtN,MAAM0C,SAAQ,SAAC0F,GAAD,OAAaA,EAAQoL,aAAarI,KAAKsI,IAAInG,EAAK,OAC5D,iBAhDP,EAAKpQ,SAAWA,EAEhB,EAAK0L,SAAW,EAChB,EAAKK,QAAU,aACf,EAAKJ,WAAa,kBAAM,cANgB,E,UALb6J,IAAdzD,GA+CVsF,KAAO,SAACC,EAAa7T,GACxB,IAAM4T,EAAO,IAAItF,GAAMuF,EAAKtX,SAAUyD,GAEtC,OADA4T,EAAKvU,MAAQqD,KAAKqR,QAAQF,EAAKxU,OACxBuU,G,ICpCM+F,GAajB,WAAYrE,GAAW,IAAD,gCAZtB3L,WAYsB,OAXtB2D,WAWsB,OAVtB9E,gBAUsB,OATtBuF,aASsB,OARtB/N,UAQsB,OAPtBa,UAOsB,OANtBtE,cAMsB,OALtBS,WAKsB,OAJtB+d,eAIsB,OAHtBzZ,YAGsB,OAFtBvC,eAEsB,OActBic,gBAAkB,WAEd,OADA,EAAKD,UAAUnC,gBAAgB,GACxB,GAhBW,KAmBtBhM,WAAa,SAACD,GACV,EAAKpQ,SAASmQ,YAAcC,EAC5B,EAAKhD,MAAMiD,WAAWD,GACtB,EAAKW,MAAMV,WAAWD,GACtB,EAAKnE,WAAWoE,WAAWD,GAC3B,EAAKoB,QAAQnB,WAAWD,IAxBN,KA2BtBsO,aAAe,WACX,IAAM9J,EAAa,SAACD,GAAD,OAAgC,IAAID,GAAWC,GAAcC,WAAW,EAAKnR,OAKhG,OAJA,EAAK2J,MAAMuI,WAAWf,EAAW,IAAI+J,GAAa,EAAKnc,aACvD,EAAKuO,MAAM4E,WAAWf,EAAW,IAAIgK,KACrC,EAAK3S,WAAW0J,WAAWf,EAAW,IAAIiK,KAC1C,EAAKrN,QAAQmE,WAAWf,EAAW,IAAIkK,IAAmBlK,EAAW,IAAIZ,IAAkB,EAAKvQ,MACzF,GAhCPgR,KAAKrH,MAAQ2L,EAAI3L,MACjBqH,KAAK1D,MAAQgI,EAAIhI,MACjB0D,KAAKxI,WAAa8M,EAAI9M,WACtBwI,KAAKjD,QAAUuH,EAAIvH,QACnBiD,KAAKhR,KAAOsV,EAAItV,KAChBgR,KAAKnQ,KAAOyU,EAAIzU,KAChBmQ,KAAKzU,SAAW+Y,EAAI/Y,SACpByU,KAAKhU,MAAQsY,EAAItY,MACjBgU,KAAK+J,UAAY,IAAIpC,GACrB3H,KAAK1P,OAAS,IAAIH,GAClB6P,KAAKjS,UAAY,IAAIgY,GAAU/F,OAxBlB2I,GAiDV2B,gBAAkB,SAAC9e,EAAgC+e,GACtD,IAAMhf,EAAW,IAAIub,GAAStb,GACxBwD,EAAO,IAAIoW,GACXpa,EAAQ,CACV2N,MAAO,IAAIkE,GAAJ,YAAc0N,EAAKvS,OAAQzM,GAClC+Q,MAAO,IAAIgB,GAAM/R,EAAUyD,GAC3BwI,WAAY,IAAIE,GAAWnM,EAAUyD,GACrC+N,QAAS,IAAIE,GAAQ1R,EAAUyD,GAC/BA,KAAMA,EACNa,KAAM,IAAIsV,GAAK5Z,GACfA,SAAUA,EACVS,MAAO,IAAIoU,GAAM7U,IAErB,OAAO,IAAIod,GAAM3d,IA9DJ2d,GAiEV/F,KAAO,SAAC5X,GACX,IAAMgE,EAAOoW,GAAKxC,KAAK5X,EAAMgE,MAC7B,OAAO,IAAI2Z,GAAM,CACbhQ,MAAOkE,GAAM+F,KAAK5X,EAAM2N,OACxB2D,MAAOgB,GAAMsF,KAAK5X,EAAMsR,MAAOtN,GAC/BwI,WAAYE,GAAWkL,KAAK5X,EAAMwM,WAAYxI,GAC9C+N,QAASE,GAAQ2F,KAAK5X,EAAM+R,QAAS/N,GACrCA,KAAMA,EACNa,KAAMsV,GAAKvC,KAAK5X,EAAM6E,MACtBtE,SAAUub,GAASlE,KAAK5X,EAAMO,UAC9BS,MAAOhB,EAAMgB,SCtFlB,IAAMX,GAAeJ,IAAMuf,cAAc,CAC5Cpf,OAAQ,IAGNqf,GAAgBpf,GAAaqf,SAUdC,G,kDACjB,WAAY5f,GAAwB,IAAD,8BAC/B,cAAMA,IAKV2C,eAAiB,SAACc,GAAD,OAA6B,EAAKoc,SAASpc,IANzB,EASnChB,cAAgB,SAACgB,GAAD,OACZ,EAAKd,gBAAe,SAAC1C,GAEjB,OADAwD,EAASxD,GACFA,MAZoB,EAgBnCyC,kBAAoB,SAACe,GAAD,OAChB,EAAKd,gBAAe,SAAC1C,GACjBA,EAAM6E,KAAKC,YAAY6U,UAAW,EAClC,IAAM/U,EAAW+Y,GAAM/F,KAAK5X,GAE5B,OADAwD,EAASxD,GACLA,EAAM6E,KAAKC,YAAY6U,UACvB3Z,EAAM6E,KAAKC,YAAY8U,kBAAkBhV,GAClC5E,GAGJ,SA1BoB,EA8BnC+H,OAAS,WACL,IAAMa,EAAU,CACZ5I,MAAO,EAAKA,MAAMif,eAAeD,kBACjCtc,eAAgB,EAAKA,eACrBF,cAAe,EAAKA,cACpBC,kBAAmB,EAAKA,kBACxBqM,QAAS,EAAK/O,MAAM+O,SAExB,OACI,eAAC,IAAD,CAAUoC,MAAOtI,EAAjB,UACI,cAAC6W,GAAD,CAAevO,MAAO,CAAE9Q,OAAQ,EAAKL,MAAMK,QAA3C,SACI,cAAC,GAAD,CAAOwO,KAAM,EAAK7O,MAAMQ,SAASI,cAErC,cAAC,GAAD,QAzCR,EAAKX,MAAQ2d,GAAM2B,gBAAgBvf,EAAMQ,SAAUR,EAAMwf,MAF1B,E,UADAtf,IAAM4f","file":"static/js/6.0361c136.chunk.js","sourcesContent":["import { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GamePad from \"../../../common/GamePad\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardGamePad = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isGamePadDriven = state.settings.launchSettings.inputMode == \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n\n    const switchToGamePad = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight(switchToGamePad)}\n            onUp={() => props.onUp(switchToGamePad)}\n            onDown={() => props.onDown(switchToGamePad)}\n            onAction={() => props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToGamePad)}\n            onMenu={() => props.onMenu(switchToGamePad)}\n        />\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"../../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GlobalContext from \"../../Context\";\nimport Keyboard from \"../../../common/Keyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardKeyboard = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isKeyboardDriven = state.settings.launchSettings.inputMode === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import { BoardContext } from \"../BoardWrap\";\nimport BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\ntype _mod = (state: Model) => void;\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const beforeFocused = { card: state.focus.card, stack: state.focus.stack };\n    const isPaused = !!paused.state.paused;\n\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const handlers = {\n        onLeft: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveLeft(before);\n            }),\n\n        onRight: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveRight(before);\n            }),\n\n        onUp: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveUp(before);\n            }),\n\n        onDown: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveDown(before);\n            }),\n\n        onAction: (modifier: _mod) =>\n            updateGameContext((ctx) => {\n                modifier(ctx);\n                const handler = state?.navigator?.pressCurrent(beforeFocused);\n                handler && handler(ctx);\n                ctx.navigator.finishNav();\n            }),\n\n        onCancel: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n            }),\n\n        onPause: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n\n        onHint: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n                if (isVisible(state) && !isDisabled(state)) {\n                    state.settings.enableHint();\n                }\n            });\n        },\n\n        onUndo: () => {\n            replaceContext((_state) => {\n                const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n                if (previous) {\n                    previous.game.rating.penalize(_state.game.rating);\n                    return previous;\n                }\n                return null;\n            });\n        },\n        onMenu: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n    };\n\n    return isPaused ? null : (\n        <>\n            <BoardKeyboard {...handlers} />\n            <BoardGamePad {...handlers} />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import GlobalContext from \"../Context\";\nimport React from \"react\";\n\nconst Dealer: () => any = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const timeouts: any[] = [];\n\n    if (state.settings.launchSettings.quickDeal) {\n        if (state && state.dealer && !state.dealer.isDealt) {\n            replaceContext(state.dealer.dealAll());\n        }\n    } else {\n        const deal = (dealt: number) => {\n            timeouts.push(\n                setTimeout(() => {\n                    if (state && state.dealer && !state.dealer.isDealt) {\n                        replaceContext(state.dealer.dealOne(dealt, deal));\n                    }\n                }, 35)\n            );\n        };\n\n        React.useEffect(() => {\n            deal(state.dealer.dealt);\n            return () =>\n                timeouts.forEach((timeout) => {\n                    clearTimeout(timeout);\n                });\n        }, []);\n        React.useEffect(() => {}, [state.dealer.isDealt]);\n    }\n    return null;\n};\nexport default Dealer;\n","const getStackLabel = (source: string) => {\n    const names = [0, 1, 2, 3, 4, 5, 6].map((id) => \" stack \" + (id + 1));\n    let label = \"\";\n    const split = source.split(\"-\");\n    label += split[0];\n    if (split.length > 1) {\n        label += names[parseInt(split[1])];\n    }\n    return label;\n};\n\nexport default getStackLabel;\n","import CardModel from \"../../Model/Deck/Card\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport getStackLabel from \"./StackDescription\";\nimport { useDrag } from \"react-dnd\";\n\ntype CardProps = {\n    index: number;\n    accepting?: boolean;\n    models: CardModel[];\n    isSuggested?: (index: number) => boolean | undefined;\n    isSelected?: (index: number) => boolean;\n    blink?: number;\n    zIndex?: number;\n    offsetTop?: (index: number, models: CardModel[]) => number;\n    offsetLeft?: (index: number) => number;\n    isDrag?: boolean;\n};\n\nconst Card = (props: CardProps) => {\n    const ReRender = () => (\n        <Card\n            {...{\n                ...props,\n                models: props.models.slice(props.index, props.models.length),\n                offsetLeft: () => 0,\n                isSelected: () => false,\n                index: 0,\n                isDrag: isDrag,\n            }}\n        />\n    );\n    if (!props.models.length) {\n        return null;\n    }\n    const model = props.models[props.index];\n    ReRender.displayName = \"ReRender\";\n    //@todo for proper drag & drop of stacks, we need each card to render the following ones\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const pause = React.useContext(PauseContext);\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const isFocused = state.focus.hasCard(model);\n    const [isDrag, setDrag] = React.useState<boolean>(!!props.isDrag);\n    const _isDrag = props.isDrag || isDrag;\n    const [{ opacity }, dragRef, preview] = useDrag({\n        item: { type: \"card\", model: model, render: ReRender() },\n        collect: (monitor) => {\n            return { opacity: monitor.isDragging() ? 1 : 1 };\n        },\n        canDrag: () => model.canClick() && !model.isHidden && (state.hand.currentCard() == null || model.equals(state.hand.currentCard())),\n        begin: (monitor) => {\n            console.log(monitor);\n            setDrag(true);\n            //@todo if other card is still selected, drop it first.\n            if (model.onClick && (!props.isSelected || !props.isSelected(props.index))) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n        end: (_item, monitor) => {\n            setDrag(false);\n            if (!monitor.didDrop()) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n    });\n\n    //Deactivate native dnd preview - it's fast but it's not working on mobile.\n    React.useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, []);\n\n    const getRef = () => (model.canClick() ? dragRef : inputEl);\n    React.useEffect(() => {\n        if (isFocused && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n    }, [isFocused, state.focus.card]);\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        let ele = e.target;\n\n        while (ele && !ele.className.includes(\"card-base\")) {\n            ele = ele.offsetParent;\n        }\n\n        const rect = ele.getBoundingClientRect();\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - ele.ownerDocument.defaultView.pageXOffset,\n                y: e.clientY - ele.ownerDocument.defaultView.pageYOffset,\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n        const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n        //@todo A11Y allow keyboard actions in singleplayer\n        if (model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.inputMode = \"mouse\";\n                }\n            });\n        }\n    };\n\n    const getClassName = () => {\n        const hasSuggestion = (props.isSuggested && props.isSuggested(props.index)) || model.suggestion;\n        let className = `card card-base suit-${model.type.icon}`;\n        className +=\n            (!props.isSelected || !props.isSelected(props.index)) && !isFocused && !hasSuggestion ? ` card-stack-${model.source}` : \"\";\n        className += !_isDrag && props.isSelected && props.isSelected(props.index) && !_isDrag ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += model.canClick() ? \" clickable\" : \"\";\n        //@todo onhover, trigger highlight of suggested target card/stack (preview what happens if picked up)\n        className += hasSuggestion && !isFocused ? \" card-suggested\" : \"\";\n        className += isFocused ? \" card-focused\" : \"\";\n        className += props.accepting ? \" card-accepts\" : \"\";\n        return className;\n    };\n\n    const getCardStyle = () => {\n        const style = {\n            opacity: _isDrag ? 0 : opacity,\n            zIndex: (props.zIndex ? props.zIndex : (props.offsetTop && props.offsetTop(props.index, props.models) > 0 ? 1 : 0) * 20) + 1,\n            top: props.offsetTop ? props.offsetTop(props.index, props.models) / 15 + \"em\" : 0,\n            ...model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft(props.index) * 2 + \"em\";\n        }\n\n        if (!model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    };\n\n    const getStackbaseStyle: () => React.CSSProperties = () => {\n        if (!model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    };\n\n    let label = getStackLabel(model.source);\n    label += \": \";\n\n    label += model.isHidden ? \"hidden card\" : model.type.icon + model.face;\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n\n    return (\n        <>\n            <div style={getStackbaseStyle()} className=\"stack-base\">\n                <button\n                    onFocus={() => {\n                        // updateContext((ctx) => {\n                        //     ctx.navigator.update(model.source, props.model);\n                        // });\n                    }}\n                    onBlur={() => {\n                        //updateContext((ctx) => ctx.focus.unsetCard(props.model));\n                    }}\n                    style={getCardStyle()}\n                    // ref={inputEl}\n                    ref={getRef()}\n                    className={getClassName()}\n                    onClick={onClick}\n                    disabled={!model.canClick() || pause.state.paused}\n                    tabIndex={model.canClick() ? 0 : -1}\n                    aria-label={label}\n                    title={label}\n                >\n                    <div className=\"card-content\">\n                        {model.isHidden || pause.state.paused ? (\n                            <div className=\"card-back\">&nbsp;</div>\n                        ) : (\n                            <div className=\"card-grid-container\">\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-left\">{model.face}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div className=\"mainface\">\n                                    <div className=\"align-center\">{model.face} </div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-right\">{model.face}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </button>\n            </div>\n            {props.models.length - 1 > props.index && <Card {...props} isDrag={_isDrag} index={props.index + 1} />}\n        </>\n    );\n};\n\nexport default Card;\n","import GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\n\nconst StackBase = (props: { model: IStack; children?: any | null }) => {\n    let classname = \"card-base socket\";\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    React.useEffect(() => {\n        if (state.focus.hasStack(props.model.source) && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            const current = inputEl && inputEl.current ? inputEl.current : null;\n            current && current.focus();\n        }\n    });\n    if (!props.model.stack.length) {\n        if (props.model.blinkFor) {\n            classname += \" socket-blink\";\n        } else if (state.focus.hasStack(props.model.source)) {\n            classname += \" socket-focused\";\n        } else {\n            classname += \" socket-empty\";\n        }\n    } else {\n        classname += \" socket-full\";\n    }\n\n    if (props.model.suggestion && !props.model.stack.length) {\n        classname += \" socket-suggested\";\n    }\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": empty socket\";\n\n    return (\n        <button\n            onFocus={() => {\n                // updateContext((ctx) => {\n                //     ctx.navigator.update(props.model.parent);\n                // });\n            }}\n            onBlur={() => {\n                // updateContext((ctx) => ctx.focus.unsetStack(props.model.parent));\n            }}\n            ref={inputEl}\n            className={classname}\n            onClick={onClick}\n            disabled={!!props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n            aria-label={label}\n            title={label}\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\n\ntype _selector = (model: Model) => IStack;\n\nconst useBlinkEffect = (selector: _selector) => {\n    const { updateContext, state } = React.useContext(GlobalContext);\n    if (!state) return;\n    const model = selector(state);\n    let timeout: any = null;\n    React.useEffect(() => {\n        if (state && selector(state).blinkFor) {\n            timeout = setTimeout(\n                () =>\n                    updateContext((state: Model) => {\n                        selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [state, model.blinkFor]);\n};\n\nexport default useBlinkEffect;\n","import Card from \"./Card\";\nimport { FoundationStack } from \"../../Model/Game/Foundation\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\ntype FoundationProps = { index: number; model: FoundationStack };\n\nconst FoundationStacks = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    return (\n        <>\n            {state.foundation.stacks.map((foundation, index) => (\n                <Foundation key={index} model={foundation} index={index} />\n            ))}\n        </>\n    );\n};\n\nexport default FoundationStacks;\n\nconst Foundation = (props: FoundationProps) => {\n    useBlinkEffect((model) => model.foundation.stacks[props.index]);\n    const { updateGameContext } = React.useContext(GlobalContext);\n    const model = props.model;\n    const [, drop] = useDrop({\n        accept: \"card\",\n        canDrop: (item: any) => {\n            return props.model.accepts(item.model);\n        },\n        drop: () => {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n    const { state } = React.useContext(GlobalContext);\n    const cards = state?.hand.source == model.source ? [...model.stack, ...state.hand.stack] : [...model.stack];\n    return (\n        <div className=\"board-field\" key={props.index} ref={drop}>\n            <StackBase model={model}>\n                <div className={\"align-center foundation-base suit-\" + model.icon}>{model.icon}</div>\n            </StackBase>\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={model.blinkFor}\n                isSuggested={(index) => model.suggestion && model.stack.length - 1 == index}\n                isSelected={(index) => index > model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst Clock = () => {\n    const { state, getElapsed } = React.useContext(PauseContext);\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (state.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [state.started, state.paused]);\n\n    return !state.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Hearts = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode == \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst Hint = () => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Points = () => {\n    const { state } = React.useContext(GlobalContext);\n\n    return (\n        <>\n            <div className=\"icon-container\">🏆</div> {state?.game.rating.points}\n        </>\n    );\n};\n\nexport default Points;\n","import { BoardContext } from \"../../Game/BoardWrap\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst ToggleMenu = () => {\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n\n    return (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Undo = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"../../Style/Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import \"../Style/Menu.scss\";\n\nimport { NavigationContext, NavigationProvider, NavigationState } from \"./StartScreen/Context\";\nimport { Universal, getKeyboardLayout } from \"../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../Game/BoardWrap\";\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\n\nconst _Menu = () => {\n    const [navigation, setNavigation] = React.useState<NavigationState>({\n        menu: {\n            x: 0,\n            y: 0,\n        },\n        screen: {\n            x: 0,\n            y: 0,\n        },\n        focus: \"menu\",\n        mainMenu: \"\",\n        screeen: \"\",\n    });\n    const navigationContext = {\n        navigation,\n        setNavigation,\n    };\n    return (\n        <NavigationProvider value={navigationContext}>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too if consented and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = React.useContext(NavigationContext);\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n    if (!state) {\n        return null;\n    }\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining == 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining == 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) [(announcement = \"The game is not paused.\")];\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle label=\"😴\" />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle label=\"😴\" />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon=\"▶️\"\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                        />\n                        <MenuButton\n                            icon=\"🌪️\"\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            toggled={navigation.mainMenu == \"entropy\"}\n                        >\n                            <MenuButton\n                                icon=\"🌪️\"\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                            />\n                            <MenuButton\n                                icon=\"🌬️\"\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon=\"♻️\"\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon=\"🗑️\" title=\"Quit Game\" onClick={() => restart()} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import React from \"react\";\n\nconst usePrevious = <T>(value: T) => {\n    const ref = React.useRef<T>();\n    React.useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n","import Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport usePrevious from \"./usePrevious\";\n\nconst Renderer = (props: { length: number; paused: boolean; started: number }) => {\n    const context = React.useContext(GlobalContext);\n\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout: any = null;\n        if (\n            context &&\n            context.state &&\n            context.state.settings.launchSettings.speed &&\n            started &&\n            !paused &&\n            previous &&\n            (previous?.length != length || previous?.started != started || previous?.paused != paused)\n        ) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (\n                        length == state.stock.stack.length &&\n                        state.stock.passes > 0 &&\n                        (state.stock.stack.length || state.waste.stack.length)\n                    ) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => clearTimeout(timeout);\n    }, [length, paused, started]);\n\n    if (!context || !context.state) return null;\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            <Card\n                index={0} \n                key={0}\n                models={context.state.stock.stack}\n                offsetTop={(index) => (index / 2) * -1}\n                zIndex={0}\n                blink={context?.state?.stock.blinkFor}\n                isSuggested={(index) => context?.state?.stock.suggestion && index == context.state.stock.stack.length - 1}\n            />\n        </div>\n    );\n};\n\nconst Stock = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    useBlinkEffect((model) => model.stock);\n    const pause = React.useContext(PauseContext);\n    const { paused, started } = pause.state;\n    return <Renderer length={state.stock.stack.length} paused={paused} started={started} />;\n};\n\nexport default Stock;\n","import TableauModel, { TableauStack } from \"../../Model/Game/Tableau\";\n\nimport Card from \"./Card\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\ntype TableauProps = { index: number; model: TableauStack; parent: TableauModel };\n\nconst TableauStacks = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    return (\n        <>\n            {state.tableau.stacks.map((tableau, index) => (\n                <Tableau key={index} index={index} model={tableau} parent={state.tableau} />\n            ))}\n        </>\n    );\n};\nexport default TableauStacks;\n\nconst Tableau = (props: TableauProps) => {\n    useBlinkEffect((s) => s.tableau.stacks[props.index]);\n    const [accepting, setAccepting] = React.useState<boolean>(false);\n    const { updateGameContext } = React.useContext(GlobalContext);\n    const [, drop] = useDrop({\n        accept: \"card\",\n        canDrop: (item: any) => {\n            const accepts = props.model.accepts(item.model);\n            setAccepting(accepts);\n            return accepts;\n        },\n        drop: () => {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n\n    const { state } = React.useContext(GlobalContext);\n    const cards = state?.hand.source == props.model.source ? [...props.model.stack, ...state.hand.stack] : [...props.model.stack];\n\n    let offset = 1;\n    const getOffset = (index: number, cards: CardModel[]) => {\n        for (let i = 0; i <= index; i++) {\n            if (cards[i] && !cards[i].isHidden) {\n                offset = i * 12 + (index - i) * 24;\n                return offset;\n            }\n        }\n        offset = index * 12;\n        return offset;\n    };\n\n    return (\n        <div className=\"board-field\" ref={drop}>\n            <StackBase model={props.model} />\n            <Card\n                index={0}\n                key={0}\n                accepting={accepting}\n                models={cards}\n                blink={props.model.blinkFor}\n                isSuggested={(index) => props.model.suggestion && props.model.stack.length - 1 == index}\n                offsetTop={(index, models) => getOffset(index, models)}\n                isSelected={(index) => index > props.model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\nconst Waste = () => {\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    useBlinkEffect((model) => model.waste);\n    const getOffset = (index: number) => {\n        if (state.settings.launchSettings.drawMode == \"single\") {\n            return 0;\n        }\n        const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n        let additionalOffset = 2;\n        if (length == 2) {\n            additionalOffset = 1;\n        }\n\n        if (length == 1) {\n            additionalOffset = 0;\n        }\n\n        return ((index - length - 2) % 3) + additionalOffset;\n    };\n\n    const [, _drop] = useDrop({\n        accept: \"card\",\n        // eslint-disable-next-line no-unused-vars\n        canDrop: () => {\n            const accepts = state.hand.isFromWaste();\n            //setAccepting(accepts);\n            return accepts;\n        },\n        drop: () => {\n            updateGameContext(state.waste.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n\n    const cards = state?.hand.source == state.waste.source ? [...state.waste.stack, ...state.hand.stack] : [...state.waste.stack];\n\n    return (\n        <div className=\"board-field\" ref={_drop}>\n            <StackBase model={state.waste} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                offsetTop={(index) => (index / 2) * -1}\n                offsetLeft={(index) => getOffset(index)}\n                blink={state.waste.blinkFor}\n                isSuggested={(index) => state.waste.suggestion && index == state.waste.stack.length - 1}\n                isSelected={(index) => index > state.waste.stack.length - 1}\n            />\n        </div>\n    );\n};\nexport default Waste;\n","import \"../Style/Board.scss\";\n\nimport BoardNavigator from \"./Navigation/BoardNavigator\";\nimport Dealer from \"./Dealer\";\nimport { DndProvider } from \"react-dnd-multi-backend\";\nimport FoundationStacks from \"./Foundation\";\nimport HTML5toTouch from \"react-dnd-multi-backend/dist/esm/HTML5toTouch\";\nimport Header from \"../UI/Header/Header\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport TableauStacks from \"./Tableau\";\nimport Waste from \"./Waste\";\nimport { usePreview } from \"react-dnd-preview\";\n\nconst Preview = (props: { reff: any }) => {\n    // eslint-disable-next-line no-unused-vars\n    const { display, _itemType, item, style } = usePreview();\n    if (!display) {\n        return null;\n    }\n    const rect = props.reff.getBoundingClientRect();\n    return (\n        <div\n            style={{\n                ...style,\n                position: \"relative\",\n                width: \"100%\",\n                left: rect.left * -1,\n                top: rect.top * -1,\n                zIndex: 2000,\n                opacity: 1,\n            }}\n        >\n            {item.render}\n        </div>\n    );\n};\ntype BoardProps = { mode: string };\nconst Board = (props: BoardProps) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n    return (\n        <DndProvider options={HTML5toTouch}>\n            <Menu />\n            <Header mode={props.mode} />\n            <div className={\"board-jail \" + props.mode}>\n                <div className={\"board-grid-container \" + props.mode}>\n                    <Stock />\n                    <Waste />\n                    <div className=\"board-field spacer\" ref={ref}>\n                        {ref.current && <Preview reff={ref.current} />}\n                    </div>\n                    <FoundationStacks />\n                    <TableauStacks />\n                </div>\n            </div>\n            <Dealer />\n            <BoardNavigator />\n        </DndProvider>\n    );\n};\n\nexport default Board;\n","import \"../Style/Screens.scss\";\n\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\n\nconst EndScreen = () => {\n    const { state, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    //@todo show launch settings (draw mode, recycling mode)\n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover();\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: any) => (state: Model) => {\n        if (dealt != state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n        if (state.dealer.isDealt) {\n            state.game.started = Date.now();\n        }\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt != state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        state.game.started = Date.now();\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                if (newCard) {\n                    newCard.source = tableau.stacks[i].source;\n                    if (stack.length == tableau.stacks.length - 1 - i) {\n                        newCard.isHidden = false;\n                    }\n                    tableau.deal(newCard, i);\n                    this.dealt++;\n                    this.dealingAt++;\n                    if (this.dealingAt == tableau.stacks.length) {\n                        this.dealingAt = 0;\n                    }\n                    this.isDealt = false;\n                }\n                return;\n            } else {\n                const isFirst = this.dealingAt == 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n    }\n\n    validSettings = () => this.settings.launchSettings.inputMode !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack == stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && this.card && card && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack == stack;\n}\n","import Card from \"../Deck/Card\";\n\nexport default class BasicStack {\n    source: string;\n    constructor(source: string) {\n        this.source = source;\n    }\n    stack: Card[] = [];\n    getTop: () => Card | null = () => (this.stack && this.stack.length && this.stack[this.stack.length - 1]) || null;\n    suggestion = false;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n}\n","import BasicStack from \"./BasicStack\";\nimport Hand from \"./Hand\";\n\nexport default class HandHoldingStack extends BasicStack {\n    hand: Hand;\n    constructor(source: string, hand: Hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source == this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n    blinkFor = 0;\n    unblink = () => {};\n}\n","/* eslint-disable no-unused-vars */\n\nimport Suits, { Suit } from \"../Deck/Suits\";\n\nimport Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nexport class FoundationStack extends HandHoldingStack implements IStack {\n    setOnClick: () => void = () => {};\n    acceptedCards: string[] = [];\n    usedCards: any[] = [];\n    icon: string = \"\";\n    color: string = \"\";\n    blinkFor: number = 0;\n    clickEmpty: (p: any) => any = () => {};\n    getCurrentAccepted = () => {\n        return this.acceptedCards[this.acceptedCards.length - 1];\n    };\n    accepts = (card: Card | null) => {\n        if (!card) return false;\n        const currentAccepted = this.getCurrentAccepted();\n        return this.icon == card.type.icon && currentAccepted == card.face;\n    };\n}\nexport default class Foundation {\n    settings: Settings;\n    hand: Hand;\n    stacks: FoundationStack[];\n    blinkFor: number;\n    unblink: () => void;\n    constructor(settings: Settings, hand: Hand) {\n        this.settings = settings;\n        this.hand = hand;\n        const template = (index: number, suit: Suit) => {\n            const s = new FoundationStack(\"foundation-\" + index, hand);\n            s.stack = [];\n            s.acceptedCards = [...getFoundationOrder()];\n            s.usedCards = [];\n            s.icon = suit.icon;\n            s.color = suit.color;\n            s.blinkFor = 0;\n            return s;\n        };\n        const stacks = Object.keys(Suits)\n            .map((key: string) => Suits[key])\n            .map((suit, index) => (template(index, suit)));\n        this.stacks = [...stacks];\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, index: number) => (s: any) => void) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                card.onClick = (p: XY) => onClick({ ...card }, p, index);\n                card.canClick = () => sindex == stack.stack.length - 1;\n            });\n            this.hand.setOnClick(stack);\n        });\n    };\n\n    getCurrentAccepted = (index: number) => {\n        return this.stacks[index].getCurrentAccepted();\n    };\n\n    wouldAcceptHand = (index: number) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    accepts = (index: number, card: Card | null) => {\n        return this.stacks[index].accepts(card);\n    };\n\n    add = (index: number, cards: Card[]) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index: number, card: Card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return (card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop()) || null;\n    };\n\n    getPreviousUsed = (index: number) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => f.stack.length).reduce((a, b) => a + b, 0);\n\n    getTop = (index: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig: Foundation, hand: Hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new FoundationStack(origStack.source, hand);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src);\n            this.tryDetectEnd(state);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card | null, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.face) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    //@todo move this to a generic place, also detect failure\n    tryDetectEnd(state: Model) {\n        const nrofCards = state.foundation.countCards();\n        if (nrofCards === 52) {\n            state.game.isEnded = true;\n            state.game.end = Date.now();\n        }\n    }\n}\n","import Settings from \"./Settings\";\n\nexport default class Rating {\n    settings: Settings;\n    points: number;\n    multiplicator: number;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode == \"single\" && this.settings.launchSettings.recyclingMode == \"infinite\") {\n            if (this.points > 0) {\n                if (this.points < 100) {\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                }\n            }\n            console.debug(\"RATING: subtract (max) 100 points for RECYCLE\");\n        }\n    };\n\n    registerUncover = () => {\n        this.registerHint(this.settings.disableHint());\n        this.points += 5;\n        console.debug(\"RATING: add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on: boolean) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            console.debug(\"RATING: subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other: Rating) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            console.debug(`RATING: applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done: boolean) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            console.debug(`RATING: applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move: { source: string; target: string }) {\n        const isTableau = (obj: string) => obj.substr(0, 7) == \"tableau\";\n        const isFoundation = (obj: string) => obj.substr(0, 10) == \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                console.debug(\"RATING: add 10 points for MOVE tableau -> foundation\");\n                return 10;\n            }\n        } else if (move.source == \"waste\") {\n            if (isFoundation(move.target)) {\n                console.debug(\"RATING: add 10 points for MOVE waste -> foundation\");\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                console.debug(\"RATING: add 5 points for MOVE waste -> tableau\");\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                console.debug(\"RATING: subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start: number, end: number) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    };\n\n    static copy = (orig: Rating) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Model from \"../Model\";\n\nexport default class TimeMachine {\n    previousStates: any[];\n    memorable: boolean;\n    modified: boolean;\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source == target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state: any) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id: number, current: any) => {\n        const isRequested = this.previousStates.length - 1 == id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        if (on) {\n            this.modified = true;\n            this.memorable = false;\n        }\n    }\n\n    stackEquals = (a: IStack, b: IStack) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden == b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a: { stacks: IStack[] }, b: { stacks: IStack[] }) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a: Model, b: Model) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig: TimeMachine) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Rating from \"./Rating\";\nimport Settings from \"./Settings\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    settings: Settings;\n    rating: Rating;\n    timemachine: TimeMachine;\n    started: number;\n    isEnded: boolean;\n    end: number;\n    paused: any;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n        //@todo move to context:\n        this.started = 0;\n        this.isEnded = false;\n        this.end = 0;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.rating.registerMove(target, source);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = () => {\n        this.rating.registerUncover();\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig: Game) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        copy.paused = orig.paused;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    filter: (stack: any[]) => Card[] = (stack) => {\n        return stack.filter((c) => c);\n    };\n\n    pickUp = (stack: (Card | null)[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = this.filter(stack).map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source == model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.face == \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source == this.source) || null;\n\n    isFromWaste = () => this.source && this.source == \"waste\" || false;\n\n    isFromFoundation = (index: number) => this.source && this.source == `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source == `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) == \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/IStack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: (IStack | undefined)[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source == pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x == -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x == 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        const current = this.current();\n        if (current == undefined) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = current.getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y == 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const current = this.current();\n        const last: number = current ? current.getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (!current) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current()?.source || \"\");\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = (before: { card: Card | null; stack: string }) => {\n        const clickable = this.current()?.getClickable();\n        if (\n            this.model.focus.card &&\n            this.model.focus.card.canClick() &&\n            clickable &&\n            clickable[this.currentIndex.z] &&\n            clickable[this.currentIndex.z].face == this.model.focus.card.face &&\n            clickable[this.currentIndex.z].type.icon == this.model.focus.card.type.icon\n        ) {\n            return (ctx: Model) => {\n                if (this.model.focus.card && this.model.focus.card.equals(before.card)) {\n                    this.model.focus.card.onClick({ isKeyboard: true })(ctx);\n                }\n            };\n        } else if (this.model.focus.stack && this.model.focus.stack == before.stack) {\n            return (ctx: Model) => {\n                this.current()?.clickEmpty({ isKeyboard: true })(ctx);\n            };\n        } else {\n            //this is the entry point in case user starts keyboard nav with action button\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./BasicStack\";\nimport Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Stock extends BasicStack implements IStack {\n    settings: Settings;\n    recyclings: number;\n    passes: number;\n    blinkFor: number;\n    unblink: () => void;\n    clickEmpty: (p: any) => (s: any) => void;\n    constructor(stack: Card[], settings: Settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        this.clickEmpty = () => () => {};\n        if (this.settings.launchSettings.recyclingMode == \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode == \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: XY) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n    };\n    accepts = () => false;\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode == \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode == \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste: Card[]) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card: Card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card: Card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result: Card[] = [];\n        if (this.settings.launchSettings.drawMode == \"single\") {\n            const top = this.stack.pop();\n            if (top) result = [top];\n        }\n        if (this.settings.launchSettings.drawMode == \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length == 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig: Stock) => {\n        const copy = new Stock([], orig.settings);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\");\n    };\n\n    recycleWaste = (state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\")) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key == SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key == SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length == 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length == 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].face ==\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].face &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (this.getPutdownSuggestions(tableauState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nexport class TableauStack extends HandHoldingStack implements IStack {\n    //@todo move to IStack, make boolean\n    blinkFor = 0;\n    id = 0;\n    // eslint-disable-next-line no-unused-vars\n    onClick = (a: any) => (s: any) => {};\n    // eslint-disable-next-line no-unused-vars\n    clickEmpty = (a: any) => (s: any) => {};\n    setOnClick = () => {};\n    accepts = (current: Card | null) => {\n        const top = this.getTop();\n        if (!top) {\n            return (current && current.face === \"K\") || false;\n        }\n        if (this.source == current?.source) return true;\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = current ? range.indexOf(current.face) : 0;\n        const topIndex = range.indexOf(top.face);\n        return currentIndex + 1 == topIndex && current?.type.color !== top.type.color && top.face !== \"A\";\n    };\n}\nexport default class Tableau {\n    stacks: TableauStack[];\n    settings: Settings;\n    hand: Hand;\n\n    constructor(settings: Settings, hand: Hand) {\n        const ids = [0, 1, 2, 3, 4, 5, 6];\n        this.hand = hand;\n        this.stacks = ids.map((id) => {\n            const s = new TableauStack(\"tableau-\" + id, hand);\n            s.stack = [];\n            s.blinkFor = 0;\n            s.id = id;\n            return s;\n        });\n        this.settings = settings;\n    }\n\n    setOnClick = (\n        onClick: (a: any, b: any, index: number) => (s: any) => void,\n        onClickhidden: (a: any, b: any, index: number) => (s: any) => void,\n        hand: Hand\n    ) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p: any) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                const click = card.isHidden && sindex == stack.stack.length - 1 ? onClickhidden : onClick;\n                card.onClick = (p: any) => click({ ...card }, p, index);\n                card.canClick = () => !card.isHidden || this.canUncover(index, card) || false;\n            });\n            hand.setOnClick(stack);\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        if (!current) return false;\n        return this.stacks[index].accepts(current);\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        return top.isHidden && card && card.equals(this.getTop(index));\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy != 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, cards: Card[]) => {\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number) => {\n        card.source = this.stacks[index].source;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1 - (offset || 0)];\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map((stack, index) => {\n            const s = new TableauStack(stack.source, hand);\n            s.id = index;\n            s.stack = Card.copyAll(stack.stack);\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Waste extends HandHoldingStack {\n    settings: Settings;\n    blinkFor: number;\n    unblink: () => void;\n    clickEmpty: (p: any) => (s: any) => void;\n    constructor(settings: Settings, hand: Hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        this.clickEmpty = () => () => {};\n    }\n\n    //@todo include hand logic\n    setOnClick = (onClick: (c: any, p: XY, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: XY) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card: Card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards: Card[]) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card: Card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    accepts = (card: Card | null) => this.canAdd(card) || false;\n\n    canAdd = (card: Card | null) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card: Card) => (card && card.equals(this.getTop()) && this.stack.pop()) || null;\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig: Waste, hand: Hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n    }\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()), this.hand);\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings),\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n        });\n    };\n}\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../Context\";\nimport React from \"react\";\n\nexport const BoardContext = React.createContext({\n    player: 0,\n});\n\nconst BoardProvider = BoardContext.Provider;\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\n//We use class component here because setState allows partial updates \nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                return state;\n            }\n\n            return null;\n        });\n\n    //on every render, we refresh the click handlers in the model and the suggestions\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider value={{ player: this.props.player }}>\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n"],"sourceRoot":""}