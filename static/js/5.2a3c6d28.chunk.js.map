{"version":3,"sources":["Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/Stack.ts","Model/Game/HandHoldingStack.ts","Model/Game/FoundationStack.tsx","Model/Game/MultiStack.ts","Model/Game/Foundation.ts","Model/Business/Foundation.ts","Model/Game/Rating.ts","Model/Game/TimeMachine.ts","Model/Game/Game.ts","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.ts","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/TableauStack.tsx","Model/Game/Tableau.ts","Model/Game/Waste.ts","Model/Model.ts","View/GlobalContext.ts","View/Game/AutoSolver.tsx","View/Game/GameContext.tsx","View/Game/AutoUncoverer.tsx","View/Game/BoardContext.ts","View/Game/Navigation/BoardGamePad.tsx","View/Game/Navigation/BoardKeyboard.tsx","View/Game/PauseContext.tsx","View/Game/Navigation/BoardNavigator.tsx","View/Game/Dealer.tsx","common/DndPreview.tsx","View/Game/PossibleFailScreen.tsx","View/Game/FailDetector.tsx","View/Game/Firework.tsx","View/Game/CardFirework.tsx","View/Game/StackDescription.ts","View/Game/Card.tsx","View/Game/StackBase.tsx","View/Game/useBlinkEffect.ts","View/Game/useStackDrop.ts","View/Game/Foundation.tsx","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","View/UI/Menu.tsx","View/Game/usePrevious.ts","View/Game/Stock.tsx","View/Game/Tableau.tsx","View/Game/Waste.tsx","View/Game/WinDetector.tsx","View/Game/Board.tsx","View/UI/EndScreen.js","View/Game/BoardWrap.tsx","View/Game/Game.tsx"],"names":["Blinker","startBlink","selector","state","blinkFor","game","registerBlink","unblink","s","stopBlink","Tableau","blink","index","tableau","stacks","dispatchPutDown","card","position","wouldAcceptHand","src","hand","source","putDownHand","registerMove","getTop","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","isHoldingCard","isHidden","uncover","registerUncover","Dealer","dealt","dealingAt","isDealt","dealOne","callback","dealer","deal","stock","dealAll","i","length","stack","newCard","popOne","isFirst","this","Dispatcher","clickHandler","getHandler","Focus","settings","keyboard","validSettings","launchSettings","inputMode","isKeyBoard","isKeyboard","setCard","unsetCard","Card","equals","unsetStack","setStack","hasCard","hasStack","BasicStack","suggestion","getClickable","filter","canClick","onClick","a","clickEmpty","accepts","HandHoldingStack","getHandContent","FoundationStack","suit","acceptedCards","usedCards","icon","color","getCurrentAccepted","currentAccepted","type","face","setOnClick","p","cards","forEach","sindex","getFoundationOrder","MultiStack","Foundation","Object","keys","Suits","map","key","c","hasMoreThanOneCard","currentCard","add","putDown","causeEntropy","Math","min","interactionEntropy","push","pop","remove","getPreviousUsed","countCards","f","reduce","b","setEntropy","lvl","element","copy","orig","origStack","copyAll","foundation","_card","Rating","points","multiplicator","ratings","applyRating","text","console","debug","target","registerHint","disableHint","currentMove","rateMove","registerRecycle","drawMode","recyclingMode","diff","setSuccess","penalize","other","undoPenalty","penalty","pow","done","hintPenalty","getTimePenalty","start","end","secondsToFinish","trunc","getBonusPoints","round","getTotal","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","previousStates","memorable","modified","pushPreviousState","previous","modelEquals","popPreviousState","id","current","isRequested","popPrevious","timemachine","stackEquals","every","stacksEqual","waste","Game","rating","Hand","splice","model","_onClick","isHoldingKing","isFromCurrentSource","isFromWaste","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","parseInt","Navigator","currentIndex","rows","getZindex","elem","targets","update","pos","row","j","zIndex","x","y","z","finishNav","valid","moveLeft","moveRight","direction","moveUp","clickable","toggleRow","moveDown","pickLast","last","focus","pressCurrent","before","ctx","navigator","undefined","Settings","baseEntropy","suggestionModes","suggestionMode","setSuggestionMode","sm","SuggestionModes","get","enableHint","getHintMode","isTemporary","next","allSuggestionModes","Stock","recyclings","passes","recycle","reverse","setCardProperties","isOnTop","popTop","result","top","_position","moveToWaste","recycleWaste","addAll","canRecycle","Waste","Suggestions","evaluateOptions","disableAllSuggestions","NONE","getUncoverOptions","getPutdownSuggestions","getPickupOptions","FULL","SCORED","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","range","getTableauOrder","indexOf","offset","canUncover","onClickhidden","click","getStack","canPutDown","getCard","stackEntropy","entropy","concat","canAdd","suggestor","token","setToken","withSuggestions","_hasSuggestion","some","hasNonStockSuggestions","hasSuggestions","canAutoSolve","clearSuccess","clear","_c","success","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","defaultValue","replaceContext","updateContext","updateGameContext","restart","GlobalContext","React","createContext","Provider","useGlobalContext","useContext","Error","RenderAutoSolve","props","useState","solving","setSolving","useEffect","canAutosolve","AutoSolver","Solver","timeout","setTimeout","suggestedFoundations","suggestedFoundation","suggestedTableaus","suggestedCards","suggestedCard","clearTimeout","defaultGameState","started","isEnded","winner","loser","GameContext","gameState","win","giveUp","useGameContext","GameContextProvider","setGameState","context","player","Date","now","value","children","Uncoverer","AutoUncoverer","autoUncover","BoardContext","useBoardContext","BoardProvider","BoardGamePad","isGamePadDriven","isSinglePlayer","boardMode","GameModes","SINGLEPLAYER","switchToGamePad","GamePad","layout","GamepadLayout","gamepadIndex","players","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","defaultPauseState","paused","pauses","pauseStartedAt","allowed","pausedBy","showMenu","showCards","defaultPauseContext","togglePause","toggleMenu","getElapsed","PauseContext","PauseProvider","setPaused","isPaused","show","padleft","msec","getElapsedMs","hh","floor","mm","ss","usePauseContext","BoardNavigator","beforeFocused","handlers","modifier","handler","supportsHints","isVisible","isDisabled","_state","timeouts","quickDeal","DndPreview","rect","setRect","WindowDimensionContext","width","height","domRect","reff","getBoundingClientRect","left","usePreview","display","item","style","opacity","render","PossibleFailScreen","refused","since","setRefused","refuse","val","pause","className","MenuTitle","label","MenuTree","keyboardLayout","MenuButton","title","FailDetector","any","nonStock","suggestions","setSuggestions","stockSuggestionCards","setStockSuggestionCards","isPossibleFail","setPossibleFail","Firework","canvasRef","createRef","intensity","count","scalar","window","innerWidth","defaults","ticks","origin","particleCount","startVelocity","decay","spread","localConfetti","confetti","create","resize","fire","particleRatio","opts","assign","ref","CardFirework","getStackLabel","names","split","ReRender","models","slice","offsetLeft","isSelected","isDrag","displayName","inputEl","useRef","setDrag","isFocused","useCallback","_isDrag","useDrag","collect","monitor","isDragging","canDrag","begin","_item","didDrop","dragRef","preview","getEmptyImage","captureDraggingState","getRef","getClassName","hasSuggestion","isSuggested","setClassName","useClassName","cardStyle","getCardStyle","offsetTop","entropyStyle","pointerEvents","setCardStyle","useCardStyle","stackbaseStyle","getStackbaseStyle","setStackbaseStyle","useStackBaseStyle","setLabel","l","useLabel","onFocus","onBlur","e","preventDefault","clientX","clientY","ele","includes","offsetParent","ownerDocument","defaultView","pageXOffset","pageYOffset","disabled","tabIndex","aria-label","StackBase","classname","useBlinkEffect","useStackDrop","useDrop","accept","canDrop","drop","Clock","elapsed","setElapsed","interval","setInterval","clearInterval","Hearts","createString","Array","from","join","getHearts","Hint","Points","toast","info","autoClose","ToggleMenu","Undo","Header","mode","Menu","useNavigationContext","navigation","setNavigation","switchToMenu","menu","screeen","mainMenu","remaining","announcement","toggleMainMenu","toggled","EntropyLevels","skip","_Menu","usePrevious","Renderer","speed","parent","getOffset","additionalOffset","Detector","WinDetector","Board","closeOnClick","newestOnTop","limit","pauseOnFocusLoss","draggable","transition","Slide","EndScreen","BoardWrap","setState","random","Component","SinglePlayer","launchState","AspectRatio","ratio","Ratios","_4to3","SplitScreen","inputMethod","DelayedSuspense","delay","fallback","VERSUS"],"mappings":"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","file":"static/js/5.2a3c6d28.chunk.js","sourcesContent":["import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src, state.tableau.getTop(index));\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover(state.tableau.getTop(index));\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: (n: number) => void) => (state: Model) => {\n        if (dealt !== state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt !== state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                if (newCard) {\n                    newCard.source = tableau.stacks[i].source;\n                    if (stack.length === tableau.stacks.length - 1 - i) {\n                        newCard.isHidden = false;\n                    }\n                    tableau.deal(newCard, i);\n                    this.dealt++;\n                    this.dealingAt++;\n                    if (this.dealingAt === tableau.stacks.length) {\n                        this.dealingAt = 0;\n                    }\n                    this.isDealt = false;\n                }\n                return;\n            } else {\n                const isFirst = this.dealingAt === 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n    }\n\n    validSettings = () => this.settings.launchSettings.inputMode !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack === stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && !!this.card && !!card && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack === stack;\n}\n","import Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport interface IStack {\n    source: string;\n    stack: Card[];\n    getTop: () => Card | null;\n    getClickable: () => Card[];\n    clickEmpty: (p: any) => (s: Model) => void;\n    blinkFor: number;\n    unblink: (model: Model) => void;\n    suggestion: boolean;\n    accepts: (card: Card | null) => boolean;\n}\n\nabstract class BasicStack implements IStack {\n    source: string;\n    constructor(source: string) {\n        this.source = source;\n    }\n    suggestion = false;\n    stack: Card[] = [];\n    getTop: () => Card | null = () => (this.stack && this.stack.length && this.stack[this.stack.length - 1]) || null;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n    blinkFor = 0;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick = (a: any) => (s: Model) => {};\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    clickEmpty = (a: any) => (s: Model) => {};\n    unblink: (model: Model) => void = () => {};\n    abstract accepts: (card: Card | null) => boolean;\n}\nexport default BasicStack;\n","import BasicStack from \"./Stack\";\nimport Hand from \"./Hand\";\n\nabstract class HandHoldingStack extends BasicStack {\n    hand: Hand;\n    constructor(source: string, hand: Hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source === this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n}\n\nexport default HandHoldingStack;\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Model from \"../Model\";\nimport { Suit } from \"../Deck/Suits\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nexport default class FoundationStack extends HandHoldingStack {\n    constructor(source: string, hand: Hand, suit: Suit) {\n        super(source, hand);\n        this.acceptedCards = [...getFoundationOrder()];\n        this.usedCards = [];\n        this.icon = suit.icon;\n        this.color = suit.color;\n    }\n    acceptedCards: string[] = [];\n    usedCards: any[] = [];\n    icon = \"\";\n    color = \"\";\n    getCurrentAccepted = () => {\n        return this.acceptedCards[this.acceptedCards.length - 1];\n    };\n    accepts = (card: Card | null) => {\n        if (!card) return false;\n        const currentAccepted = this.getCurrentAccepted();\n        return this.icon === card.type.icon && currentAccepted === card.face;\n    };\n    setOnClick = (onClick: (c: any, p: any) => (s: Model) => void, hand: Hand) => {\n        this.clickEmpty = (p) => onClick(null, p);\n        const cards = this.source === hand.source ? [...this.stack, ...hand.stack] : this.stack;\n        cards.forEach((card, sindex) => {\n            card.onClick = (p: any) => onClick({ ...card }, p);\n            card.canClick = () => sindex === cards.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n}\n","import Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\n\nexport default class MultiStack<T extends HandHoldingStack> {\n    stacks: T[];\n    settings: Settings;\n    hand: Hand;\n    constructor(settings: Settings, hand: Hand, stacks: T[]) {\n        this.stacks = stacks;\n        this.settings = settings;\n        this.hand = hand;\n    }\n}\n","import Card from \"../Deck/Card\";\nimport FoundationStack from \"./FoundationStack\";\nimport Hand from \"./Hand\";\nimport Model from \"../Model\";\nimport MultiStack from \"./MultiStack\";\nimport Settings from \"./Settings\";\nimport Suits from \"../Deck/Suits\";\n\nexport default class Foundation extends MultiStack<FoundationStack> {\n    constructor(settings: Settings, hand: Hand) {\n        super(settings, hand, [\n            ...Object.keys(Suits)\n                .map((key: string) => Suits[key])\n                .map((suit, index) => new FoundationStack(\"foundation-\" + index, hand, suit)),\n        ]);\n    }\n\n    setOnClick = (onClick: (c: Card, p: any, index: number) => (s: Model) => void) => {\n        this.stacks.forEach((stack, index) => {\n            stack.setOnClick((c: Card, p: any) => onClick(c, p, index), this.hand);\n        });\n    };\n\n    getCurrentAccepted = (index: number) => {\n        return this.stacks[index].getCurrentAccepted();\n    };\n\n    wouldAcceptHand = (index: number) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    accepts = (index: number, card: Card | null) => {\n        return this.stacks[index].accepts(card);\n    };\n\n    add = (index: number, cards: Card[]) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index: number, card: Card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return (card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop()) || null;\n    };\n\n    getPreviousUsed = (index: number) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => f.stack.length).reduce((a, b) => a + b, 0);\n\n    getTop = (index: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig: Foundation, hand: Hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new FoundationStack(origStack.source, hand, origStack);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src, state.foundation.getTop(index));\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card | null, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.face) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport interface AppliedRating {\n    points: number;\n    text: string;\n}\n\nexport interface AppliedRatingWithId extends AppliedRating {\n    id: number;\n}\n\nexport default class Rating {\n    settings: Settings;\n    points: number;\n    multiplicator: number;\n    ratings: AppliedRating[];\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n        this.ratings = [];\n    }\n\n    applyRating = (points: number, text: string) => {\n        console.debug(\"RATING:\", text);\n        this.ratings.push({ points, text });\n    };\n\n    registerMove = (target: string, source: string, card: Card | null) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove, card);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode === \"single\" && this.settings.launchSettings.recyclingMode === \"infinite\") {\n            if (this.points > 0) {\n                let diff = 0;\n                if (this.points < 100) {\n                    diff = this.points * -1;\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                    diff = -100;\n                }\n                this.applyRating(diff, `subtract ${diff} (max 100 points) for RECYCLE`);\n            }\n        }\n    };\n\n    registerUncover = (card: Card | null) => {\n        this.registerHint(this.settings.disableHint());\n        card && card.setSuccess(5);\n        this.points += 5;\n        this.applyRating(5, \"add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on: boolean) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, \"subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other: Rating) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            this.applyRating(penalty * -1, `applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done: boolean) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, `applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move: { source: string; target: string }, card: Card | null) {\n        const isTableau = (obj: string) => obj.substr(0, 7) === \"tableau\";\n        const isFoundation = (obj: string) => obj.substr(0, 10) === \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE tableau -> foundation\");\n                card && card.setSuccess(10);\n                return 10;\n            }\n        } else if (move.source === \"waste\") {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE waste -> foundation\");\n                card && card.setSuccess(10);\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                this.applyRating(5, \"add 5 points for MOVE waste -> tableau\");\n                card && card.setSuccess(5);\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                this.applyRating(-15, \"subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start: number, end: number) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    };\n\n    static copy = (orig: Rating) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        copy.ratings = [...orig.ratings];\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./Stack\";\nimport Model from \"../Model\";\n\nexport default class TimeMachine {\n    previousStates: Model[];\n    memorable: boolean;\n    modified: boolean;\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source === target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state: Model) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id: number, current: Model) => {\n        const isRequested = this.previousStates.length - 1 === id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        if (on) {\n            this.modified = true;\n            this.memorable = false;\n        }\n    }\n\n    stackEquals = (a: IStack, b: IStack) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden === b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a: { stacks: IStack[] }, b: { stacks: IStack[] }) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a: Model, b: Model) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig: TimeMachine) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Rating from \"./Rating\";\nimport Settings from \"./Settings\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    settings: Settings;\n    rating: Rating;\n    timemachine: TimeMachine;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n    }\n\n    registerMove = (target: string, source: string, card: Card | null) => {\n        this.rating.registerMove(target, source, card);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = (card: Card | null) => {\n        this.rating.registerUncover(card);\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig: Game) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./Stack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    filter: (stack: any[]) => Card[] = (stack) => {\n        return stack.filter((c) => c);\n    };\n\n    pickUp = (stack: (Card | null)[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = this.filter(stack).map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source === model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.face === \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source === this.source) || null;\n\n    isFromWaste = () => (this.source && this.source === \"waste\") || false;\n\n    isFromFoundation = (index: number) => this.source && this.source === `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source === `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) === \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/Stack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: (IStack | undefined)[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source === pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x === -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x === 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        const current = this.current();\n        if (!current) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = current.getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y === 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const current = this.current();\n        const last: number = current ? current.getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (!current) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current()?.source || \"\");\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = (before: { card: Card | null; stack: string }) => {\n        const clickable = this.current()?.getClickable();\n        if (\n            this.model.focus.card &&\n            this.model.focus.card.canClick() &&\n            clickable &&\n            clickable[this.currentIndex.z] &&\n            clickable[this.currentIndex.z].face === this.model.focus.card.face &&\n            clickable[this.currentIndex.z].type.icon === this.model.focus.card.type.icon\n        ) {\n            return (ctx: Model) => {\n                if (this.model.focus.card && this.model.focus.card.equals(before.card)) {\n                    this.model.focus.card.onClick({ isKeyboard: true })(ctx);\n                }\n            };\n        } else if (this.model.focus.stack && this.model.focus.stack === before.stack) {\n            return (ctx: Model) => {\n                this.current()?.clickEmpty({ isKeyboard: true })(ctx);\n            };\n        } else {\n            //this is the entry point in case user starts keyboard nav with action button\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./Stack\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Settings from \"./Settings\";\n\nexport default class Stock extends BasicStack {\n    settings: Settings;\n    recyclings: number;\n    passes: number;\n    constructor(stack: Card[], settings: Settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        if (this.settings.launchSettings.recyclingMode === \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode === \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick: (c: any, p: any, i: any) => (s: Model) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: any) => onClick({ ...card }, p, null);\n            card.canClick = () => index === this.stack.length - 1;\n        });\n    };\n    accepts = () => false;\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode === \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode === \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste: Card[]) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card: Card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card: Card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result: Card[] = [];\n        if (this.settings.launchSettings.drawMode === \"single\") {\n            const top = this.stack.pop();\n            if (top) result = [top];\n        }\n        if (this.settings.launchSettings.drawMode === \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length === 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig: Stock) => {\n        const copy = new Stock([], orig.settings);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\", state.waste.getTop());\n    };\n\n    recycleWaste = (state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\", state.waste.getTop())) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key === SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key === SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length === 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length === 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].face ===\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].face &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key === SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (\n                            this.getPutdownSuggestions(tableauState, true) >\n                            (state.settings.suggestionMode.key === SuggestionModes.FULL ? 1 : 0)\n                        ) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Model from \"../Model\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nexport default class TableauStack extends HandHoldingStack {\n    id = 0;\n    accepts = (current: Card | null) => {\n        const top = this.getTop();\n        if (!top) {\n            return (current && current.face === \"K\") || false;\n        }\n        if (this.source === current?.source) return true;\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = current ? range.indexOf(current.face) : 0;\n        const topIndex = range.indexOf(top.face);\n        return currentIndex + 1 === topIndex && current?.type.color !== top.type.color && top.face !== \"A\";\n    };\n    getTop = (offset?: number) => this.stack[this.stack.length - 1 - (offset || 0)];\n    canUncover = (card: Card) => {\n        const top = this.getTop();\n        return top.isHidden && card && card.equals(this.getTop());\n    };\n    setOnClick = (onClick: (a: any, b: any) => (s: Model) => void, onClickhidden: (a: any, b: any) => (s: Model) => void) => {\n        this.clickEmpty = (p: any) => onClick(null, p);\n        const cards = this.source === this.hand.source ? [...this.stack, ...this.hand.stack] : this.stack;\n        cards.forEach((card, sindex) => {\n            const click = card.isHidden && sindex === cards.length - 1 ? onClickhidden : onClick;\n            card.onClick = (p: any) => click({ ...card }, p);\n            card.canClick = () => !card.isHidden || (this.canUncover(card) && !this.hand.currentCard()) || false;\n        });\n        this.hand.setOnClick(this);\n    };\n    static copy = (orig: TableauStack) => {\n        const s = new TableauStack(orig.source, orig.hand);\n        s.id = orig.id;\n        s.stack = Card.copyAll(orig.stack);\n        return s;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport Model from \"../Model\";\nimport MultiStack from \"./MultiStack\";\nimport Settings from \"./Settings\";\nimport TableauStack from \"./TableauStack\";\n\nexport default class Tableau extends MultiStack<TableauStack> {\n    constructor(settings: Settings, hand: Hand) {\n        super(\n            settings,\n            hand,\n            [0, 1, 2, 3, 4, 5, 6].map((id) => {\n                const s = new TableauStack(\"tableau-\" + id, hand);\n                s.id = id;\n                return s;\n            })\n        );\n    }\n\n    setOnClick = (\n        onClick: (a: any, b: any, index: number) => (s: Model) => void,\n        onClickhidden: (a: any, b: any, index: number) => (s: Model) => void\n    ) => {\n        this.stacks.forEach((stack, index) => {\n            stack.setOnClick(\n                (a: any, b: any) => onClick(a, b, index),\n                (a: any, b: any) => onClickhidden(a, b, index)\n            );\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    //@todo when putting back hand, no entropy is observed\n\n    putDownHand = (index: number) => this.add(index, this.hand.source, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        if (!current) return false;\n        return this.stacks[index].accepts(current);\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        return this.stacks[index].canUncover(card);\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    //@todo entropy as animated effect, triggered after rendering gamestate like blink\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy !== 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, source: string, cards: Card[]) => {\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number) => {\n        card.source = this.stacks[index].source;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].getTop(offset);\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map(TableauStack.copy);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Model from \"../Model\";\nimport Settings from \"./Settings\";\n\nexport default class Waste extends HandHoldingStack {\n    settings: Settings;\n    constructor(settings: Settings, hand: Hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n    }\n\n    setOnClick = (onClick: (c: any, p: any, i: any) => (s: Model) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        const cards = this.source === this.hand.source ? [...this.stack, ...this.hand.stack] : this.stack;\n        cards.forEach((card, index) => {\n            card.onClick = (p: any) => onClick({ ...card }, p, null);\n            card.canClick = () => index === cards.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card: Card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards: Card[]) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card: Card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    accepts = (card: Card | null) => this.canAdd(card) || false;\n\n    canAdd = (card: Card | null) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card: Card) => (card && card.equals(this.getTop()) && this.stack.pop()) || null;\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig: Waste, hand: Hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Card from \"./Deck/Card\";\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport { IStack } from \"./Game/Stack\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n    token: number;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n        this.token = obj.token;\n    }\n\n    setToken = (token: number) => {\n        this.token = token;\n    };\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    _hasSuggestion = (obj: any) => {\n        return obj.suggestion || (obj.stack && obj.stack.some(this._hasSuggestion)) || (obj.stacks && obj.stacks.some(this._hasSuggestion));\n    };\n\n    hasNonStockSuggestions = () => {\n        return (\n            this._hasSuggestion(this.waste) ||\n            this._hasSuggestion(this.tableau) ||\n            this._hasSuggestion(this.foundation)\n        );\n    }\n\n    hasSuggestions = () => {\n        return (\n            this._hasSuggestion(this.waste) ||\n            this._hasSuggestion(this.stock) ||\n            this._hasSuggestion(this.tableau) ||\n            this._hasSuggestion(this.foundation)\n        );\n    };\n\n    canAutoSolve = () => {\n        return (\n            this.waste.stack.length === 0 &&\n            this.stock.stack.length === 0 &&\n            this.tableau.stacks.every((s) => s.stack.every((c) => !c.isHidden))\n        );\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    clearSuccess = (card: Card) => {\n        const clear = (c: Card, s: IStack) => {\n            s.stack.forEach((_c) => {\n                if (_c.equals(c)) {\n                    _c.success = 0;\n                }\n            });\n        };\n        clear(card, this.stock);\n        clear(card, this.waste);\n        this.foundation.stacks.forEach((s) => clear(card, s));\n        this.tableau.stacks.forEach((s) => clear(card, s));\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()));\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings),\n            token: 0,\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n            token: state.token,\n        });\n    };\n}\n","import { StateReplaceFunction, StateUpdateFunction } from \"../Common\";\n\nimport Model from \"../Model/Model\";\nimport React from \"react\";\n\ninterface IGlobalContext {\n    state: Model | null;\n    replaceContext: StateReplaceFunction;\n    updateContext: StateUpdateFunction;\n    updateGameContext: StateUpdateFunction;\n    restart: () => void;\n}\n\ninterface XGlobalContext {\n    state: Model;\n    replaceContext: StateReplaceFunction;\n    updateContext: StateUpdateFunction;\n    updateGameContext: StateUpdateFunction;\n    restart: () => void;\n}\n\nconst useGlobalContext: () => XGlobalContext = () => {\n    const ctx = React.useContext(GlobalContext);\n    if (!ctx.state) {\n        throw new Error(\"no state present\");\n    }\n    return { ...ctx, state: ctx.state };\n};\n\nconst defaultValue = {\n    state: null,\n    replaceContext: () => {},\n    updateContext: () => {},\n    updateGameContext: () => {},\n    restart: () => {},\n};\n\nconst GlobalContext = React.createContext<IGlobalContext>(defaultValue);\n\nexport const Provider = GlobalContext.Provider;\n\nexport default useGlobalContext;\n","//- auto-resolver\n//  - check if the board can auto-resolve and offer to complete automatically\n//  - auto-complete becomes button in header and option in menu\n\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst RenderAutoSolve = (props: { canAutosolve: boolean }) => {\n    const [solving, setSolving] = React.useState(false);\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        if (props.canAutosolve) {\n            updateGameContext((ctx) => (ctx.settings.suggestionMode = SuggestionModes.get(SuggestionModes.NONE)));\n            setSolving(true);\n        }\n    }, [props.canAutosolve, updateGameContext]);\n    const canSolve = solving && state.settings.suggestionMode.key === SuggestionModes.NONE;\n    return !canSolve ? null : <Solver />;\n};\n\nexport const AutoSolver = () => {\n    const { state } = useGlobalContext();\n    return <RenderAutoSolve canAutosolve={state.canAutoSolve()} />;\n};\n\nexport default AutoSolver;\n\n//@todo also start general confetti firework elements when autosolving\n//@todo autosolve looks and feels slow: disable individual fireworks & reduce timeout duration\n\nconst Solver = () => {\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            const copy = Model.copy(state).withHandlers();\n            if (copy.hand.currentCard()) {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.foundation)) {\n                    const suggestedFoundations = copy.foundation.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedFoundations.length) {\n                        const suggestedFoundation = suggestedFoundations[0];\n                        updateGameContext(suggestedFoundation.clickEmpty({ isKeyboard: false }));\n                    }\n                }\n            } else {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.tableau)) {\n                    const suggestedTableaus = copy.tableau.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedTableaus.length) {\n                        const suggestedTableau = suggestedTableaus[0];\n                        const suggestedCards = suggestedTableau.stack.filter((c) => c.suggestion);\n                        if (suggestedCards.length) {\n                            const suggestedCard = suggestedCards[0];\n                            updateGameContext(suggestedCard.onClick({ isKeyboard: false }));\n                        }\n                    }\n                }\n            }\n        }, 150);\n\n        return () => clearTimeout(timeout);\n    });\n    return null;\n};\n","import React from \"react\";\n\nexport interface IGameState {\n    started: number;\n    isEnded: boolean;\n    end: number;\n    winner: number;\n    loser: number;\n}\n\nexport interface IGameContext {\n    gameState: IGameState;\n    win: (player: number) => void;\n    giveUp: (player: number) => void;\n    start: () => void;\n}\n\nexport const defaultGameState = {\n    started: 0,\n    isEnded: false,\n    end: 0,\n    winner: -1,\n    loser: -1,\n};\n\nconst GameContext = React.createContext<IGameContext>({\n    gameState: defaultGameState,\n    win: () => {},\n    start: () => {},\n    giveUp: () => {},\n});\n\nconst useGameContext = () => React.useContext(GameContext);\n\nexport default useGameContext;\n\nexport const GameContextProvider = (props: { children: React.ReactNode }) => {\n    const [gameState, setGameState] = React.useState<IGameState>(defaultGameState);\n    const context = {\n        gameState,\n        win: (player: number) => setGameState({ ...gameState, end: Date.now(), isEnded: true, winner: player }),\n        start: () => setGameState({ ...gameState, started: Date.now() }),\n        giveUp: (player: number) => {\n            // @todo if one user gives up, the other should be allowed to continue to increase points\n            // - this motivates users to employ the undo function to keep trying\n            // @todo show dialog informaing that other user gave up as well\n            // - options: give up + continue\n            // @todo track \"givenUp\" status per player\n            // - winner is always the player with more points\n            setGameState({ ...gameState, end: Date.now(), isEnded: true, loser: player });\n        },\n    };\n    return <GameContext.Provider value={context}>{props.children}</GameContext.Provider>;\n};\n","import React from \"react\";\nimport useGameContext from \"./GameContext\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst Uncoverer = () => {\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        if (!state.hand.currentCard()) {\n            state.tableau.stacks.forEach((stack) => {\n                if (stack.getTop() && stack.getTop().isHidden && stack.getTop().canClick()) {\n                    updateGameContext(stack.getTop().onClick({ isKeyboard: true }));\n                }\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [state.token]);\n    return null;\n};\n\nconst AutoUncoverer = () => {\n    const { state } = useGlobalContext();\n    const { gameState } = useGameContext();\n    return !!state.settings.launchSettings.autoUncover && !!gameState.started ? <Uncoverer /> : null;\n};\n\nexport default AutoUncoverer;\n","import React from \"react\";\n\nconst BoardContext = React.createContext({\n    player: 0,\n});\n\nexport const useBoardContext = () => React.useContext(BoardContext);\n\nexport const BoardProvider = BoardContext.Provider;\n","import { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GamePad from \"../../../common/GamePad\";\nimport GamepadLayout from \"../../../common/GamepadLayout\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport { useBoardContext } from \"../BoardContext\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst BoardGamePad = (props: CustomInputProps) => {\n    const { state } = useGlobalContext();\n    const { player } = useBoardContext();\n    const isGamePadDriven = state.settings.launchSettings.inputMode === \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n\n    const switchToGamePad = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            layout={GamepadLayout}\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight(switchToGamePad)}\n            onUp={() => props.onUp(switchToGamePad)}\n            onDown={() => props.onDown(switchToGamePad)}\n            onAction={() => props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToGamePad)}\n            onMenu={() => props.onMenu(switchToGamePad)}\n        />\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"../../../common/KeyboardLayouts\";\n\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport Keyboard from \"../../../common/Keyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport { useBoardContext } from \"../BoardContext\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst BoardKeyboard = (props: CustomInputProps) => {\n    const { state } = useGlobalContext();\n    const { player } = useBoardContext();\n    const isKeyboardDriven = state.settings.launchSettings.inputMode === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import React from \"react\";\nimport useGameContext from \"./GameContext\";\n\nexport interface IPauseState {\n    //started: number;\n    end: number;\n    paused: boolean;\n    pauses: number[];\n    pauseStartedAt: number;\n    allowed: number;\n    isSilent?: boolean;\n    pausedBy: number;\n    showMenu: boolean;\n    showCards: boolean;\n}\nexport interface IPauseContext {\n    state: IPauseState;\n    togglePause: (isPaused: boolean, pausedBy: number) => void;\n    toggleMenu: (show: boolean) => void;\n    getElapsed: () => string;\n}\nexport const defaultPauseState: IPauseState = {\n    end: 0,\n    paused: false,\n    pauses: [],\n    pauseStartedAt: 0,\n    allowed: 5,\n    pausedBy: -1,\n    showMenu: false,\n    showCards: true,\n};\nexport const defaultPauseContext = {\n    state: defaultPauseState,\n    togglePause: () => {},\n    toggleMenu: () => {},\n    getElapsed: () => \"\",\n};\n\nconst PauseContext = React.createContext<IPauseContext>(defaultPauseContext);\n\nexport const PauseProvider = (props: { children: React.ReactNode }) => {\n    const { gameState } = useGameContext();\n    const [paused, setPaused] = React.useState<IPauseState>({ ...defaultPauseState });\n    const getElapsedMs = () => {\n        const pauses = paused.pauses.reduce((a, b) => a + b, 0);\n        return (paused.end || paused.pauseStartedAt || Date.now()) - gameState.started - pauses;\n    };\n\n    const getElapsed = () => {\n        const padleft = (i: number) => ((i + \"\").length === 1 ? \"0\" + i : i);\n        let msec = getElapsedMs();\n        const hh = Math.floor(msec / 1000 / 60 / 60);\n        msec -= hh * 1000 * 60 * 60;\n        const mm = Math.floor(msec / 1000 / 60);\n        msec -= mm * 1000 * 60;\n        const ss = Math.floor(msec / 1000);\n        msec -= ss * 1000;\n        return hh ? hh + \":\" + padleft(mm) + \":\" + padleft(ss) : padleft(mm) + \":\" + padleft(ss);\n    };\n    const togglePause = (isPaused: boolean, pausedBy: number) => {\n        if (paused.showMenu) {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauses: [...paused.pauses, Date.now() - paused.pauseStartedAt],\n                pauseStartedAt: 0,\n                paused: false,\n                showMenu: false,\n                showCards: true,\n            });\n        } else if (paused.pauses.length < paused.allowed) {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauseStartedAt: Date.now(),\n                paused: true,\n                showMenu: true,\n                showCards: false,\n            });\n        } else {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauseStartedAt: 0,\n                paused: false,\n                showMenu: true,\n                showCards: false,\n            });\n        }\n    };\n    const toggleMenu = (show: boolean) => {\n        setPaused({\n            ...paused,\n            showMenu: show,\n            showCards: true,\n        });\n    };\n    const context = {\n        state: { ...paused, started: gameState.started },\n        togglePause,\n        toggleMenu,\n        getElapsed,\n    };\n\n    return <PauseContext.Provider value={context}>{props.children}</PauseContext.Provider>;\n};\n\nconst usePauseContext = () => React.useContext(PauseContext);\n\nexport default usePauseContext;\n","import BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport { useBoardContext } from \"../BoardContext\";\nimport useGlobalContext from \"../../GlobalContext\";\nimport usePauseContext from \"../PauseContext\";\n\ntype _mod = (state: Model) => void;\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = useGlobalContext();\n    const paused = usePauseContext();\n    const { player } = useBoardContext();\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const beforeFocused = { card: state.focus.card, stack: state.focus.stack };\n    const isPaused = !!paused.state.paused;\n\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const handlers = {\n        onLeft: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveLeft(before);\n            }),\n\n        onRight: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveRight(before);\n            }),\n\n        onUp: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveUp(before);\n            }),\n\n        onDown: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveDown(before);\n            }),\n\n        onAction: (modifier: _mod) =>\n            updateGameContext((ctx) => {\n                modifier(ctx);\n                const handler = state?.navigator?.pressCurrent(beforeFocused);\n                handler && handler(ctx);\n                ctx.navigator.finishNav();\n            }),\n\n        onCancel: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n            }),\n\n        onPause: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n\n        onHint: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n                if (isVisible(state) && !isDisabled(state)) {\n                    state.settings.enableHint();\n                }\n            });\n        },\n\n        onUndo: () => {\n            //@todo use GlobalState token to avoid double processing (pass in token via props to always have updated version)\n            replaceContext((_state) => {\n                const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n                if (previous) {\n                    previous.game.rating.penalize(_state.game.rating);\n                    return previous;\n                }\n\n                return null;\n            });\n        },\n        onMenu: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n    };\n\n    return paused.state.showMenu ? null : (\n        <>\n            <BoardKeyboard {...handlers} />\n            <BoardGamePad {...handlers} />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import React from \"react\";\nimport useGameContext from \"./GameContext\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst Dealer = () => {\n    const { state, replaceContext } = useGlobalContext();\n    const { gameState, start } = useGameContext();\n    React.useEffect(() => {\n        if (!gameState.started) {\n            const timeouts: NodeJS.Timeout[] = [];\n            if (state.settings.launchSettings.quickDeal) {\n                if (!state.dealer.isDealt) {\n                    start();\n                    replaceContext(state.dealer.dealAll());\n                }\n            } else {\n                const deal = (dealt: number) =>\n                    timeouts.push(\n                        setTimeout(() => {\n                            if (!state.dealer.isDealt) {\n                                replaceContext(state.dealer.dealOne(dealt, deal));\n                            } else {\n                                start();\n                            }\n                        }, 35)\n                    );\n\n                deal(state.dealer.dealt);\n                return () => timeouts.forEach((timeout) => clearTimeout(timeout));\n            }\n        }\n        //@todo how to one-time hook in valid way?\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return null;\n};\nexport default Dealer;\n","import React from \"react\";\nimport { WindowDimensionContext } from \"./AspectRatio/AspectRatio\";\nimport { usePreview } from \"react-dnd-preview\";\n\nconst DndPreview = (props: { reff: HTMLElement }) => {\n    const [rect, setRect] = React.useState<{ left: number; top: number }>();\n    const { width, height } = React.useContext(WindowDimensionContext);\n    React.useEffect(() => {\n        const domRect = props.reff.getBoundingClientRect();\n        setRect({\n            left: domRect.left * -1,\n            top: domRect.top * -1,\n        });\n        //@todo introduce resizeContext that we can subscribe to, so we only recalculate the BoundingClientRect of the container when window was resized\n    }, [props.reff, width, height]);\n    const { display, item, style } = usePreview();\n    if (!display || !rect || !item) {\n        return null;\n    }   \n    return (\n        <div\n            style={{\n                ...style,\n                position: \"relative\",\n                width: \"100%\",\n                left: rect.left,\n                top: rect.top,\n                zIndex: 2000,\n                opacity: 1,\n            }}\n        >\n            {item.render}\n        </div>\n    );\n};\n\nexport default DndPreview;\n","import MenuButton from \"../UI/StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"../UI/StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"../UI/StartScreen/Menu/MenuTree\";\nimport { NavigationProvider } from \"../UI/StartScreen/NavigationContext\";\nimport React from \"react\";\nimport { Universal } from \"../../common/KeyboardLayouts\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePauseContext from \"./PauseContext\";\n\nconst PossibleFailScreen = () => {\n    const { state } = useGlobalContext();\n    const [refused, setRefused] = React.useState<{ refused: boolean; since: number }>({ refused: false, since: 0 });\n    const refuse = (val: boolean) => {\n        setRefused({\n            refused: refused.since >= 3 ? false : val,\n            since: refused.since >= 3 ? 0 : refused.since + 1,\n        });\n    };\n    React.useEffect(() => {\n        if (!state.hand.currentCard()) {\n            if (refused.refused) {\n                refuse(true);\n            }\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [state.token]);\n    const pause = usePauseContext();\n    //instead of immediate quit, use gamestate.giveUp\n    //quitting via EndScreen\n    //in versus this lets the other player gloat and confirm before exiting game\n    const { restart } = useGlobalContext();\n    React.useEffect(() => {\n        if (!pause.state.showMenu) {\n            pause.toggleMenu(true);\n        }\n        return () => pause.toggleMenu(false);\n    //@todo antipattern?\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [refused.refused]);\n    return !refused.refused ? (\n        <NavigationProvider>\n            <div className=\"gamemenu menu dialog\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle label=\"✋\" />\n                        <div className=\"announcement\">The game might be over</div>\n                        <MenuTree keyboardLayout={Universal}>\n                            <MenuButton\n                                icon=\"▶️\"\n                                title=\"Keep trying\"\n                                onClick={() => {\n                                    refuse(true);\n                                }}\n                            />\n                            <MenuButton icon=\"🏳️\" title=\"Give up\" onClick={() => restart()} />\n                        </MenuTree>\n                    </div>\n                </div>\n            </div>\n        </NavigationProvider>\n    ) : null;\n};\nexport default PossibleFailScreen;\n","import Card from \"../../Model/Deck/Card\";\nimport Model from \"../../Model/Model\";\nimport PossibleFailScreen from \"./PossibleFailScreen\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport useGameContext from \"./GameContext\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst FailDetector = () => {\n    const { state } = useGlobalContext();\n    const { gameState } = useGameContext();\n\n    const [suggestions, setSuggestions] = React.useState<{ any: boolean; stock: boolean; nonStock: boolean }>({\n        any: false,\n        stock: false,\n        nonStock: false,\n    });\n    React.useEffect(() => {\n        if (gameState.started) {\n            const copy = Model.copy(state);\n            copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.FULL);\n            copy.suggestor.evaluateOptions(copy);\n            setSuggestions({\n                any: copy.hasSuggestions(),\n                stock: copy._hasSuggestion(copy.stock),\n                nonStock: copy.hasNonStockSuggestions(),\n            });\n        }\n        //@todo use memo?\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [state.token]);\n\n    const [stockSuggestionCards, setStockSuggestionCards] = React.useState<Card[]>([]);\n    const [isPossibleFail, setPossibleFail] = React.useState<boolean>(false);\n    React.useEffect(() => {\n        if (!state.hand.currentCard() && gameState.started) {\n            //fail detection never ends the game, merely offers to quit or keep trying\n            //it also aquaints the user with the possibiltiy of undoing or restarting to be helpful\n            if (suggestions.nonStock) {\n                setStockSuggestionCards([]);\n                setPossibleFail(false);\n            } else if (suggestions.stock && !suggestions.nonStock) {\n                //@todo CYCLING FAIL DETECTION\n                //even with a full suggestion available, the situation may be hopeless\n                //that is true if the suggestion concerns the stock\n                //to find out if it's really hopeless, we need to track full cycles through the deck\n                //if a full cycle through the stack was performed and only stock suggestions came up\n                //it's basically a loss, same as above\n                //to achieve this we can store all cards that produced stock suggestions in a list\n                //as long as stock suggestions come up we add to the list\n                //once list has same length as stock + waste + hand(waste) we know it's over\n                //once we find a non-stock suggestion we empty out the list\n                const top = state.stock.getTop();\n                if (top) {\n                    setStockSuggestionCards([...stockSuggestionCards, top]);\n                }\n                if (state.stock.stack.length + state.waste.stack.length <= stockSuggestionCards.length) {\n                    setPossibleFail(true);\n                }\n                //however this whole fancy thing doesn't work if there are useless \"full\" suggestions.\n                //if the user is in full mode, and ignores these, it's a sign it's over\n                //if the user is in regular mode or lesser, we could recommend switching to full suggestions\n                //but that's not really the job of a faildetector\n            } else if (!suggestions.any) {\n                //@todo SIMPLE FAIL DETECTION\n                //no full suggestions = no moves possible mean fail unless all cards are in foundation\n                setPossibleFail(true);\n                //@todo implement menu clone that suggests to stop since there is nothing to do anymore\n            }\n        }\n        //@todo anti pattern?\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [suggestions]);\n\n    return isPossibleFail ? <PossibleFailScreen /> : null;\n};\n\nexport default FailDetector;\n","import React from \"react\";\nimport confetti from \"canvas-confetti\";\n\nconst Firework = (props: { intensity: number }) => {\n    const canvasRef = React.createRef<HTMLCanvasElement>();\n    React.useEffect(() => {\n        if (canvasRef && canvasRef.current && props.intensity) {\n            const count = 15 * props.intensity;\n            const origin = {\n                x: 0.5,\n                y: 0.33,\n            };\n\n            const scalar = window.innerWidth / (1080 / 100) / 100;\n            const defaults = {\n                ticks: 50,\n                origin,\n                particleCount: 40,\n                startVelocity: scalar * 20,\n                decay: 0.8,\n                spread: 360,\n                scalar: scalar,\n            };\n            const localConfetti = confetti.create(canvasRef.current, { resize: true });\n\n            const fire = (particleRatio: number, opts: confetti.Options) => {\n                localConfetti(\n                    Object.assign({}, defaults, opts, {\n                        particleCount: Math.floor(count * particleRatio),\n                    })\n                );\n            };\n\n            fire(0.25, {\n                startVelocity: scalar * 55,\n            });\n            fire(0.2, {\n                decay: 1.2,\n            });\n            fire(0.35, {\n                decay: 0.91,\n                scalar: scalar - 0.2,\n            });\n            fire(0.1, {\n                startVelocity: scalar * 25,\n                decay: 0.92,\n                scalar: scalar + 0.2,\n            });\n            fire(0.1, {});\n            fire(0.1, {\n                startVelocity: scalar * 45,\n            });\n        }\n    }, [canvasRef, props.intensity]);\n\n    return <canvas ref={canvasRef}></canvas>;\n};\n\nexport default Firework;\n","import CardModel from \"../../Model/Deck/Card\";\nimport Firework from \"./Firework\";\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst CardFirework = (props: { model: CardModel }) => {\n    const { state, updateContext } = useGlobalContext();\n\n    React.useEffect(() => {\n        if (props.model.success) {\n            const timeout = setTimeout(() => updateContext((ctx) => ctx.clearSuccess(props.model)));\n            return () => clearTimeout(timeout);\n        }\n    }, [state?.token, props.model, updateContext, props.model.success]);\n    return <Firework intensity={props.model.success} />;\n};\n\nexport default CardFirework;\n","const getStackLabel = (source: string) => {\n    const names = [0, 1, 2, 3, 4, 5, 6].map((id) => \" stack \" + (id + 1));\n    let label = \"\";\n    const split = source.split(\"-\");\n    label += split[0];\n    if (split.length > 1) {\n        label += names[parseInt(split[1])];\n    }\n    return label;\n};\n\nexport default getStackLabel;\n","import React, { MouseEventHandler, useCallback } from \"react\";\n\nimport CardFirework from \"./CardFirework\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport GameModes from \"../../GameModes\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport getStackLabel from \"./StackDescription\";\nimport { useDrag } from \"react-dnd\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePauseContext from \"./PauseContext\";\n\nconst useCardStyle = (model: CardModel | null, props: CardProps, _isDrag: () => boolean, opacity: any) => {\n    const getCardStyle = useCallback(() => {\n        if (!model) {\n            return {};\n        }\n        const style = {\n            opacity: _isDrag() ? 0 : opacity,\n            zIndex: (props.zIndex ? props.zIndex : (props.offsetTop && props.offsetTop(props.index, props.models) > 0 ? 1 : 0) * 20) + 1,\n            top: props.offsetTop ? props.offsetTop(props.index, props.models) / 15 + \"em\" : 0,\n            ...model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft(props.index) * 2 + \"em\";\n        }\n\n        if (!model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    }, [model, props, _isDrag, opacity]);\n\n    const [cardStyle, setCardStyle] = React.useState<any>(getCardStyle());\n\n    React.useEffect(() => {\n        setCardStyle(getCardStyle);\n    }, [getCardStyle]);\n    return cardStyle;\n};\n\n//@todo this makes the card flash when placing on green table. class is first assigned empty\nconst useClassName = (model: CardModel | null, props: CardProps, _isDrag: () => boolean, isFocused: () => boolean) => {\n    const getClassName = useCallback(() => {\n        if (!model) {\n            return \"card card-base\";\n        }\n        const hasSuggestion = (props.isSuggested && props.isSuggested(props.index)) || model.suggestion;\n        let className = `card card-base suit-${model.type.icon}`;\n        className +=\n            (!props.isSelected || !props.isSelected(props.index)) && !isFocused() && !hasSuggestion ? ` card-stack-${model.source}` : \"\";\n        className += !_isDrag() && props.isSelected && props.isSelected(props.index) && !_isDrag() ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += model.canClick() ? \" clickable\" : \"\";\n        className += hasSuggestion && !isFocused() ? \" card-suggested\" : \"\";\n        className += isFocused() ? \" card-focused\" : \"\";\n        return className;\n    }, [_isDrag, isFocused, model, props]);\n\n    const [className, setClassName] = React.useState<string>(getClassName());\n\n    React.useEffect(() => {\n        setClassName(getClassName());\n    }, [getClassName]);\n\n    return className;\n};\n\nconst useStackBaseStyle = (model: CardModel | null) => {\n    const getStackbaseStyle: () => React.CSSProperties = useCallback(() => {\n        if (!model || !model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    }, [model]);\n\n    const [stackbaseStyle, setStackbaseStyle] = React.useState<any>(getStackbaseStyle());\n\n    React.useEffect(() => {\n        setStackbaseStyle(getStackbaseStyle());\n    }, [getStackbaseStyle]);\n    return stackbaseStyle;\n};\n\nconst useLabel = (model: CardModel | null) => {\n    const [label, setLabel] = React.useState(\"\");\n    React.useEffect(() => {\n        if (model) {\n            let l = getStackLabel(model.source);\n            l += \": \";\n            l += model.isHidden ? \"hidden card\" : model.type.icon + model.face;\n            setLabel(l);\n        }\n    }, [model]);\n\n    return label;\n};\n\ntype CardProps = {\n    index: number;\n    models: CardModel[];\n    isSuggested?: (index: number) => boolean | undefined;\n    isSelected?: (index: number) => boolean;\n    blink?: number;\n    zIndex?: number;\n    offsetTop?: (index: number, models: CardModel[]) => number;\n    offsetLeft?: (index: number) => number;\n    isDrag?: boolean;\n};\n\nconst Card = (props: CardProps) => {\n    const ReRender = () => (\n        <Card\n            {...{\n                ...props,\n                models: props.models.slice(props.index, props.models.length),\n                offsetLeft: () => 0,\n                isSelected: () => false,\n                index: 0,\n                isDrag: isDrag,\n            }}\n        />\n    );\n    ReRender.displayName = \"ReRender\";\n    const { state, updateGameContext } = useGlobalContext();\n    const pause = usePauseContext();\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const [isDrag, setDrag] = React.useState<boolean>(!!props.isDrag);\n\n    const model: CardModel = props.models[props.index];\n    const isFocused = useCallback(() => !!model && state.focus.hasCard(model), [model, state.focus]);\n\n    const _isDrag = useCallback(() => props.isDrag || isDrag, [props.isDrag, isDrag]);\n\n    const [{ opacity }, dragRef, preview] = useDrag({\n        item: { type: \"card\", model: model, render: ReRender() },\n        collect: (monitor) => {\n            return { opacity: monitor.isDragging() ? 1 : 1 };\n        },\n        canDrag: () => model.canClick() && !model.isHidden && (state.hand.currentCard() === null || model.equals(state.hand.currentCard())),\n        begin: () => {\n            setDrag(true);\n            //@todo if other card is still selected, drop it first.\n            if (model.onClick && (!props.isSelected || !props.isSelected(props.index))) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n        end: (_item, monitor) => {\n            setDrag(false);\n            if (!monitor.didDrop()) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n    });\n\n    //Deactivate native dnd preview - it's fast but it's not working on mobile.\n\n    React.useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, [preview]);\n\n    const getRef = useCallback(() => (model.canClick() ? dragRef : inputEl), [inputEl, model, dragRef]);\n\n    React.useEffect(() => {\n        if (isFocused() && state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER) {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n        //@todo how to one-time hook in valid way?\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isFocused]);\n\n    const onClick: MouseEventHandler<HTMLButtonElement> = (e) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX === 0 && e.clientY === 0;\n        let ele = e.target as HTMLElement;\n\n        while (ele && !ele.className.includes(\"card-base\") && ele.offsetParent) {\n            ele = ele.offsetParent as HTMLElement;\n        }\n\n        const rect = ele.getBoundingClientRect();\n\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - (ele?.ownerDocument?.defaultView?.pageXOffset || 0),\n                y: e.clientY - (ele?.ownerDocument?.defaultView?.pageYOffset || 0),\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n\n        const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n        //@todo A11Y allow keyboard tab navigation in singleplayer\n        if (model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.inputMode = \"mouse\";\n                }\n            });\n        }\n    };\n    const className = useClassName(model, props, _isDrag, isFocused);\n    const cardStyle = useCardStyle(model, props, _isDrag, opacity);\n    const stackbaseStyle = useStackBaseStyle(model);\n    const label = useLabel(model);\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n    //@todo entropy as animated effect, triggered after rendering of action\n\n    if (!props.models.length) {\n        return null;\n    }\n\n    return (\n        <>\n            <div style={stackbaseStyle} className=\"stack-base\">\n                <button\n                    onFocus={() => {\n                        //@todo re-enable focusing\n                        // updateContext((ctx) => {\n                        //     ctx.navigator.update(model.source, props.model);\n                        // });\n                    }}\n                    onBlur={() => {\n                        //updateContext((ctx) => ctx.focus.unsetCard(props.model));\n                    }}\n                    style={cardStyle}\n                    // ref={inputEl}\n                    ref={getRef()}\n                    className={className}\n                    onClick={onClick}\n                    disabled={!model.canClick() || !pause.state.showCards}\n                    tabIndex={model.canClick() ? 0 : -1}\n                    aria-label={label}\n                    title={label}\n                >\n                    <CardFirework model={model} />\n                    <div className=\"card-content\">\n                        {model.isHidden || !pause.state.showCards ? (\n                            <div className=\"card-back\">&nbsp;</div>\n                        ) : (\n                            <div className=\"card-grid-container\">\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-left\">{model.face}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div className=\"mainface\">\n                                    <div className=\"align-center\">{model.face} </div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-right\">{model.face}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </button>\n            </div>\n            {props.models.length - 1 > props.index && <Card {...props} isDrag={_isDrag()} index={props.index + 1} />}\n        </>\n    );\n};\n\nexport default Card;\n","import React, { MouseEventHandler } from \"react\";\n\nimport GameModes from \"../../GameModes\";\nimport { IStack } from \"../../Model/Game/Stack\";\nimport getStackLabel from \"./StackDescription\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst StackBase = (props: { model: IStack; children?: React.ReactNode }) => {\n    let classname = \"card-base socket\";\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        if (state.focus.hasStack(props.model.source) && state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER) {\n            const current = inputEl && inputEl.current ? inputEl.current : null;\n            current && current.focus();\n        }\n    });\n    if (!props.model.stack.length) {\n        if (props.model.blinkFor) {\n            classname += \" socket-blink\";\n        } else if (state.focus.hasStack(props.model.source)) {\n            classname += \" socket-focused\";\n        } else {\n            classname += \" socket-empty\";\n        }\n    } else {\n        classname += \" socket-full\";\n    }\n\n    if (props.model.suggestion && !props.model.stack.length) {\n        classname += \" socket-suggested\";\n    }\n\n    const onClick: MouseEventHandler<HTMLButtonElement> = (e) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX === 0 && e.clientY === 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": empty socket\";\n\n    return (\n        <button\n            onFocus={() => {\n                // updateContext((ctx) => {\n                //     ctx.navigator.update(props.model.parent);\n                // });\n            }}\n            onBlur={() => {\n                // updateContext((ctx) => ctx.focus.unsetStack(props.model.parent));\n            }}\n            ref={inputEl}\n            className={classname}\n            onClick={onClick}\n            disabled={!!props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n            aria-label={label}\n            title={label}\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import { IStack } from \"../../Model/Game/Stack\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\n\ntype _selector = (model: Model) => IStack;\n\nconst useBlinkEffect = (selector: _selector) => {\n    const { updateContext, state } = useGlobalContext();\n    const model = selector(state);\n    React.useEffect(() => {\n        let timeout: NodeJS.Timeout | null = null;\n        if (state && selector(state).blinkFor) {\n            timeout = setTimeout(\n                () =>\n                    updateContext((state: Model) => {\n                        selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n        return () => {\n            timeout && clearTimeout(timeout);\n        };\n    }, [state, model.blinkFor, updateContext, selector]);\n};\n\nexport default useBlinkEffect;\n","import { IStack } from \"../../Model/Game/Stack\";\nimport { useDrop } from \"react-dnd\";\nimport useGlobalContext from \"../GlobalContext\";\n\nexport const useStackDrop = (model: IStack, accepts?: (c: any) => boolean) => {\n    const { updateGameContext } = useGlobalContext();\n    return useDrop({\n        accept: \"card\",\n        canDrop: (item: any) => {\n            return (accepts && accepts(item.model)) || model.accepts(item.model);\n        },\n        drop: () => {\n            updateGameContext(model.clickEmpty({ isKeyBoard: false }));\n        },\n    })[1];\n};\n","import Card from \"./Card\";\nimport FoundationStackModel from \"../../Model/Game/FoundationStack\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\nimport { useStackDrop } from \"./useStackDrop\";\n\ntype FoundationProps = { index: number; model: FoundationStackModel };\n\nconst Foundation = () => {\n    const { state } = useGlobalContext();\n    return (\n        <>\n            {state.foundation.stacks.map((foundation, index) => (\n                <FoundationStack key={index} model={foundation} index={index} />\n            ))}\n        </>\n    );\n};\n\nexport default Foundation;\n\nconst FoundationStack = (props: FoundationProps) => {\n    useBlinkEffect((model) => model.foundation.stacks[props.index]);\n    const { state } = useGlobalContext();\n    const model = props.model;\n    const drop = useStackDrop(props.model);\n    const cards = state.hand.source === model.source ? [...model.stack, ...state.hand.stack] : [...model.stack];\n    return (\n        <div className=\"board-field\" key={props.index} ref={drop}>\n            <StackBase model={model}>\n                <div className={\"align-center foundation-base suit-\" + model.icon}>{model.icon}</div>\n            </StackBase>\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={model.blinkFor}\n                isSuggested={(index) => model.suggestion && model.stack.length - 1 === index}\n                isSelected={(index) => index > model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import React from \"react\";\nimport useGameContext from \"../../Game/GameContext\";\nimport usePauseContext from \"../../Game/PauseContext\";\n\nconst Clock = () => {\n    const { state, getElapsed } = usePauseContext();\n    const { gameState } = useGameContext();\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (gameState.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [gameState.started, state.paused, getElapsed]);\n\n    return !gameState.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Hearts = () => {\n    const { state } = useGlobalContext();\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode === \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode === \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode === \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Hint = () => {\n    const { state, updateContext } = useGlobalContext();\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import React from \"react\";\nimport { toast } from \"react-toastify\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Points = () => {\n    const { state } = useGlobalContext();\n    const showToast = () => {\n        toast.info(\n            <ul>\n                {state.game.rating.ratings.reverse().map((rating, index) => (\n                    <li key={index}>\n                        {rating.points} - {rating.text}\n                    </li>\n                ))}\n            </ul>,\n            { autoClose: false }\n        );\n    };\n    return (\n        <div>\n            <button title=\"Points\" onClick={showToast}>\n                <span className=\"icon\">🏆</span>\n            </button>\n            {state?.game.rating.points}\n        </div>\n    );\n};\n\nexport default Points;\n","import React from \"react\";\nimport { useBoardContext } from \"../../Game/BoardContext\";\nimport usePauseContext from \"../../Game/PauseContext\";\n\nconst ToggleMenu = () => {\n    const paused = usePauseContext();\n    const { player } = useBoardContext();\n\n    return paused.state.showMenu ? null : (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Undo = () => {\n    //@todo use GlobalState token to avoid double processing\n    const { state, replaceContext } = useGlobalContext();\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"./Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons header-right\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import \"./StartScreen/Menu.scss\";\n\nimport { Universal, getKeyboardLayout } from \"../../common/KeyboardLayouts\";\nimport useNavigationContext, { NavigationProvider } from \"./StartScreen/NavigationContext\";\n\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GameModes from \"../../GameModes\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\nimport { useBoardContext } from \"../Game/BoardContext\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePauseContext from \"../Game/PauseContext\";\n\nconst _Menu = () => {\n    return (\n        <NavigationProvider>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = useGlobalContext();\n    const pause = usePauseContext();\n    const { player } = useBoardContext();\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too if consented and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = useNavigationContext();\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining === 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining === 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) {\n        announcement = \"The game is not paused.\";\n    }\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle label=\"😴\" />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle label=\"😴\" />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon=\"▶️\"\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                        />\n                        <MenuButton\n                            icon=\"🌪️\"\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            toggled={navigation.mainMenu === \"entropy\"}\n                        >\n                            <MenuButton\n                                icon=\"🌪️\"\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                            />\n                            <MenuButton\n                                icon=\"🌬️\"\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon=\"♻️\"\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon=\"🗑️\" title=\"Quit Game\" onClick={() => restart()} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import React from \"react\";\n\nconst usePrevious = <T>(value: T) => {\n    const ref = React.useRef<T>();\n    React.useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n","import Card from \"./Card\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport useGameContext from \"./GameContext\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePauseContext from \"./PauseContext\";\nimport usePrevious from \"./usePrevious\";\n\nconst Renderer = (props: { length: number; paused: boolean; started: number }) => {\n    const context = useGlobalContext();\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout: NodeJS.Timeout | null = null;\n        if (\n            context.state.settings.launchSettings.speed &&\n            started &&\n            !paused &&\n            previous &&\n            (previous?.length !== length || previous?.started !== started || previous?.paused !== paused)\n        ) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (\n                        length === state.stock.stack.length &&\n                        state.stock.passes > 0 &&\n                        (state.stock.stack.length || state.waste.stack.length)\n                    ) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => {\n            timeout && clearTimeout(timeout);\n        };\n    }, [context, length, paused, previous, started]);\n\n    if (!context || !context.state) return null;\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            <Card\n                index={0}\n                key={0}\n                models={context.state.stock.stack}\n                offsetTop={(index) => (index / 2) * -1}\n                zIndex={0}\n                blink={context?.state?.stock.blinkFor}\n                isSuggested={(index) => context?.state?.stock.suggestion && index === context.state.stock.stack.length - 1}\n            />\n        </div>\n    );\n};\n\nconst Stock = () => {\n    const { state } = useGlobalContext();\n    useBlinkEffect((model) => model.stock);\n    const pause = usePauseContext();\n    const { gameState } = useGameContext();\n    const { paused } = pause.state;\n    return <Renderer length={state.stock.stack.length} paused={paused} started={gameState.started} />;\n};\n\nexport default Stock;\n","import Card from \"./Card\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport TableauModel from \"../../Model/Game/Tableau\";\nimport TableauStackModel from \"../../Model/Game/TableauStack\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\nimport { useStackDrop } from \"./useStackDrop\";\n\ntype TableauProps = { index: number; model: TableauStackModel; parent: TableauModel };\n\nconst Tableau = () => {\n    const { state } = useGlobalContext();\n    return (\n        <>\n            {state.tableau.stacks.map((tableau, index) => (\n                <TableauStack key={index} index={index} model={tableau} parent={state.tableau} />\n            ))}\n        </>\n    );\n};\nexport default Tableau;\n\nconst TableauStack = (props: TableauProps) => {\n    useBlinkEffect((s) => s.tableau.stacks[props.index]);\n    const { state } = useGlobalContext();\n    const drop = useStackDrop(props.model);\n    const cards = state.hand.source === props.model.source ? [...props.model.stack, ...state.hand.stack] : [...props.model.stack];\n    let offset = 1;\n    const getOffset = (index: number, cards: CardModel[]) => {\n        for (let i = 0; i <= index; i++) {\n            if (cards[i] && !cards[i].isHidden) {\n                offset = i * 12 + (index - i) * 24;\n                return offset;\n            }\n        }\n        offset = index * 12;\n        return offset;\n    };\n\n    return (\n        <div className=\"board-field\" ref={drop}>\n            <StackBase model={props.model} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={props.model.blinkFor}\n                isSuggested={(index) => props.model.suggestion && props.model.stack.length - 1 === index}\n                offsetTop={(index, models) => getOffset(index, models)}\n                isSelected={(index) => index > props.model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import Card from \"./Card\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\nimport { useStackDrop } from \"./useStackDrop\";\n\nconst Waste = () => {\n    const { state } = useGlobalContext();\n    useBlinkEffect((model) => model.waste);\n    const getOffset = (index: number) => {\n        if (state.settings.launchSettings.drawMode === \"single\") {\n            return 0;\n        }\n        const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n        let additionalOffset = 2;\n        if (length === 2) {\n            additionalOffset = 1;\n        }\n\n        if (length === 1) {\n            additionalOffset = 0;\n        }\n\n        return ((index - length - 2) % 3) + additionalOffset;\n    };\n\n    const drop = useStackDrop(state.waste, () => state.hand.isFromWaste());\n\n    const cards = state?.hand.source === state.waste.source ? [...state.waste.stack, ...state.hand.stack] : [...state.waste.stack];\n\n    return (\n        <div className=\"board-field\" ref={drop}>\n            <StackBase model={state.waste} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                offsetTop={(index) => (index / 2) * -1}\n                offsetLeft={(index) => getOffset(index)}\n                blink={state.waste.blinkFor}\n                isSuggested={(index) => state.waste.suggestion && index === state.waste.stack.length - 1}\n                isSelected={(index) => index > state.waste.stack.length - 1}\n            />\n        </div>\n    );\n};\nexport default Waste;\n","import React from \"react\";\nimport { useBoardContext } from \"./BoardContext\";\nimport useGameContext from \"./GameContext\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst Detector = () => {\n    const { state } = useGlobalContext();\n    const { win } = useGameContext();\n    const { player } = useBoardContext();\n\n    React.useEffect(() => {\n        if (!state.hand.currentCard() && state.foundation.countCards() === 52) {\n            win(player);\n        }\n    }, [state.token, state.foundation, state.hand, player, win]);\n    return null;\n};\n\nconst WinDetector = () => {\n    const { state } = useGlobalContext();\n    const { gameState } = useGameContext();\n    return (!gameState.isEnded && !!state.settings.launchSettings.autoUncover && !!gameState.started && <Detector />) || null;\n};\n\nexport default WinDetector;\n","import \"./Board.scss\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nimport { Slide, ToastContainer } from \"react-toastify\";\n\nimport AutoSolver from \"./AutoSolver\";\nimport AutoUncoverer from \"./AutoUncoverer\";\nimport BoardNavigator from \"./Navigation/BoardNavigator\";\nimport Dealer from \"./Dealer\";\nimport DndPreview from \"../../common/DndPreview\";\nimport FailDetector from \"./FailDetector\";\nimport Foundation from \"./Foundation\";\nimport Header from \"../UI/Header/Header\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\nimport WinDetector from \"./WinDetector\";\n\ntype BoardProps = { mode: string };\nconst Board = (props: BoardProps) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n    return (\n        <>\n            <Menu />\n            <Header mode={props.mode} />\n            <ToastContainer\n                style={{ zIndex: 8888 }}\n                position=\"top-center\"\n                closeOnClick={false}\n                newestOnTop={true}\n                limit={1}\n                pauseOnFocusLoss={false}\n                draggable={false}\n                transition={Slide}\n            />\n            <div className={\"board-jail \" + props.mode}>\n                <div className={\"board-grid-container \" + props.mode}>\n                    <Stock />\n                    <Waste />\n                    <div className=\"board-field spacer\" ref={ref}>\n                        {ref.current && <DndPreview reff={ref.current} />}\n                    </div>\n                    <Foundation />\n                    <Tableau />\n                </div>\n            </div>\n            <Dealer />\n            <BoardNavigator />\n            <AutoSolver />\n            <WinDetector />\n            <FailDetector />\n            \n            <AutoUncoverer />\n        </>\n    );\n};\n\nexport default Board;\n","import \"./Screens.scss\";\n\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePauseContext from \"../Game/PauseContext\";\n\nconst EndScreen = () => {\n    const { state, restart } = useGlobalContext();\n    const pause = usePauseContext();\n    //@todo show launch settings (draw mode, recycling mode)\n    //@todo show win or lose situation\n    //@todo how to persist the result? from here?\n    // Or track it via context from beginning on?\n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport { BoardProvider } from \"./BoardContext\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../GlobalContext\";\nimport React from \"react\";\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\n//We use class component here because setState allows partial updates\nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            if (previous.game.timemachine.previousStates.length) {\n                previous.game.timemachine.previousStates = [\n                    //@todo this also assigns non-memorable states\n                    //@todo instead of array, always have single previous state\n                    //@todo this could still grow too big in memory\n                    //@todo implement model.boardEquals and pointsEquals to get rid of 'memorable' states?\n                    previous.game.timemachine.previousStates[previous.game.timemachine.previousStates.length - 1],\n                ];\n            } else {\n                previous.game.timemachine.previousStates = [];\n            }\n\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                state.setToken(Math.random());\n                return state;\n            }\n\n            return null;\n        });\n\n    //on every render, we refresh the click handlers in the model and the suggestions\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider value={{ player: this.props.player }}>\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n","import AspectRatio from \"../../common/AspectRatio/AspectRatio\";\nimport BoardWrap from \"./BoardWrap\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport DelayedSuspense from \"../../common/DelayedSuspense\";\nimport { GameContextProvider } from \"./GameContext\";\nimport GameModes from \"../../GameModes\";\nimport { LaunchSettings } from \"../../Common\";\nimport { PauseProvider } from \"./PauseContext\";\nimport Ratios from \"../../common/AspectRatio/Ratios\";\nimport React from \"react\";\n\ninterface GameProps {\n    launchState: LaunchSettings;\n    deck: Deck;\n    restart: () => void;\n}\n\nconst SinglePlayer = (props: GameProps) => {\n    const { launchState, deck, restart } = props;\n    return (\n        <AspectRatio ratio={Ratios._4to3}>\n            <div className={\"layout-grid-container singleplayer\"}>\n                <BoardWrap player={0} settings={launchState} restart={restart} deck={deck} />\n            </div>\n        </AspectRatio>\n    );\n};\n\nconst SplitScreen = (props: GameProps) => {\n    const { launchState, deck, restart } = props;\n\n    return (\n        <div className=\"game-layout-container splitscreen\">\n            <div className={\"layout-grid-container \" + launchState.boardMode}>\n                <BoardWrap\n                    player={0}\n                    settings={{ ...launchState, inputMode: launchState.players[0].inputMethod }}\n                    restart={restart}\n                    deck={deck.copy()}\n                />\n            </div>\n\n            <div className={\"layout-grid-container \" + launchState.boardMode}>\n                <BoardWrap\n                    player={1}\n                    settings={{ ...launchState, inputMode: launchState.players[1].inputMethod }}\n                    restart={restart}\n                    deck={deck.copy()}\n                />\n            </div>\n        </div>\n    );\n};\n\nconst Game = (props: GameProps) => {\n    return (\n        <GameContextProvider>\n            <PauseProvider>\n                <DelayedSuspense delay={500} fallback={<h3>Loading...</h3>}>\n                    {props.launchState.boardMode === GameModes.SINGLEPLAYER && <SinglePlayer {...props} />}\n                    {props.launchState.boardMode === GameModes.VERSUS && <SplitScreen {...props} />}\n                </DelayedSuspense>\n            </PauseProvider>\n        </GameContextProvider>\n    );\n};\n\nexport default Game;\n"],"sourceRoot":""}