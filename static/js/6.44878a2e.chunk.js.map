{"version":3,"sources":["View/Game/Navigation/BoardGamePad.tsx","View/Game/Navigation/BoardKeyboard.tsx","View/Game/Navigation/BoardNavigator.tsx","View/Game/Dealer.tsx","View/Game/StackDescription.ts","View/Game/Card.tsx","View/Game/StackBase.tsx","View/Game/useBlinkEffect.ts","View/Game/Foundation.tsx","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","View/UI/Menu.tsx","View/Game/usePrevious.ts","View/Game/Stock.tsx","View/Game/Tableau.tsx","View/Game/Waste.tsx","View/Game/Board.tsx","View/UI/EndScreen.js","Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/BasicStack.ts","Model/Game/HandHoldingStack.ts","Model/Game/Foundation.ts","Model/Business/Foundation.ts","Model/Game/Rating.ts","Model/Game/TimeMachine.ts","Model/Game/Game.ts","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.ts","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/Tableau.ts","Model/Game/Waste.ts","Model/Model.ts","View/Game/BoardWrap.tsx"],"names":["BoardGamePad","props","state","React","useContext","GlobalContext","player","BoardContext","isGamePadDriven","settings","launchSettings","inputMode","isSinglePlayer","boardMode","GameModes","SINGLEPLAYER","switchToGamePad","ctx","focus","isKeyBoard","GamePad","gamepadIndex","players","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","layout","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","BoardNavigator","updateContext","updateGameContext","replaceContext","paused","PauseContext","before","x","navigator","currentIndex","y","z","isPaused","handlers","modifier","moveLeft","moveRight","moveUp","moveDown","handler","pressCurrent","hand","stack","length","onClick","isKeyboard","togglePause","suggestionMode","supportsHints","isTemporary","isVisible","isDisabled","enableHint","_state","previous","game","timemachine","popPreviousState","previousStates","rating","penalize","Dealer","timeouts","quickDeal","dealer","isDealt","dealAll","deal","dealt","push","setTimeout","dealOne","useEffect","forEach","timeout","clearTimeout","getStackLabel","source","names","map","id","label","split","parseInt","Card","ReRender","models","slice","index","offsetLeft","isSelected","isDrag","model","displayName","pause","inputEl","useRef","isFocused","hasCard","useState","setDrag","_isDrag","useDrag","item","type","text","render","collect","monitor","opacity","isDragging","canDrag","canClick","isHidden","currentCard","equals","begin","console","log","context","end","_item","didDrop","dragRef","preview","getEmptyImage","captureDraggingState","current","card","icon","face","style","pointerEvents","className","onFocus","onBlur","zIndex","offsetTop","top","entropyStyle","left","getCardStyle","ref","hasSuggestion","isSuggested","suggestion","blink","getClassName","e","preventDefault","clientX","clientY","ele","target","includes","offsetParent","rect","getBoundingClientRect","position","click","ownerDocument","defaultView","pageXOffset","pageYOffset","element","disabled","tabIndex","aria-label","title","StackBase","classname","hasStack","blinkFor","clickEmpty","children","useBlinkEffect","selector","unblink","FoundationStacks","foundation","stacks","Foundation","useDrop","accept","drop","cards","Clock","getElapsed","elapsed","setElapsed","interval","setInterval","started","clearInterval","Hearts","recyclingMode","stock","passes","createString","Array","from","keys","join","getHearts","Hint","Points","points","ToggleMenu","Undo","Math","pow","multiplicator","Header","mode","Menu","restart","NavigationContext","navigation","setNavigation","switchToMenu","menu","pos","screeen","mainMenu","showMenu","remaining","allowed","pauses","announcement","keyboardLayout","pausedBy","MenuTitle","MenuTree","MenuButton","sm","SuggestionModes","next","key","setSuggestionMode","val","toggleMainMenu","toggled","EntropyLevels","baseEntropy","lvl","setEntropy","interactionEntropy","skip","_Menu","screen","navigationContext","value","usePrevious","Renderer","speed","waste","isFromWaste","putDownHand","addAll","popTop","canRecycle","recycle","Stock","TableauStacks","tableau","parent","Tableau","s","i","getOffset","Waste","drawMode","isHoldingCard","additionalOffset","Preview","usePreview","display","_itemType","reff","width","Board","options","HTML5toTouch","EndScreen","isEnded","getTimePenalty","Date","now","getBonusPoints","getTotal","Blinker","startBlink","registerBlink","stopBlink","dispatchPutDown","wouldAcceptHand","src","registerMove","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","uncover","registerUncover","dealingAt","callback","newCard","popOne","isFirst","this","Dispatcher","clickHandler","getHandler","Focus","keyboard","validSettings","setCard","unsetCard","unsetStack","setStack","BasicStack","getTop","getClickable","filter","HandHoldingStack","getHandContent","FoundationStack","setOnClick","acceptedCards","usedCards","color","p","sindex","getCurrentAccepted","currentFoundation","hasMoreThanOneCard","accepts","add","putDown","currentAccepted","causeEntropy","min","pop","remove","getPreviousUsed","countCards","f","reduce","a","b","Object","Suits","suit","getFoundationOrder","template","copy","orig","origStack","copyAll","tryDetectEnd","_card","Rating","registerHint","disableHint","currentMove","rateMove","registerRecycle","debug","other","undoPenalty","penalty","done","hintPenalty","start","secondsToFinish","trunc","round","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","memorable","modified","pushPreviousState","modelEquals","isRequested","popPrevious","stackEquals","every","stacksEqual","Game","Hand","c","splice","_onClick","isHoldingKing","isFromCurrentSource","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","Navigator","rows","getZindex","elem","targets","update","row","j","finishNav","valid","direction","undefined","clickable","toggleRow","pickLast","last","Settings","suggestionModes","get","getHintMode","allSuggestionModes","recyclings","reverse","setCardProperties","isOnTop","result","_position","moveToWaste","recycleWaste","Suggestions","evaluateOptions","disableAllSuggestions","NONE","getUncoverOptions","getPutdownSuggestions","getPickupOptions","FULL","SCORED","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","onClickhidden","canUncover","getStack","canPutDown","range","getTableauOrder","indexOf","getCard","stackEntropy","entropy","concat","offset","canAdd","suggestor","withSuggestions","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","createContext","BoardProvider","Provider","BoardWrap","setState","Component"],"mappings":"iXAuCeA,EA/BM,SAACC,GAA6B,IACvCC,EAAUC,IAAMC,WAAWC,KAA3BH,MACR,IAAKA,EAAO,OAAO,KAF2B,IAGtCI,EAAWH,IAAMC,WAAWG,IAA5BD,OACFE,EAA6D,WAA3CN,EAAMO,SAASC,eAAeC,UAChDC,EAAiBV,EAAMO,SAASC,eAAeG,YAAcC,IAAUC,aAEvEC,EAAkB,SAACC,GACrBA,EAAIC,MAAMC,YAAW,GACjBP,IACAK,EAAIR,SAASC,eAAeC,UAAY,YAIhD,OAAOC,GAAkBJ,EACrB,cAACY,EAAA,EAAD,CACIC,aAAcnB,EAAMO,SAASC,eAAeY,QAAQhB,GAAQiB,YAC5DC,OAAQ,kBAAMvB,EAAMuB,OAAOR,IAC3BS,QAAS,kBAAMxB,EAAMwB,QAAQT,IAC7BU,KAAM,kBAAMzB,EAAMyB,KAAKV,IACvBW,OAAQ,kBAAM1B,EAAM0B,OAAOX,IAC3BY,SAAU,kBAAM3B,EAAM2B,SAASZ,IAC/Ba,SAAU,kBAAM5B,EAAM4B,SAASb,IAC/Bc,OAAQ,kBAAM7B,EAAM6B,OAAOd,IAC3Be,OAAQ,kBAAM9B,EAAM8B,UACpBC,QAAS,kBAAM/B,EAAM+B,QAAQhB,IAC7BiB,OAAQ,kBAAMhC,EAAMgC,OAAOjB,MAE/B,M,gBCMOkB,EAhCO,SAACjC,GAA6B,IACxCC,EAAUC,IAAMC,WAAWC,KAA3BH,MACR,IAAKA,EAAO,OAAO,KAF4B,IAGvCI,EAAWH,IAAMC,WAAWG,IAA5BD,OACF6B,EAA+D,aAA5CjC,EAAMO,SAASC,eAAeC,UACjDC,EAAiBV,EAAMO,SAASC,eAAeG,YAAcC,IAAUC,aACvEqB,EAASxB,EAAiByB,IAAYC,YAAkBpC,EAAMO,SAASC,eAAeY,QAAQhB,GAAQiB,aAEtGgB,EAAmB,SAACtB,GACtBA,EAAIC,MAAMC,YAAW,GACjBP,IACAK,EAAIR,SAASC,eAAeC,UAAY,aAIhD,OAAOwB,GAAoBvB,EACvB,cAAC4B,EAAA,EAAD,CACIJ,OAAQA,EACRZ,OAAQ,kBAAMvB,EAAMuB,OAAOe,IAC3Bd,QAAS,kBAAMxB,EAAMwB,QAAQc,IAC7Bb,KAAM,kBAAMzB,EAAMyB,KAAKa,IACvBZ,OAAQ,kBAAM1B,EAAM0B,OAAOY,IAC3BX,SAAU,kBAAM3B,EAAM2B,SAASW,IAC/BV,SAAU,kBAAM5B,EAAM4B,SAASU,IAC/BT,OAAQ,kBAAM7B,EAAM6B,OAAOS,IAC3BR,OAAQ,kBAAM9B,EAAM8B,UACpBC,QAAS,kBAAM/B,EAAM+B,QAAQO,IAC7BN,OAAQ,kBAAMhC,EAAMgC,OAAOM,MAE/B,M,QC8DOE,EA3FQ,WAAO,IAAD,EAC2CtC,IAAMC,WAAWC,KAA7EH,EADiB,EACjBA,MAAOwC,EADU,EACVA,cAAeC,EADL,EACKA,kBAAmBC,EADxB,EACwBA,eACjD,IAAK1C,EAAO,OAAO,KACnB,IAAM2C,EAAS1C,IAAMC,WAAW0C,KACxBxC,EAAWH,IAAMC,WAAWG,IAA5BD,OACFyC,EAAS,CAAEC,EAAG9C,EAAM+C,UAAUC,aAAaF,EAAGG,EAAGjD,EAAM+C,UAAUC,aAAaC,EAAGC,EAAGlD,EAAM+C,UAAUC,aAAaE,GACjHC,IAAaR,EAAO3C,MAAM2C,OAK1BS,EAAW,CACb9B,OAAQ,SAAC+B,GAAD,OACJb,GAAc,SAACzB,GACXsC,EAAStC,GACTA,EAAIgC,UAAUO,SAAST,OAG/BtB,QAAS,SAAC8B,GAAD,OACLb,GAAc,SAACzB,GACXsC,EAAStC,GACTA,EAAIgC,UAAUQ,UAAUV,OAGhCrB,KAAM,SAAC6B,GAAD,OACFb,GAAc,SAACzB,GACXsC,EAAStC,GACTA,EAAIgC,UAAUS,OAAOX,OAG7BpB,OAAQ,SAAC4B,GAAD,OACJb,GAAc,SAACzB,GACXsC,EAAStC,GACTA,EAAIgC,UAAUU,SAASZ,OAG/BnB,SAAU,SAAC2B,GAAD,OACNZ,GAAkB,SAAC1B,GAAS,IAAD,EACvBsC,EAAStC,GACT,IAAM2C,EAAO,OAAG1D,QAAH,IAAGA,GAAH,UAAGA,EAAO+C,iBAAV,aAAG,EAAkBY,eAClCD,GAAWA,EAAQ3C,OAG3BY,SAAU,SAAC0B,GAAD,OACNb,GAAc,SAACzB,GACXsC,EAAStC,GACTA,EAAI6C,KAAKC,MAAMC,QAAU/C,EAAI6C,KAAKC,MAAM,GAAGE,QAAQ,CAAEC,YAAY,GAAxCjD,CAAgDA,OAGjFe,QAAS,SAACuB,GACNb,GAAc,SAACxC,GACXqD,EAASrD,MAEb2C,EAAOsB,YAAYd,EAAU/C,IAGjCwB,OAAQ,SAACyB,GACLb,GAAc,SAACxC,GACXqD,EAASrD,GAlDH,SAACA,GAAD,OAAkBA,EAAMO,SAAS2D,eAAeC,eAAiBnE,EAAMO,SAAS2D,eAAeE,YAmDjGC,CAAUrE,KAlDP,SAACA,GAAD,OAAkBA,EAAMO,SAAS2D,eAAeE,YAkD9BE,CAAWtE,IAChCA,EAAMO,SAASgE,iBAK3B1C,OAAQ,WACJa,GAAe,SAAC8B,GACZ,IAAMC,EAAWD,EAAOE,KAAKC,YAAYC,iBAAiB5E,EAAM0E,KAAKC,YAAYE,eAAef,OAAS,EAAG9D,GAC5G,OAAIyE,GACAA,EAASC,KAAKI,OAAOC,SAASP,EAAOE,KAAKI,QACnCL,GAEJ,SAGf1C,OAAQ,SAACsB,GACLb,GAAc,SAACxC,GACXqD,EAASrD,MAEb2C,EAAOsB,YAAYd,EAAU/C,KAIrC,OAAO+C,EAAW,KACd,qCACI,cAAC,EAAD,eAAmBC,IACnB,cAAC,EAAD,eAAkBA,QC9Df4B,EA/BW,WAAO,IAAD,EACM/E,IAAMC,WAAWC,KAA3CH,EADoB,EACpBA,MAAO0C,EADa,EACbA,eACf,IAAK1C,EAAO,OAAO,KACnB,IAAMiF,EAAkB,GAExB,GAAIjF,EAAMO,SAASC,eAAe0E,UAC1BlF,GAASA,EAAMmF,SAAWnF,EAAMmF,OAAOC,SACvC1C,EAAe1C,EAAMmF,OAAOE,eAE7B,CACH,IAAMC,EAAO,SAAPA,EAAQC,GACVN,EAASO,KACLC,YAAW,WACHzF,GAASA,EAAMmF,SAAWnF,EAAMmF,OAAOC,SACvC1C,EAAe1C,EAAMmF,OAAOO,QAAQH,EAAOD,MAEhD,MAIXrF,IAAM0F,WAAU,WAEZ,OADAL,EAAKtF,EAAMmF,OAAOI,OACX,kBACHN,EAASW,SAAQ,SAACC,GACdC,aAAaD,SAEtB,IACH5F,IAAM0F,WAAU,cAAU,CAAC3F,EAAMmF,OAAOC,UAE5C,OAAO,M,+BCrBIW,EAXO,SAACC,GACnB,IAAMC,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,KAAI,SAACC,GAAD,MAAQ,WAAaA,EAAK,MAC9DC,EAAQ,GACNC,EAAQL,EAAOK,MAAM,KAK3B,OAJAD,GAASC,EAAM,GACXA,EAAMvC,OAAS,IACfsC,GAASH,EAAMK,SAASD,EAAM,MAE3BD,G,QCyNIG,EA5MF,SAAPA,EAAQxG,GACV,IAAMyG,EAAW,kBACb,cAACD,EAAD,0CAEWxG,GAFX,IAGQ0G,OAAQ1G,EAAM0G,OAAOC,MAAM3G,EAAM4G,MAAO5G,EAAM0G,OAAO3C,QACrD8C,WAAY,kBAAM,GAClBC,WAAY,kBAAM,GAClBF,MAAO,EACPG,OAAQA,OAIpB,IAAK/G,EAAM0G,OAAO3C,OACd,OAAO,KAEX,IAAMiD,EAAQhH,EAAM0G,OAAO1G,EAAM4G,OACjCH,EAASQ,YAAc,WAjBQ,MAmBM/G,IAAMC,WAAWC,KAA9CH,EAnBuB,EAmBvBA,MAAOyC,EAnBgB,EAmBhBA,kBACf,IAAKzC,EAAO,OAAO,KACnB,IAAMiH,EAAQhH,IAAMC,WAAW0C,KACzBsE,EAAUjH,IAAMkH,OAA0B,MAC1CC,EAAYpH,EAAMgB,MAAMqG,QAAQN,GAvBP,EAwBL9G,IAAMqH,WAAoBvH,EAAM+G,QAxB3B,mBAwBxBA,EAxBwB,KAwBhBS,EAxBgB,KAyBzBC,EAAUzH,EAAM+G,QAAUA,EAzBD,EA0BSW,YAAQ,CAC5CC,KAAM,CAAEC,KAAM,OAAQC,KAAM,YAAaC,OAAQrB,KACjDsB,QAAS,SAACC,GACN,MAAO,CAAEC,SAASD,EAAQE,aAAe,KAE7CC,QAAS,kBAAMnB,EAAMoB,aAAepB,EAAMqB,WAAyC,MAA5BpI,EAAM4D,KAAKyE,eAAyBtB,EAAMuB,OAAOtI,EAAM4D,KAAKyE,iBACnHE,MAAO,SAACR,GACJS,QAAQC,IAAIV,GACZR,GAAQ,IACJR,EAAMhD,SAAahE,EAAM8G,YAAe9G,EAAM8G,WAAW9G,EAAM4G,QAC/DlE,GAAkB,SAACiG,GACf3B,EAAMhD,QAAQ,CAAEC,YAAY,GAA5B+C,CAAqC2B,OAIjDC,IAAK,SAACC,EAAOb,GACTR,GAAQ,GACHQ,EAAQc,WACTpG,GAAkB,SAACiG,GACf3B,EAAMhD,QAAQ,CAAEC,YAAY,GAA5B+C,CAAqC2B,SA7CtB,mBA0BtBV,EA1BsB,KA0BtBA,QAAWc,EA1BW,KA0BFC,EA1BE,KAmD/B9I,IAAM0F,WAAU,WACZoD,EAAQC,cAAiB,CAAEC,sBAAsB,MAClD,IAGHhJ,IAAM0F,WAAU,WACRyB,GAAapH,EAAMO,SAASC,eAAeG,WAAaC,IAAUC,cAClEqG,GAAWA,EAAQgC,SAAWhC,EAAQgC,QAAQlI,UAEnD,CAACoG,EAAWpH,EAAMgB,MAAMmI,OAC3B,IA2EI/C,EAAQL,EAAcgB,EAAMf,QAQhC,OAPAI,GAAS,KAETA,GAASW,EAAMqB,SAAW,cAAgBrB,EAAMY,KAAKyB,KAAOrC,EAAMsC,KAM9D,qCACI,qBAAKC,MAjBJvC,EAAMhD,QAIJ,GAHI,CAAEwF,cAAe,QAgBSC,UAAU,aAA3C,SACI,wBACIC,QAAS,aAKTC,OAAQ,aAGRJ,MAhDK,WACjB,IAAMA,EAAK,aACPtB,QAASR,EAAU,EAAIQ,EACvB2B,QAAS5J,EAAM4J,OAAS5J,EAAM4J,OAAuF,IAA7E5J,EAAM6J,WAAa7J,EAAM6J,UAAU7J,EAAM4G,MAAO5G,EAAM0G,QAAU,EAAI,EAAI,IAAW,EAC3HoD,IAAK9J,EAAM6J,UAAY7J,EAAM6J,UAAU7J,EAAM4G,MAAO5G,EAAM0G,QAAU,GAAK,KAAO,GAC7EM,EAAM+C,cAYb,OARI/J,EAAM6G,aACN0C,EAAMS,KAAuC,EAAhChK,EAAM6G,WAAW7G,EAAM4G,OAAa,MAGhDI,EAAMhD,UACPuF,EAAMC,cAAgB,QAGnBD,EA+BYU,GAEPC,IAvGMlD,EAAMoB,WAAaW,EAAU5B,EAwGnCsC,UAjEK,WACjB,IAAMU,EAAiBnK,EAAMoK,aAAepK,EAAMoK,YAAYpK,EAAM4G,QAAWI,EAAMqD,WACjFZ,EAAS,8BAA0BzC,EAAMY,KAAKyB,MASlD,OARAI,GACMzJ,EAAM8G,YAAe9G,EAAM8G,WAAW9G,EAAM4G,QAAYS,GAAc8C,EAAgD,GAAxH,sBAAuGnD,EAAMf,QACjHwD,IAAchC,GAAWzH,EAAM8G,YAAc9G,EAAM8G,WAAW9G,EAAM4G,SAAWa,EAAU,iBAAmB,GAC5GgC,GAAazJ,EAAMsK,MAAQ,SAAW,GACtCb,GAAazC,EAAMoB,WAAa,aAAe,GAE/CqB,GAAaU,IAAkB9C,EAAY,kBAAoB,GAC/DoC,GAAapC,EAAY,gBAAkB,GAuDpBkD,GACXvG,QAnGA,SAACwG,GACbA,EAAEC,iBAIF,IAHA,IAAMvJ,EAA0B,GAAbsJ,EAAEE,SAA6B,GAAbF,EAAEG,QACnCC,EAAMJ,EAAEK,OAELD,IAAQA,EAAInB,UAAUqB,SAAS,cAClCF,EAAMA,EAAIG,aAGd,IAAMC,EAAOJ,EAAIK,wBACXC,EAAW,CACbhK,aACAiK,MAAO,CACHpI,EAAGyH,EAAEE,QAAUE,EAAIQ,cAAcC,YAAYC,YAC7CpI,EAAGsH,EAAEG,QAAUC,EAAIQ,cAAcC,YAAYE,aAEjDC,QAAS,CACLzI,EAAGiI,EAAKjI,EACRG,EAAG8H,EAAK9H,IAGVvC,EAAiBV,EAAMO,SAASC,eAAeG,YAAcC,IAAUC,aAEzEkG,EAAMhD,UAAYkH,EAAShK,YAC3BwB,GAAkB,SAACiG,GACf3B,EAAMhD,QAAQkH,EAAdlE,CAAwB2B,GACpBhI,IACAgI,EAAQnI,SAASC,eAAeC,UAAY,aAyE5C+K,UAAWzE,EAAMoB,YAAclB,EAAMjH,MAAM2C,OAC3C8I,SAAU1E,EAAMoB,WAAa,GAAK,EAClCuD,aAAYtF,EACZuF,MAAOvF,EAjBX,SAmBI,qBAAKoD,UAAU,eAAf,SACKzC,EAAMqB,UAAYnB,EAAMjH,MAAM2C,OAC3B,qBAAK6G,UAAU,YAAf,kBAEA,sBAAKA,UAAU,sBAAf,UACI,8BACI,qBAAKA,UAAU,eAAf,SAA+BzC,EAAMY,KAAKyB,SAE9C,8BACI,qBAAKI,UAAU,aAAf,SAA6BzC,EAAMsC,SAEvC,uCACA,8BACI,qBAAKG,UAAU,eAAf,SAA+BzC,EAAMY,KAAKyB,SAE9C,qBAAKI,UAAU,WAAf,SACI,sBAAKA,UAAU,eAAf,UAA+BzC,EAAMsC,KAArC,SAEJ,8BACI,qBAAKG,UAAU,eAAf,SAA+BzC,EAAMY,KAAKyB,SAE9C,uCACA,8BACI,qBAAKI,UAAU,cAAf,SAA8BzC,EAAMsC,SAExC,8BACI,qBAAKG,UAAU,eAAf,SAA+BzC,EAAMY,KAAKyB,kBAOjErJ,EAAM0G,OAAO3C,OAAS,EAAI/D,EAAM4G,OAAS,cAACJ,EAAD,2BAAUxG,GAAV,IAAiB+G,OAAQU,EAASb,MAAO5G,EAAM4G,MAAQ,SC1J9FiF,EA5DG,SAAC7L,GACf,IAAI8L,EAAY,mBACV3E,EAAUjH,IAAMkH,OAA0B,MAFmB,EAG9BlH,IAAMC,WAAWC,KAA9CH,EAH2D,EAG3DA,MAAOyC,EAHoD,EAGpDA,kBACf,IAAKzC,EAAO,OAAO,KACnBC,IAAM0F,WAAU,WACZ,GAAI3F,EAAMgB,MAAM8K,SAAS/L,EAAMgH,MAAMf,SAAWhG,EAAMO,SAASC,eAAeG,WAAaC,IAAUC,aAAc,CAC/G,IAAMqI,EAAUhC,GAAWA,EAAQgC,QAAUhC,EAAQgC,QAAU,KAC/DA,GAAWA,EAAQlI,YAGtBjB,EAAMgH,MAAMlD,MAAMC,OASnB+H,GAAa,eART9L,EAAMgH,MAAMgF,SACZF,GAAa,gBACN7L,EAAMgB,MAAM8K,SAAS/L,EAAMgH,MAAMf,QACxC6F,GAAa,kBAEbA,GAAa,gBAMjB9L,EAAMgH,MAAMqD,aAAerK,EAAMgH,MAAMlD,MAAMC,SAC7C+H,GAAa,qBAGjB,IAQIzF,EAAQL,EAAchG,EAAMgH,MAAMf,QAGtC,OAFAI,GAAS,iBAGL,wBACIqD,QAAS,aAKTC,OAAQ,aAGRO,IAAK/C,EACLsC,UAAWqC,EACX9H,QAvBQ,SAACwG,GACbA,EAAEC,iBACF,IAAMvJ,EAA0B,GAAbsJ,EAAEE,SAA6B,GAAbF,EAAEG,QAClCzJ,GACDwB,EAAkB1C,EAAMgH,MAAMiF,WAAW,CAAE/K,iBAoB3CuK,WAAYzL,EAAMgH,MAAMlD,MAAMC,OAC9B2H,SAAW1L,EAAMgH,MAAMlD,MAAMC,QAAc,EAAL,EACtC4H,aAAYtF,EACZuF,MAAOvF,EAfX,SAiBKrG,EAAMkM,YClCJC,EArBQ,SAACC,GAAyB,IAAD,EACXlM,IAAMC,WAAWC,KAA1CqC,EADoC,EACpCA,cAAexC,EADqB,EACrBA,MACvB,GAAKA,EAAL,CACA,IAAM+G,EAAQoF,EAASnM,GACnB6F,EAAe,KACnB5F,IAAM0F,WAAU,WAUZ,OATI3F,GAASmM,EAASnM,GAAO+L,WACzBlG,EAAUJ,YACN,kBACIjD,GAAc,SAACxC,GACXmM,EAASnM,GAAOoM,QAAQpM,QAEhC,MAGD,WACH8F,aAAaD,MAElB,CAAC7F,EAAO+G,EAAMgF,a,QCHNM,EAZU,WAAO,IACpBrM,EAAUC,IAAMC,WAAWC,KAA3BH,MACR,OAAKA,EAED,mCACKA,EAAMsM,WAAWC,OAAOrG,KAAI,SAACoG,EAAY3F,GAAb,OACzB,cAAC,EAAD,CAAwBI,MAAOuF,EAAY3F,MAAOA,GAAjCA,QAJV,MAYjB6F,EAAa,SAACzM,GAChBmM,GAAe,SAACnF,GAAD,OAAWA,EAAMuF,WAAWC,OAAOxM,EAAM4G,UADb,IAEnClE,EAAsBxC,IAAMC,WAAWC,KAAvCsC,kBACFsE,EAAQhH,EAAMgH,MAHuB,EAI1B0F,YAAQ,CACrBC,OAAQ,OACRC,KAAM,WACFnE,QAAQC,IAAI,WAAYkE,GACxBlK,EAAkB1C,EAAMgH,MAAMiF,WAAW,CAAE/K,YAAY,KACvDlB,EAAMgH,MAAMiF,WAAW,CAAEhI,YAAY,OALpC2I,EAJkC,oBAYnC3M,EAAUC,IAAMC,WAAWC,KAA3BH,MACF4M,GAAa,OAAL5M,QAAK,IAALA,OAAA,EAAAA,EAAO4D,KAAKoC,SAAUe,EAAMf,OAA5B,sBAAyCe,EAAMlD,OAA/C,YAAyD7D,EAAM4D,KAAKC,QAApE,YAAiFkD,EAAMlD,OACrG,OACI,sBAAK2F,UAAU,cAAgCS,IAAK0C,EAApD,UACI,cAAC,EAAD,CAAW5F,MAAOA,EAAlB,SACI,qBAAKyC,UAAW,qCAAuCzC,EAAMqC,KAA7D,SAAoErC,EAAMqC,SAE9E,cAAC,EAAD,CACIzC,MAAO,EAEPF,OAAQmG,EACRvC,MAAOtD,EAAMgF,SACb5B,YAAa,SAACxD,GAAD,OAAWI,EAAMqD,YAAcrD,EAAMlD,MAAMC,OAAS,GAAK6C,GACtEE,WAAY,SAACF,GAAD,OAAWA,EAAQI,EAAMlD,MAAMC,OAAS,IAJ/C,KANqB/D,EAAM4G,Q,QCfjCkG,G,MArBD,WAAO,IAAD,EACc5M,IAAMC,WAAW0C,KAAvC5C,EADQ,EACRA,MAAO8M,EADC,EACDA,WADC,EAEc7M,IAAMqH,SAAS,IAF7B,mBAETyF,EAFS,KAEAC,EAFA,KAahB,OAVA/M,IAAM0F,WAAU,WACZ,IAAMsH,EAAWC,aAAY,WACrBlN,EAAMmN,UAAYnN,EAAM2C,QACxBqK,EAAWF,OAEhB,KAEH,OAAO,kBAAMM,cAAcH,MAC5B,CAACjN,EAAMmN,QAASnN,EAAM2C,SAEjB3C,EAAMmN,SAAYJ,EACtB,sBAAKvD,UAAU,eAAf,UACI,qBAAKA,UAAU,iBAAf,0BACCuD,KAH2B,OCWzBM,EAxBA,WAAO,IACVrN,EAAUC,IAAMC,WAAWC,KAA3BH,MACR,IAAKA,EAAO,OAAO,KAoBnB,OAAO,qBAAKwJ,UAAU,kBAAf,SAnBW,WACd,GAAmD,YAA/CxJ,EAAMO,SAASC,eAAe8M,cAC9B,MAAO,eAGX,GAAmD,UAA/CtN,EAAMO,SAASC,eAAe8M,cAC9B,OAAOtN,EAAMuN,MAAMC,OAAS,EAAI,eAAO,eAG3C,GAAmD,UAA/CxN,EAAMO,SAASC,eAAe8M,cAA2B,CACzD,IAAMG,EAAe,SAAC3J,EAAgBsF,GAAjB,OACjBsE,MAAMC,KAAK,IAAID,MAAM5J,GAAQ8J,QACxB1H,KAAI,kBAAMkD,KACVyE,KAAK,KAEd,OAAOJ,EAAazN,EAAMuN,MAAMC,OAAQ,gBAAQC,EAAa,EAAIzN,EAAMuN,MAAMC,OAAQ,gBAEzF,OAAO,KAE8BM,MCC9BC,EAtBF,WAAO,IAAD,EACkB9N,IAAMC,WAAWC,KAA1CH,EADO,EACPA,MAAOwC,EADA,EACAA,cACf,IAAKxC,EAAO,OAAO,KACnB,IAAMqE,EAAY,SAACrE,GAAD,OAAkBA,EAAMO,SAAS2D,eAAeC,eAAiBnE,EAAMO,SAAS2D,eAAeE,aAE3GE,EAAa,SAACtE,GAAD,OAAkBA,EAAMO,SAAS2D,eAAeE,aASnE,OAAQC,EAAUrE,GACd,8BACI,wBAAQ2L,MAAM,OAAO5H,QAAS,kBARlCvB,GAAc,SAACxC,GACPqE,EAAUrE,KAAWsE,EAAWtE,IAChCA,EAAMO,SAASgE,iBAMgCiH,SAAUlH,EAAWtE,GAAxE,SACI,sBAAMwJ,UAAU,OAAhB,8BAHe,MCLhBwE,EAVA,WAAO,IACVhO,EAAUC,IAAMC,WAAWC,KAA3BH,MAER,OACI,qCACI,qBAAKwJ,UAAU,iBAAf,0BADJ,WAC8CxJ,QAD9C,IAC8CA,OAD9C,EAC8CA,EAAO0E,KAAKI,OAAOmJ,WCS1DC,EAbI,WACf,IAAMvL,EAAS1C,IAAMC,WAAW0C,KACxBxC,EAAWH,IAAMC,WAAWG,IAA5BD,OAER,OACI,8BACI,wBAAQuL,MAAM,WAAW5H,QAAS,kBAAMpB,EAAOsB,aAAatB,EAAO3C,MAAM2C,OAAQvC,IAAjF,SACI,sBAAMoJ,UAAU,OAAhB,yBCuBD2E,EA/BF,WAAO,IAAD,EACmBlO,IAAMC,WAAWC,KAA3CH,EADO,EACPA,MAAO0C,EADA,EACAA,eACf,IAAK1C,EAAO,OAAO,KAYnB,OAAKA,EAAM0E,KAAKC,YAAYE,eAAef,OAKvC,8BACI,wBACI0H,UAAWxL,EAAM0E,KAAKC,YAAYE,eAAef,OACjD6H,MAAO,iBAAmByC,KAAKC,IAAI,EAAGrO,EAAM0E,KAAKI,OAAOwJ,eAAiB,IACzEvK,QAnBC,kBACTrB,GAAe,SAAC8B,GACZ,IAAMC,EAAWD,EAAOE,KAAKC,YAAYC,iBAAiB5E,EAAM0E,KAAKC,YAAYE,eAAef,OAAS,EAAG9D,GAC5G,OAAIyE,GACAA,EAASC,KAAKI,OAAOC,SAASP,EAAOE,KAAKI,QACnCL,GAEJ,SASP,SAKI,sBAAM+E,UAAU,OAAhB,wBAVD,MCOA+E,EAfA,SAACxO,GAAD,OACX,sBAAKyJ,UAAW,UAAYzJ,EAAMyO,KAAlC,UACI,sBAAKhF,UAAU,eAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,OAEJ,cAAC,EAAD,IACA,sBAAKA,UAAU,iBAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,wDCqBNiF,EAAO,WAAO,IAAD,EAC2CxO,IAAMC,WAAWC,KAAnEH,EADO,EACPA,MAAOwC,EADA,EACAA,cAAeE,EADf,EACeA,eAAgBgM,EAD/B,EAC+BA,QACxCzH,EAAQhH,IAAMC,WAAW0C,KACvBxC,EAAWH,IAAMC,WAAWG,IAA5BD,OAHO,EAmBuBH,IAAMC,WAAWyO,KAA/CC,EAnBO,EAmBPA,WAAYC,EAnBL,EAmBKA,cAEdC,EAAe,SAACC,EAAcC,GAAf,OACjBH,EAAc,2BAAKD,GAAN,IAAkB5N,MAAO,OAAQiO,QAAS,GAAIC,SAAUH,EAAMA,KAAK,eAAMC,OAU1F,IAAK/H,EAAMjH,MAAMmP,SACb,OAAO,KAEX,IAAKnP,EACD,OAAO,KAGX,IAAMoP,EAAYnI,EAAMjH,MAAMqP,QAAUpI,EAAMjH,MAAMsP,OAAOxL,OAAS,EAEhEyL,EAAY,iCAA6BH,EAA7B,gBACC,GAAbA,IACAG,EAAY,iCAA6BH,EAA7B,gBAEC,GAAbA,IACAG,EAAe,sFAEfH,EAAY,IAAKG,EAAe,2BAEpC,IACMC,EADiBxP,EAAMO,SAASC,eAAeG,YAAcC,IAAUC,aACrCsB,IAAYC,YAAkBpC,EAAMO,SAASC,eAAeY,QAAQhB,GAAQiB,aAEpH,OAAI4F,EAAMjH,MAAMyP,WAAarP,EAErB,qBAAKoJ,UAAU,gBAAf,SACI,qBAAKA,UAAU,mBAAf,SACI,sBAAKA,UAAU,YAAf,UACI,cAACkG,EAAA,EAAD,CAAWtJ,MAAM,iBAChBa,EAAMjH,MAAMyP,SACb,qBAAKjG,UAAU,eAAf,SAA+B+F,WAQ/C,qBAAK/F,UAAU,gBAAf,SACI,qBAAKA,UAAU,mBAAf,SACI,sBAAKA,UAAU,YAAf,UACI,cAACkG,EAAA,EAAD,CAAWtJ,MAAM,iBAEjB,qBAAKoD,UAAU,eAAf,SAA+B+F,IAC/B,eAACI,EAAA,EAAD,CAAUH,eAAgBA,EAA1B,UACI,cAACI,EAAA,EAAD,CACIxG,KAAK,eACLuC,MAAM,SACN5H,QAAS,WA9D7BkD,EAAMhD,aAAY,GAAQ,MAkEV,cAAC2L,EAAA,EAAD,CACIxG,KAAMpJ,EAAMO,SAAS2D,eAAekF,KACpCuC,MAAK,uBAAkB3L,EAAMO,SAAS2D,eAAekC,OACrDrC,QAAS,WA1EP,IAAC8L,IA2EmBC,IAAgBC,KAAK/P,EAAMO,SAAS2D,gBAAgB8L,IA3ExDxN,GAAc,SAACxC,GAAD,OAAWA,EAAMO,SAAS0P,kBAAkBJ,SA8EhF,eAACD,EAAA,EAAD,CACIxG,KAAK,qBACLuC,MAAM,UACN5H,QAAS,SAACiL,GAAD,OApEV,SAACkB,EAAalB,GAC7BJ,EAAWM,WAAagB,EACxBpB,EAAaoB,EAAKlB,GAElBF,EAAa,GAAIE,GAgEqBmB,CAAe,UAAWnB,IAChDoB,QAAgC,WAAvBxB,EAAWM,SAJxB,UAMI,cAACU,EAAA,EAAD,CACIxG,KAAK,qBACLuC,MAAK,wBAAmB0E,IAAcrQ,EAAMO,SAAS+P,cACrDvM,QAAS,WAtFd,IAACwM,IAwFYvQ,EAAMO,SAAS+P,YAAcD,IAAcvM,OAAS,EAAI9D,EAAMO,SAAS+P,YAAc,EAAI,EAxFrF9N,GAAc,SAACxC,GAAD,OAAWA,EAAMwQ,WAAWD,SA4F1D,cAACX,EAAA,EAAD,CACIxG,KAAK,qBACLuC,MAAK,0BAAqB0E,IAAcrQ,EAAMO,SAASkQ,qBACvD1M,QAAS,WA9FP,IAACwM,IAgGKvQ,EAAMO,SAASkQ,mBAAqBJ,IAAcvM,OAAS,EACrD9D,EAAMO,SAASkQ,mBAAqB,EACpC,EAlGKjO,GAAc,SAACxC,GAAD,OAAYA,EAAMO,SAASkQ,mBAAqBF,WAuGzF,cAACX,EAAA,EAAD,CACIxG,KAAK,eACLuC,MAAM,eACN5H,QAAS,kBAjH7BkD,EAAMhD,aAAY,GAAO,QACzBvB,GAAe,SAAC1C,GAAD,OAAYA,EAAM0E,KAAKC,YAAYE,eAAiB7E,EAAM0E,KAAKC,YAAYE,eAAe,GAAK,SAiH1F6L,MAAO1Q,EAAM0E,KAAKC,YAAYE,eAAef,SAEjD,cAAC8L,EAAA,EAAD,CAAYxG,KAAK,qBAAMuC,MAAM,YAAY5H,QAAS,kBAAM2K,kBAOjEiC,EAzJD,WAAO,IAAD,EACoB1Q,IAAMqH,SAA0B,CAChEyH,KAAM,CACFjM,EAAG,EACHG,EAAG,GAEP2N,OAAQ,CACJ9N,EAAG,EACHG,EAAG,GAEPjC,MAAO,OACPkO,SAAU,GACVD,QAAS,KAZG,mBAcV4B,EAAoB,CACtBjC,WAfY,KAgBZC,cAhBY,MAkBhB,OACI,cAAC,IAAD,CAAoBiC,MAAOD,EAA3B,SACI,cAAC,EAAD,OC5BGE,EAPK,SAAID,GACpB,IAAM7G,EAAMhK,IAAMkH,SAIlB,OAHAlH,IAAM0F,WAAU,WACZsE,EAAIf,QAAU4H,KAEX7G,EAAIf,SCCT8H,EAAW,SAACjR,GAAiE,IAAD,EACxE2I,EAAUzI,IAAMC,WAAWC,KAEzB2D,EAA4B/D,EAA5B+D,OAAQqJ,EAAoBpN,EAApBoN,QAASxK,EAAW5C,EAAX4C,OACnB8B,EAAWsM,EAAY,CAAEjN,SAAQnB,SAAQwK,YAkC/C,OAjCAlN,IAAM0F,WAAU,WACZ,IAAIE,EAAe,KA6BnB,OA3BI6C,GACAA,EAAQ1I,OACR0I,EAAQ1I,MAAMO,SAASC,eAAeyQ,OACtC9D,IACCxK,GACD8B,KACS,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUX,SAAUA,IAAkB,OAARW,QAAQ,IAARA,OAAA,EAAAA,EAAU0I,UAAWA,IAAmB,OAAR1I,QAAQ,IAARA,OAAA,EAAAA,EAAU9B,SAAUA,KAEnFkD,EAAUJ,YAAW,WACjBiD,EAAQlG,eAAc,SAACxC,GAEf8D,GAAU9D,EAAMuN,MAAM1J,MAAMC,QAC5B9D,EAAMuN,MAAMC,OAAS,IACpBxN,EAAMuN,MAAM1J,MAAMC,QAAU9D,EAAMkR,MAAMrN,MAAMC,UAE3C9D,EAAM4D,KAAKuN,eACXnR,EAAMkR,MAAME,cAEZpR,EAAMuN,MAAM1J,MAAMC,OAClB9D,EAAMkR,MAAMG,OAAOrR,EAAMuN,MAAM+D,UACxBtR,EAAMuN,MAAMgE,cACnBvR,EAAMuN,MAAMiE,QAAQxR,EAAMkR,MAAMM,iBAI7C,MAEA,kBAAM1L,aAAaD,MAC3B,CAAC/B,EAAQnB,EAAQwK,IAEfzE,GAAYA,EAAQ1I,MAGrB,sBAAKwJ,UAAU,oBAAf,UACI,cAAC,EAAD,CAAWzC,MAAO2B,EAAQ1I,MAAMuN,QAChC,cAAC,EAAD,CACI5G,MAAO,EAEPF,OAAQiC,EAAQ1I,MAAMuN,MAAM1J,MAC5B+F,UAAW,SAACjD,GAAD,OAAYA,EAAQ,GAAM,GACrCgD,OAAQ,EACRU,MAAK,OAAE3B,QAAF,IAAEA,GAAF,UAAEA,EAAS1I,aAAX,aAAE,EAAgBuN,MAAMxB,SAC7B5B,YAAa,SAACxD,GAAD,aAAkB,OAAP+B,QAAO,IAAPA,GAAA,UAAAA,EAAS1I,aAAT,eAAgBuN,MAAMnD,aAAczD,GAAS+B,EAAQ1I,MAAMuN,MAAM1J,MAAMC,OAAS,IALnG,MAPsB,MA2B5B2N,EATD,WAAO,IACTzR,EAAUC,IAAMC,WAAWC,KAA3BH,MACR,IAAKA,EAAO,OAAO,KACnBkM,GAAe,SAACnF,GAAD,OAAWA,EAAMwG,SAChC,IAJgB,EAIFtN,IAAMC,WAAW0C,KACG5C,MAA1B2C,EALQ,EAKRA,OAAQwK,EALA,EAKAA,QAChB,OAAO,cAAC,EAAD,CAAUrJ,OAAQ9D,EAAMuN,MAAM1J,MAAMC,OAAQnB,OAAQA,EAAQwK,QAASA,KC/CjEuE,EAXO,WAAO,IACjB1R,EAAUC,IAAMC,WAAWC,KAA3BH,MACR,OAAKA,EAED,mCACKA,EAAM2R,QAAQpF,OAAOrG,KAAI,SAACyL,EAAShL,GAAV,OACtB,cAAC,EAAD,CAAqBA,MAAOA,EAAOI,MAAO4K,EAASC,OAAQ5R,EAAM2R,SAAnDhL,QAJP,MAWjBkL,EAAU,SAAC9R,GACbmM,GAAe,SAAC4F,GAAD,OAAOA,EAAEH,QAAQpF,OAAOxM,EAAM4G,UADR,IAE7BlE,EAAsBxC,IAAMC,WAAWC,KAAvCsC,kBAF6B,EAGpBgK,YAAQ,CACrBC,OAAQ,OACRC,KAAM,WACFnE,QAAQC,IAAI,WAAYkE,GACxBlK,EAAkB1C,EAAMgH,MAAMiF,WAAW,CAAE/K,YAAY,KACvDlB,EAAMgH,MAAMiF,WAAW,CAAEhI,YAAY,OALpC2I,EAH4B,oBAY7B3M,EAAUC,IAAMC,WAAWC,KAA3BH,MACF4M,GAAa,OAAL5M,QAAK,IAALA,OAAA,EAAAA,EAAO4D,KAAKoC,SAAUjG,EAAMgH,MAAMf,OAAlC,sBAA+CjG,EAAMgH,MAAMlD,OAA3D,YAAqE7D,EAAM4D,KAAKC,QAAhF,YAA6F9D,EAAMgH,MAAMlD,OAcvH,OACI,sBAAK2F,UAAU,cAAcS,IAAK0C,EAAlC,UACI,cAAC,EAAD,CAAW5F,MAAOhH,EAAMgH,QACxB,cAAC,EAAD,CACIJ,MAAO,EAEPF,OAAQmG,EACRvC,MAAOtK,EAAMgH,MAAMgF,SACnB5B,YAAa,SAACxD,GAAD,OAAW5G,EAAMgH,MAAMqD,YAAcrK,EAAMgH,MAAMlD,MAAMC,OAAS,GAAK6C,GAClFiD,UAAW,SAACjD,EAAOF,GAAR,OApBL,SAACE,EAAeiG,GAC9B,IAAK,IAAImF,EAAI,EAAGA,GAAKpL,EAAOoL,IACxB,GAAInF,EAAMmF,KAAOnF,EAAMmF,GAAG3J,SAEtB,OADa,GAAJ2J,EAAuB,IAAbpL,EAAQoL,GAKnC,OADiB,GAARpL,EAa6BqL,CAAUrL,EAAOF,IAC/CI,WAAY,SAACF,GAAD,OAAWA,EAAQ5G,EAAMgH,MAAMlD,MAAMC,OAAS,IALrD,OCZNmO,EAvCD,WAAO,IACTjS,EAAUC,IAAMC,WAAWC,KAA3BH,MACR,IAAKA,EAAO,OAAO,KACnBkM,GAAe,SAACnF,GAAD,OAAWA,EAAMmK,SAChC,IAiBMtE,GAAa,OAAL5M,QAAK,IAALA,OAAA,EAAAA,EAAO4D,KAAKoC,SAAUhG,EAAMkR,MAAMlL,OAAlC,sBAA+ChG,EAAMkR,MAAMrN,OAA3D,YAAqE7D,EAAM4D,KAAKC,QAAhF,YAA6F7D,EAAMkR,MAAMrN,OAEvH,OACI,sBAAK2F,UAAU,cAAf,UACI,cAAC,EAAD,CAAWzC,MAAO/G,EAAMkR,QACxB,cAAC,EAAD,CACIvK,MAAO,EAEPF,OAAQmG,EACRhD,UAAW,SAACjD,GAAD,OAAYA,EAAQ,GAAM,GACrCC,WAAY,SAACD,GAAD,OA3BN,SAACA,GACf,GAA8C,UAA1C3G,EAAMO,SAASC,eAAe0R,SAC9B,OAAO,EAEX,IAAMpO,EAAS9D,EAAM4D,KAAKuO,iBAAmBnS,EAAM4D,KAAKuN,cAAgBnR,EAAMkR,MAAMrN,MAAMC,OAAS,EAAI9D,EAAMkR,MAAMrN,MAAMC,OACrHsO,EAAmB,EASvB,OARc,GAAVtO,IACAsO,EAAmB,GAGT,GAAVtO,IACAsO,EAAmB,IAGdzL,EAAQ7C,EAAS,GAAK,EAAKsO,EAaLJ,CAAUrL,IACjC0D,MAAOrK,EAAMkR,MAAMnF,SACnB5B,YAAa,SAACxD,GAAD,OAAW3G,EAAMkR,MAAM9G,YAAczD,GAAS3G,EAAMkR,MAAMrN,MAAMC,OAAS,GACtF+C,WAAY,SAACF,GAAD,OAAWA,EAAQ3G,EAAMkR,MAAMrN,MAAMC,OAAS,IANrD,O,SCnBfuO,GAAU,SAACtS,GAAyB,MAEMuS,eAApCC,EAF8B,EAE9BA,QAAoB7K,GAFU,EAErB8K,UAFqB,EAEV9K,MAAM4B,EAFI,EAEJA,MAClC,IAAKiJ,EACD,OAAO,KAEX,IAAMxH,EAAOhL,EAAM0S,KAAKzH,wBACxB,OACI,qBACI1B,MAAK,2BACEA,GADF,IAED2B,SAAU,WACVyH,MAAO,OACP3I,MAAmB,EAAbgB,EAAKhB,KACXF,KAAiB,EAAZkB,EAAKlB,IACVF,OAAQ,IACR3B,QAAS,IARjB,SAWKN,EAAKG,UA4BH8K,GAvBD,SAAC5S,GACX,IAAMkK,EAAMhK,IAAMkH,OAAuB,MACzC,OACI,eAAC,IAAD,CAAayL,QAASC,IAAtB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAQrE,KAAMzO,EAAMyO,OACpB,qBAAKhF,UAAW,cAAgBzJ,EAAMyO,KAAtC,SACI,sBAAKhF,UAAW,wBAA0BzJ,EAAMyO,KAAhD,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,qBAAKhF,UAAU,qBAAqBS,IAAKA,EAAzC,SACKA,EAAIf,SAAW,cAAC,GAAD,CAASuJ,KAAMxI,EAAIf,YAEvC,cAAC,EAAD,IACA,cAAC,EAAD,SAGR,cAAC,EAAD,IACA,cAAC,EAAD,QC5BG4J,I,MAvBG,WAAO,IAAD,EACO7S,IAAMC,WAAWC,KAApCH,EADY,EACZA,MAAO0O,EADK,EACLA,QACTzH,EAAQhH,IAAMC,WAAW0C,KAE/B,OAAQ5C,EAAM0E,KAAKqO,QACf,sBAAKvJ,UAAU,uBAAf,UACI,qBAAKA,UAAU,QAAf,0BACA,sBAAKA,UAAU,UAAf,UACI,yCAAYvC,EAAM6F,gBAClB,2CAAc9M,EAAM0E,KAAKI,OAAOmJ,UAChC,iDAAoBjO,EAAM0E,KAAKI,OAAOkO,eAAehT,EAAM0E,KAAKyI,QAASnN,EAAM0E,KAAKiE,KAAOsK,KAAKC,UAChG,iDAAoBlT,EAAM0E,KAAKI,OAAOqO,eAAenT,EAAM0E,KAAKyI,QAASnN,EAAM0E,KAAKiE,KAAOsK,KAAKC,UAChG,iDAAoBlT,EAAM0E,KAAKI,OAAOsO,SAASpT,EAAM0E,KAAKyI,QAASnN,EAAM0E,KAAKiE,KAAOsK,KAAKC,UAC1F,8BACI,yBAAQnP,QAAS2K,EAAjB,+BACO,sDAXM,OCAZ2E,G,iDACjBC,WAAa,SAACnH,EAAyBnM,GAC/BmM,EAASnM,GAAO+L,SAAW,KAC3BI,EAASnM,GAAO+L,SAAW,GAC3B/L,EAAM0E,KAAK6O,eAAc,GACzBpH,EAASnM,GAAOoM,QAAU,SAAC0F,GAAD,OAAc,EAAK0B,UAAUrH,EAAU2F,M,KAIzE0B,UAAY,SAACrH,EAAyBnM,GAClCmM,EAASnM,GAAO+L,SAAW,EAC3B/L,EAAM0E,KAAK6O,eAAc,KCfZ1B,G,iDACjBxH,MAAuB,SAACrK,EAAO2G,GAAR,OAAkB,IAAI0M,IAAUC,YAAW,SAACxB,GAAD,OAAcA,EAAEH,QAAQpF,OAAO5F,KAAQ3G,I,KAEzGyT,gBAAkB,SAACtK,EAAY8B,EAAejL,EAAc2G,GACxD,GAAI3G,EAAM2R,QAAQ+B,gBAAgB/M,GAAQ,CACtC,IAAMgN,EAAM3T,EAAM4D,KAAKoC,OACvBhG,EAAM2R,QAAQP,YAAYzK,IAAU3G,EAAM0E,KAAKkP,aAAa,WAAajN,EAAOgN,QAEhF,EAAKtJ,MAAMrK,EAAO2G,I,KAI1BkN,eAAiB,SAAC1K,EAAmB8B,EAAejL,EAAc2G,GAC1DwC,EACAnJ,EAAM4D,KAAKkQ,OAAO9T,EAAM2R,QAAQoC,iBAAiB5K,EAAMxC,GAAQwC,EAAKnD,OAAQiF,IAAajL,EAAM0E,KAAKsP,iBAC5F7K,GACR,EAAKkB,MAAMrK,EAAO2G,KAKjBsN,GAAb,4MACIJ,eAAiB,SAAC1K,EAAmB8B,EAAejL,EAAc2G,GAC1DwC,GACA,EAAK+K,WAAW/K,EAAMxC,EAAO3G,IAHzC,EAOIkU,WAAa,SAAC/K,EAAYxC,EAAe3G,GAA5B,OACRA,EAAM4D,KAAKuO,iBAAmBhJ,EAAKf,UAAYpI,EAAM2R,QAAQwC,QAAQxN,EAAOwC,IAASnJ,EAAM0E,KAAK0P,mBARzG,YAAmCvC,ICvBd7M,GAKjB,aAAe,IAAD,gCAJdO,WAIc,OAHd8O,eAGc,OAFdjP,aAEc,OAMdM,QAAU,SAACH,EAAe+O,GAAhB,OAAkC,SAACtU,GACzC,OAAIuF,GAASvF,EAAMmF,OAAOI,MACf,MAGXvF,EAAMmF,OAAOG,KAAKtF,EAAMuN,MAAOvN,EAAM2R,SACjC3R,EAAMmF,OAAOC,UACbpF,EAAM0E,KAAKyI,QAAU8F,KAAKC,OAGzBlT,EAAMmF,OAAOC,SACdkP,EAAStU,EAAMmF,OAAOI,OAGnBvF,KApBG,KAuBdqF,QAAU,kBAAM,SAACrF,GACb,GAAI,EAAKuF,OAASvF,EAAMmF,OAAOI,MAC3B,OAAO,KAEX,MAAQvF,EAAMmF,OAAOC,SACjBpF,EAAMmF,OAAOG,KAAKtF,EAAMuN,MAAOvN,EAAM2R,SAGzC,OADA3R,EAAM0E,KAAKyI,QAAU8F,KAAKC,MACnBlT,IA/BG,KAkCdsF,KAAO,SAACiI,EAAcoE,GAClB,IAAK,IAAII,EAAI,EAAKsC,UAAWtC,EAAIJ,EAAQpF,OAAOzI,OAAQiO,IAAK,CACzD,IAAMlO,EAAQ8N,EAAQpF,OAAOwF,GAAGlO,MAChC,GAAIA,EAAMC,QAAU6N,EAAQpF,OAAOzI,OAASiO,EAAI,EAAG,CAC/C,IAAMwC,EAAUhH,EAAMiH,SActB,YAbID,IACAA,EAAQvO,OAAS2L,EAAQpF,OAAOwF,GAAG/L,OAC/BnC,EAAMC,QAAU6N,EAAQpF,OAAOzI,OAAS,EAAIiO,IAC5CwC,EAAQnM,UAAW,GAEvBuJ,EAAQrM,KAAKiP,EAASxC,GACtB,EAAKxM,QACL,EAAK8O,YACD,EAAKA,WAAa1C,EAAQpF,OAAOzI,SACjC,EAAKuQ,UAAY,GAErB,EAAKjP,SAAU,IAInB,IAAMqP,EAA4B,GAAlB,EAAKJ,UAGrB,OAFA,EAAKA,UAAY,OACjB,EAAKjP,QAAUqP,GAKvB,EAAKrP,SAAU,GA5DfsP,KAAKnP,MAAQ,EACbmP,KAAKL,UAAY,EACjBK,KAAKtP,SAAU,GCPFuP,GAGjB,WAAYC,GAA6B,IAAD,gCAFxCA,kBAEwC,OAIxCC,WAAa,SAACjR,GACV,OAAIA,GAAQA,EAAKuO,gBACN,EAAKsB,gBAEL,EAAKI,gBARoB,KAYxCJ,gBAAkB,SAACtK,EAAY8B,EAAetE,GAA5B,OAA8C,SAAC3G,GACzDA,EAAM4D,KAAKuO,iBACX,EAAKyC,aAAanB,gBAAgBtK,EAAM8B,EAAUjL,EAAO2G,KAdzB,KAkBxCkN,eAAiB,SAAC1K,EAAY8B,EAAetE,GAA5B,OAA8C,SAAC3G,GACvDA,EAAM4D,KAAKuO,iBACZ,EAAKyC,aAAaf,eAAe1K,EAAM8B,EAAUjL,EAAO2G,KAnB5D+N,KAAKE,aAAeA,G,SCNPE,GAKjB,WAAYvU,GAAqB,IAAD,gCAJhCA,cAIgC,OAHhC4I,UAGgC,OAFhCtF,WAEgC,OADhCkR,cACgC,OAOhCC,cAAgB,iBAAiD,UAA3C,EAAKzU,SAASC,eAAeC,WAPnB,KAShCQ,WAAa,SAAC+C,GACV,EAAK+Q,SAAW/Q,GAVY,KAahCiR,QAAU,SAAC9L,GACP,EAAKA,KAAOA,EACZ,EAAKtF,MAAQ,IAfe,KAkBhCqR,UAAY,SAAC/L,GACL,EAAKA,MAAQA,GAAQ5C,KAAK+B,OAAO,EAAKa,KAAMA,KAC5C,EAAKA,KAAO,OApBY,KAwBhCgM,WAAa,SAACtR,GACN,EAAKA,OAASA,GAAS,EAAKA,OAASA,IACrC,EAAKA,MAAQ,KA1BW,KA8BhCuR,SAAW,SAACvR,GACR,EAAKsF,KAAO,KACZ,EAAKtF,MAAQA,GAhCe,KAmChCwD,QAAU,SAAC8B,GAAD,OAAgB,EAAK4L,UAAY,EAAKC,iBAAmB,EAAK7L,MAAQA,GAAQ5C,KAAK+B,OAAO,EAAKa,KAAMA,IAnC/E,KAqChC2C,SAAW,SAACjI,GAAD,OAAmB,EAAKkR,UAAY,EAAKC,iBAAmB,EAAKnR,OAASA,GAAS,EAAKA,OAASA,GApCxG6Q,KAAKnU,SAAWA,EAChBmU,KAAKvL,KAAO,KACZuL,KAAK7Q,MAAQ,GACb6Q,KAAKK,UAAW,GCVHM,GAEjB,WAAYrP,GAAiB,IAAD,gCAD5BA,YAC4B,OAG5BnC,MAAgB,GAHY,KAI5ByR,OAA4B,kBAAO,EAAKzR,OAAS,EAAKA,MAAMC,QAAU,EAAKD,MAAM,EAAKA,MAAMC,OAAS,IAAO,MAJhF,KAK5BsG,YAAa,EALe,KAM5BmL,aAAe,kBAAM,EAAK1R,MAAM2R,QAAO,SAACrM,GAAD,OAAUA,EAAKhB,eALlDuM,KAAK1O,OAASA,GCFDyP,G,kDAEjB,WAAYzP,EAAgBpC,GAAa,IAAD,8BACpC,cAAMoC,IAFVpC,UACwC,IAIxC8R,eAAiB,kBAAO,EAAK9R,KAAKoC,QAAU,EAAKA,OAAS,EAAKpC,KAAKC,MAAQ,IAJpC,EAKxC0R,aAAe,uCAAU,EAAK1R,MAAM2R,QAAO,SAACrM,GAAD,OAAUA,EAAKhB,eAA3C,YAA2D,EAAKuN,iBAAiBF,QAAO,SAACrM,GAAD,OAAUA,EAAKhB,iBAL9E,EAMxC4D,SAAW,EAN6B,EAOxCK,QAAU,aALN,EAAKxI,KAAOA,EAFwB,E,UAFEyR,I,kBCMjCM,GAAb,4MACIC,WAAyB,aAD7B,EAEIC,cAA0B,GAF9B,EAGIC,UAAmB,GAHvB,EAII1M,KAAe,GAJnB,EAKI2M,MAAgB,GALpB,EAMIhK,SAAmB,EANvB,EAOIC,WAA8B,aAPlC,YAAqCyJ,IAShBjJ,GAMjB,WAAYjM,EAAoBqD,GAAa,IAAD,gCAL5CrD,cAK4C,OAJ5CqD,UAI4C,OAH5C2I,YAG4C,OAF5CR,cAE4C,OAD5CK,aAC4C,OAsB5CwJ,WAAa,SAAC7R,GACV,EAAKwI,OAAO3G,SAAQ,SAAC/B,EAAO8C,GACxB9C,EAAMmI,WAAa,SAACgK,GAAD,OAAOjS,EAAQ,KAAMiS,EAAGrP,IAC3C9C,EAAMA,MAAM+B,SAAQ,SAACuD,EAAM8M,GACvB9M,EAAKpF,QAAU,SAACiS,GAAD,OAAWjS,EAAQ,eAAKoF,GAAQ6M,EAAGrP,IAClDwC,EAAKhB,SAAW,kBAAM8N,GAAUpS,EAAMA,MAAMC,OAAS,MAEzD,EAAKF,KAAKgS,WAAW/R,OA7Be,KAiC5CqS,mBAAqB,SAACvP,GAClB,IAAMwP,EAAoB,EAAK5J,OAAO5F,GAAOkP,cAC7C,OAAOM,EAAkBA,EAAkBrS,OAAS,IAnCZ,KAsC5C4P,gBAAkB,SAAC/M,GAAD,OAAoB,EAAK/C,KAAKwS,sBAAwB,EAAKC,QAAQ1P,EAAO,EAAK/C,KAAKyE,gBAtC1D,KAwC5C+I,YAAc,SAACzK,GAAD,OAAmB,EAAK2P,IAAI3P,EAAO,EAAK/C,KAAK2S,YAxCf,KA0C5CF,QAAU,SAAC1P,EAAewC,GACtB,IAAKA,EAAM,OAAO,EAClB,IAAMqN,EAAkB,EAAKN,mBAAmBvP,GAChD,OAAO,EAAK4F,OAAO5F,GAAOyC,MAAQD,EAAKxB,KAAKyB,MAAQoN,GAAmBrN,EAAKE,MA7CpC,KAgD5CiN,IAAM,SAAC3P,EAAeiG,GAClB,IAAMzD,EAAOyD,EAAM,GAInB,OAHAzD,EAAKsN,aAAarI,KAAKsI,IAAI,EAAKnW,SAASkQ,mBAAoB,IAC7DtH,EAAKnD,OAAS,EAAKuG,OAAO5F,GAAOX,OACjC,EAAKuG,OAAO5F,GAAO9C,MAAM2B,KAAK2D,GACvB,EAAKoD,OAAO5F,GAAOmP,UAAUtQ,KAAK,EAAK+G,OAAO5F,GAAOkP,cAAcc,QArDlC,KAwD5CC,OAAS,SAACjQ,EAAewC,GAErB,OADA,EAAKoD,OAAO5F,GAAOkP,cAAcrQ,KAAK,EAAK+G,OAAO5F,GAAOmP,UAAUa,OAC3DxN,GAAQA,EAAKb,OAAO,EAAKgN,OAAO3O,KAAW,EAAK4F,OAAO5F,GAAO9C,MAAM8S,OAAU,MA1D9C,KA6D5CE,gBAAkB,SAAClQ,GAAD,OAAmB,YAAI,EAAK4F,OAAO5F,GAAOmP,WAAWa,OA7D3B,KA+D5CG,WAAa,kBAAM,EAAKvK,OAAOrG,KAAI,SAAC6Q,GAAD,OAAOA,EAAElT,MAAMC,UAAQkT,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,IA/DtC,KAiE5C5B,OAAS,SAAC3O,GAAD,OAAmB,EAAK4F,OAAO5F,GAAO9C,MAAM,EAAK0I,OAAO5F,GAAO9C,MAAMC,OAAS,IAjE3C,KAiF5C0M,WAAa,SAACD,GAEV,OADA,EAAKhE,OAAO3G,SAAQ,SAAC/B,GAAD,OAAWA,EAAMA,MAAM+B,SAAQ,SAAC2F,GAAD,OAAaA,EAAQkL,aAAarI,KAAKsI,IAAI,EAAGnG,UAC1F,GAlFPmE,KAAKnU,SAAWA,EAChBmU,KAAK9Q,KAAOA,EACZ,IAUM2I,EAAS4K,OAAOvJ,KAAKwJ,MACtBlR,KAAI,SAAC8J,GAAD,OAAiBoH,KAAMpH,MAC3B9J,KAAI,SAACmR,EAAM1Q,GAAP,mBAAC,eAZO,SAACA,GACd,IAAMmL,EAAI,IAAI6D,GAAgB,cAAgBhP,EAAO/C,GAOrD,OANAkO,EAAEjO,MAAQ,GACViO,EAAE+D,cAAF,YAAsByB,gBACtBxF,EAAEgE,UAAY,GACdhE,EAAE1I,KAAO,GACT0I,EAAEiE,MAAQ,GACVjE,EAAE/F,SAAW,EACN+F,EAIqByF,CAAS5Q,IAAW0Q,MACpD3C,KAAKnI,OAAL,YAAkBA,GAElBmI,KAAK3I,SAAW,EAChB2I,KAAKtI,QAAU,cAzBFI,GAyEVgL,KAAO,SAACC,EAAkB7T,GAC7B,IAAM4T,EAAO,IAAIhL,GAAWiL,EAAKlX,SAAUqD,GAU3C,OATA4T,EAAKjL,OAASkL,EAAKlL,OAAOrG,KAAI,SAACwR,GAC3B,IAAM5F,EAAI,IAAI6D,GAAgB+B,EAAU1R,OAAQpC,GAMhD,OALAkO,EAAEjO,MAAQ0C,KAAKoR,QAAQD,EAAU7T,OACjCiO,EAAE+D,cAAF,YAAsB6B,EAAU7B,eAChC/D,EAAEgE,UAAF,YAAkB4B,EAAU5B,WAC5BhE,EAAE1I,KAAOsO,EAAUtO,KACnB0I,EAAEiE,MAAQ2B,EAAU3B,MACbjE,KAEJ0F,G,aChGMhL,G,4DACjBnC,MAAuB,SAACrK,EAAO2G,GAAR,OAAkB,IAAI0M,IAAUC,YAAW,SAACxB,GAAD,OAAcA,EAAExF,WAAWC,OAAO5F,KAAQ3G,I,KAE5GyT,gBAAkB,SAACtK,EAAY8B,EAAejL,EAAc2G,GACxD,GAAI3G,EAAMsM,WAAWoH,gBAAgB/M,GAAQ,CACzC,IAAMgN,EAAM3T,EAAM4D,KAAKoC,OACvBhG,EAAMsM,WAAW8E,YAAYzK,IAAU3G,EAAM0E,KAAKkP,aAAa,cAAgBjN,EAAOgN,GACtF,EAAKiE,aAAa5X,QAElB,EAAKqK,MAAMrK,EAAO2G,I,KAI1BkN,eAAiB,SAACgE,EAAoB5M,EAAejL,EAAc2G,GAC/D,IAAMwC,EAAOnJ,EAAMsM,WAAWgJ,OAAO3O,GACjCwC,GAAQnJ,EAAMsM,WAAWuK,gBAAgBlQ,KAAWwC,EAAKE,KACzDrJ,EAAM4D,KAAKkQ,OAAO,CAAC9T,EAAMsM,WAAWsK,OAAOjQ,EAAOwC,IAAQA,EAAKnD,OAAQiF,IAAajL,EAAM0E,KAAKsP,iBAE/F,EAAK3J,MAAMrK,EAAO2G,I,0DAKb3G,GAES,KADAA,EAAMsM,WAAWwK,eAE/B9W,EAAM0E,KAAKqO,SAAU,EACrB/S,EAAM0E,KAAKiE,IAAMsK,KAAKC,W,KC/Bb4E,G,WAIjB,WAAYvX,GAAqB,IAAD,gCAHhCA,cAGgC,OAFhC0N,YAEgC,OADhCK,mBACgC,OAMhCsF,aAAe,SAAChJ,EAAgB5E,GAC5B,EAAK+R,aAAa,EAAKxX,SAASyX,eAChC,IAAMC,EAAc,CAChBjS,OAAQA,EACR4E,OAAQA,GAEZ,EAAKqD,QAAU,EAAKiK,SAASD,IAZD,KAehCE,gBAAkB,WACd,EAAKJ,aAAa,EAAKxX,SAASyX,eACa,UAAzC,EAAKzX,SAASC,eAAe0R,UAAsE,YAA9C,EAAK3R,SAASC,eAAe8M,gBAC9E,EAAKW,OAAS,IACV,EAAKA,OAAS,IACd,EAAKA,OAAS,EAEd,EAAKA,QAAU,KAGvBzF,QAAQ4P,MAAM,mDAzBU,KA6BhChE,gBAAkB,WACd,EAAK2D,aAAa,EAAKxX,SAASyX,eAChC,EAAK/J,QAAU,EACfzF,QAAQ4P,MAAM,qCAhCc,KA0ChCrT,SAAW,SAACsT,GACR,GAAI,EAAK9X,SAASC,eAAe8X,YAAa,CAC1C,IAAMC,EAAUnK,KAAKC,IAAI,EAAGgK,EAAM/J,eAClC9F,QAAQ4P,MAAR,sCAA6CG,EAA7C,qBACA,EAAKtK,OAASG,KAAKsI,IAAI,EAAKzI,OAAQoK,EAAMpK,QAAUsK,EACpD,EAAKjK,cAAgB+J,EAAM/J,cAAgB,IA/CnB,KAmDhCyJ,aAAe,SAACS,GACRA,GAAQ,EAAKjY,SAASC,eAAeiY,cACrC,EAAKxK,QAAU,GACfzF,QAAQ4P,MAAR,oDAtDwB,KAqFhCpF,eAAiB,SAAC0F,EAAe/P,GAC7B,IAAMgQ,GAAmBhQ,EAAM+P,GAAS,IACxC,OAA0C,EAAnCtK,KAAKwK,MAAMD,EAAkB,IAvFR,KA0FhCxF,eAAiB,SAACuF,EAAe/P,GAC7B,IAAMgQ,GAAmBhQ,EAAM+P,GAAS,IACxC,OAAIC,EAAkB,GACX,EAEJvK,KAAKyK,MAAO,IAAQF,EAAmB,KA/FlB,KAkGhCvF,SAAW,SAACsF,EAAe/P,GACvB,OAAO,EAAKsF,OAAS,EAAKkF,eAAeuF,EAAO/P,GAAO,EAAKqK,eAAe0F,EAAO/P,IAlGlF+L,KAAKnU,SAAWA,EAChBmU,KAAKzG,OAAS,EACdyG,KAAKpG,cAAgB,E,2DAgCXwK,GACNA,GAAMpE,KAAKnU,SAASC,eAAeuY,cACnCrE,KAAKzG,QAAU,GACfzF,QAAQ4P,MAAM,oD,+BAoBbY,GACL,IAAMC,EAAY,SAACC,GAAD,MAAqC,WAApBA,EAAIC,OAAO,EAAG,IAC3CC,EAAe,SAACF,GAAD,MAAsC,cAArBA,EAAIC,OAAO,EAAG,KACpD,GAAIF,EAAUD,EAAKhT,SACf,GAAIoT,EAAaJ,EAAKpO,QAElB,OADApC,QAAQ4P,MAAM,wDACP,QAER,GAAmB,SAAfY,EAAKhT,OAAmB,CAC/B,GAAIoT,EAAaJ,EAAKpO,QAElB,OADApC,QAAQ4P,MAAM,sDACP,GAEX,GAAIa,EAAUD,EAAKpO,QAEf,OADApC,QAAQ4P,MAAM,kDACP,OAER,GAAIgB,EAAaJ,EAAKhT,SACrBiT,EAAUD,EAAKpO,QAEf,OADApC,QAAQ4P,MAAM,8DACN,GAIhB,OAAO,M,KAtFMN,GA0GVN,KAAO,SAACC,GACX,IAAMD,EAAO,IAAIM,GAAOL,EAAKlX,UAG7B,OAFAiX,EAAKvJ,OAASwJ,EAAKxJ,OACnBuJ,EAAKlJ,cAAgBmJ,EAAKnJ,cACnBkJ,G,IC5GM6B,G,WAIjB,aAAe,IAAD,gCAHdxU,oBAGc,OAFdyU,eAEc,OADdC,cACc,OAMd3F,aAAe,SAAChJ,EAAgB5E,GAC5B,EAAKsT,WAAY,EACjB,EAAKC,UAAW,EAEZvT,GAAU4E,IACV,EAAK0O,WAAY,IAXX,KAedE,kBAAoB,SAACxZ,GACjB,IAAMyE,EAAW,EAAKI,eAAe,EAAKA,eAAef,OAAS,GAC7DW,GAAa,EAAKgV,YAAYzZ,EAAOyE,IACtC,EAAKI,eAAeW,KAAKxF,IAlBnB,KAsBdgU,eAAiB,WACb,EAAKuF,UAAW,EAChB,EAAKD,WAAY,GAxBP,KA2Bd1U,iBAAmB,SAACuB,EAAY+C,GAI5B,IAHA,IAAMwQ,EAAc,EAAK7U,eAAef,OAAS,GAAKqC,EAChDwT,EAAc,kBAAMD,GAAe,EAAK7U,gBAAkB,EAAKA,eAAe8R,OAChFlS,EAAWkV,IACRlV,KAAcA,EAASC,KAAKC,YAAY2U,WAAa,EAAKG,YAAYhV,EAAUyE,KAAa,EAAKrE,eAAef,QACpHW,EAAWkV,IAEf,OAAOlV,GAlCG,KAqCd0T,gBAAkB,WACd,EAAKmB,WAAY,EACjB,EAAKC,UAAW,GAvCN,KA0CdnF,gBAAkB,WAGd,OAFA,EAAKkF,WAAY,EACjB,EAAKC,UAAW,GACT,GA7CG,KAuDdK,YAAc,SAAC3C,EAAWC,GACtB,OAAOD,EAAEpT,MAAMgW,OAAM,SAAC1Q,EAAM4I,GAAP,OAAaxL,KAAK+B,OAAOa,EAAM+N,EAAErT,MAAMkO,KAAO5I,EAAKf,UAAY8O,EAAErT,MAAMkO,GAAG3J,aAxDrF,KA2Dd0R,YAAc,SAAC7C,EAAyBC,GACpC,OAAOD,EAAE1K,OAAOsN,OAAM,SAAChW,EAAOkO,GAAR,OAAc,EAAK6H,YAAY/V,EAAOqT,EAAE3K,OAAOwF,QA5D3D,KA+Dd0H,YAAc,SAACxC,EAAUC,GACrB,OACI,EAAK0C,YAAY3C,EAAE1J,MAAO2J,EAAE3J,QAC5B,EAAKqM,YAAY3C,EAAE/F,MAAOgG,EAAEhG,QAC5B,EAAK4I,YAAY7C,EAAEtF,QAASuF,EAAEvF,UAC9B,EAAKmI,YAAY7C,EAAE3K,WAAY4K,EAAE5K,aAnErCoI,KAAK7P,eAAiB,GACtB6P,KAAK4E,WAAY,EACjB5E,KAAK6E,UAAW,E,2DA6CNT,GACNA,IACApE,KAAK6E,UAAW,EAChB7E,KAAK4E,WAAY,O,KAvDRD,GA4EV7B,KAAO,SAACC,GACX,IAAMD,EAAO,IAAI6B,GAIjB,OAHA7B,EAAK3S,eAAL,YAA0B4S,EAAK5S,gBAC/B2S,EAAK8B,UAAY7B,EAAK6B,UACtB9B,EAAK+B,SAAW9B,EAAK8B,SACd/B,G,ICjFMuC,G,WAQjB,WAAYxZ,GAAqB,IAAD,gCAPhCA,cAOgC,OANhCuE,YAMgC,OALhCH,iBAKgC,OAJhCwI,aAIgC,OAHhC4F,aAGgC,OAFhCpK,SAEgC,OADhChG,YACgC,OAUhCiR,aAAe,SAAChJ,EAAgB5E,GAG5B,OAFA,EAAKlB,OAAO8O,aAAahJ,EAAQ5E,GACjC,EAAKrB,YAAYiP,aAAahJ,EAAQ5E,IAC/B,GAbqB,KAgBhCgO,eAAiB,WAEb,OADA,EAAKrP,YAAYqP,kBACV,GAlBqB,KAqBhCmE,gBAAkB,WAGd,OAFA,EAAKrT,OAAOqT,kBACZ,EAAKxT,YAAYwT,mBACV,GAxBqB,KA2BhC/D,gBAAkB,WAGd,OAFA,EAAKtP,OAAOsP,kBACZ,EAAKzP,YAAYyP,mBACV,GA7BPM,KAAKnU,SAAWA,EAChBmU,KAAK5P,OAAS,IAAIgT,GAAOvX,GACzBmU,KAAK/P,YAAc,IAAI0U,GAEvB3E,KAAKvH,QAAU,EACfuH,KAAK3B,SAAU,EACf2B,KAAK/L,IAAM,E,2DA0BDmQ,GAGV,OAFApE,KAAK5P,OAAOyO,cAAcuF,GAC1BpE,KAAK/P,YAAY4O,cAAcuF,IACxB,M,KA5CMiB,GA+CVvC,KAAO,SAACC,GACX,IAAMD,EAAO,IAAIuC,GAAKtC,EAAKlX,UAI3B,OAHAiX,EAAK7S,YAAc0U,GAAY7B,KAAKC,EAAK9S,aACzC6S,EAAK1S,OAASgT,GAAON,KAAKC,EAAK3S,QAC/B0S,EAAK7U,OAAS8U,EAAK9U,OACZ6U,G,ICpDMwC,GAIjB,aAAe,IAAD,gCAHdnW,WAGc,OAFdmC,YAEc,OADdiF,cACc,OAMduK,OAAmC,SAAC3R,GAChC,OAAOA,EAAM2R,QAAO,SAACyE,GAAD,OAAOA,MAPjB,KAUdnG,OAAS,SAACjQ,EAAwBmC,EAAgBiF,GAU9C,OATIpH,GAASA,EAAM,KACf,EAAKA,MAAQ,EAAK2R,OAAO3R,GAAOqC,KAAI,SAAC+T,GAEjC,OADAA,EAAE7P,YAAa,EACR6P,KAEX,EAAKjU,OAASA,EACd,EAAKiF,SAAWA,GAGbpH,GApBG,KAuBd0S,QAAU,WAGN,OAFA,EAAKvQ,OAAS,GACC,EAAKnC,MAAMqW,OAAO,EAAG,EAAKrW,MAAMC,SAzBrC,KA6Bd8R,WAAa,SAAC7O,GACV,GAAI,EAAKf,QAAU,EAAKA,QAAUe,EAAMf,OAAQ,CAC5C,IAAImU,EAAWpT,EAAMiF,WACjBjF,EAAMlD,MAAMC,SACZqW,EAAWpT,EAAMlD,MAAMkD,EAAMlD,MAAMC,OAAS,GAAGC,SAEnD,EAAKF,MAAM+B,SAAQ,SAACuD,GAChBA,EAAKpF,QAAUoW,EACfhR,EAAKhB,SAAW,kBAAM,QArCpB,KA0CdgK,cAAgB,mBAAQ,EAAKtO,MAAMC,QA1CrB,KA4CdsW,cAAgB,wBAAM,EAAKjI,iBAAmB,EAAK9J,eAA6C,MAA5B,YAAKA,qBAAL,eAAoBgB,OA5C1E,KA8CdhB,YAAiC,kBAAO,EAAK8J,iBAAmB,EAAKtO,MAAM,IAAO,MA9CpE,KAgDduS,mBAAqB,kBAAM,EAAKvS,MAAMC,OAAS,GAhDjC,KAkDduW,oBAAsB,SAAClR,GAAD,OAAiB,EAAKnD,QAAUmD,EAAKnD,QAAU,EAAKA,QAAW,MAlDvE,KAoDdmL,YAAc,kBAAM,EAAKnL,QAAyB,SAAf,EAAKA,QApD1B,KAsDdsU,iBAAmB,SAAC3T,GAAD,OAAmB,EAAKX,QAAU,EAAKA,QAAL,qBAA6BW,IAtDpE,KAwDd4T,cAAgB,SAAC5T,GAAD,OAAmB,EAAKX,QAAU,EAAKA,QAAL,kBAA0BW,IAxD9D,KA0Dd6T,iBAAmB,kBAAM,EAAKxU,QAAyC,YAA/B,EAAKA,OAAOyU,UAAU,EAAG,IA1DnD,KA4DdC,gBAAgC,kBAAO,EAAK1U,QAAUM,SAAS,EAAKN,OAAOyU,UAAU,KAAQ,GA3DzF/F,KAAK7Q,MAAQ,GACb6Q,KAAK1O,OAAS,GACd0O,KAAKzJ,SAAW,MAPH+O,GAkEVxC,KAAO,SAACC,GACX,IAAMD,EAAO,IAAIwC,GAIjB,OAHAxC,EAAK3T,MAAQ0C,KAAKoR,QAAQF,EAAK5T,OAC/B2T,EAAKxR,OAASyR,EAAKzR,OACnBwR,EAAKvM,SAAWwM,EAAKxM,SACduM,G,ICjEMmD,GAIjB,WAAY5T,GAAe,IAAD,gCAH1BA,WAG0B,OAF1B/D,kBAE0B,OAD1B4X,UAC0B,OAM1BC,UAAY,SAACC,EAAc3R,GAEvB,IADA,IAAM4R,EAAUD,EAAKvF,eACZxD,EAAI,EAAGA,EAAIgJ,EAAQjX,OAAQiO,IAChC,GAAIxL,KAAK+B,OAAOa,EAAM4R,EAAQhJ,IAC1B,OAAOA,EAGf,OAAO,GAbe,KAgB1BiJ,OAAS,SAAChM,EAAa7F,GACnB,IAAK,IAAI4I,EAAI,EAAGA,EAAI,EAAK6I,KAAK9W,OAAQiO,IAElC,IADA,IAAMkJ,EAAM,EAAKL,KAAK7I,GACbmJ,EAAI,EAAGA,EAAID,EAAInX,OAAQoX,IAAK,CACjC,IAAMJ,EAAOG,EAAIC,GACjB,GAAIJ,GAAQA,EAAK9U,QAAUgJ,EAAK,CAC5B,IAAMrF,EAAS,EAAKkR,UAAUC,EAAM3R,GAGpC,OAFA,EAAKnG,aAAe,CAAEF,EAAGoY,EAAGjY,EAAG8O,EAAG7O,EAAGyG,QACrC,EAAKwR,eAxBK,KA+B1BC,MAAQ,SAACpM,GAAD,OAAmBA,EAAIlM,IAAM,EAAKE,aAAaF,GAAKkM,EAAI/L,IAAM,EAAKD,aAAaC,GAAK+L,EAAI9L,IAAM,EAAKF,aAAaE,GA/B/F,KAiC1BI,SAAW,SAAC0L,GAAD,OACP,EAAKgK,KAAKhK,GAAK,WACX,EAAKhM,aAAaF,KACU,GAAxB,EAAKE,aAAaF,IAClB,EAAKE,aAAaF,EAAI,OArCR,KAyC1BS,UAAY,SAACyL,GAAD,OACR,EAAKgK,KAAKhK,GAAK,WACX,EAAKhM,aAAaF,IACS,GAAvB,EAAKE,aAAaF,IAClB,EAAKE,aAAaF,EAAI,OA7CR,KAiD1BkW,KAAO,SAAChK,EAAeqM,GACnB,GAAK,EAAKD,MAAMpM,GAAhB,CAGAqM,IACA,IAAMnS,EAAU,EAAKA,eACNoS,GAAXpS,EACA,EAAK8P,KAAK,EAAKhW,aAAcqY,IAE7B,EAAKrY,aAAaE,EAAIgG,EAAQqM,eAAezR,OAAS,EACtD,EAAKqX,eA3Da,KA+D1B3X,OAAS,SAACwL,GAAmB,IAAD,EACxB,GAAK,EAAKoM,MAAMpM,GAAhB,CAGA,IAAMuM,EAAS,UAAG,EAAKrS,iBAAR,aAAG,EAAgBqM,eAC9BgG,GAAaA,EAAUzX,QAAU,EAAKd,aAAaE,EAAI,GACvD,EAAKF,aAAaE,IAClB,EAAKiY,aAEL,EAAKK,WAAU,KAxEG,KA4E1B/X,SAAW,SAACuL,GAAmB,IAAD,EAC1B,GAAK,EAAKoM,MAAMpM,GAAhB,CAGA,IAAMuM,EAAS,UAAG,EAAKrS,iBAAR,aAAG,EAAgBqM,eAC9BgG,GAAaA,EAAUzX,QAAU,EAAKd,aAAaE,EAAIqY,EAAUzX,OAAS,GAC1E,EAAKd,aAAaE,IAClB,EAAKiY,aAEL,EAAKK,WAAU,KArFG,KAyF1BA,UAAY,SAACC,GACkB,GAAvB,EAAKzY,aAAaC,EAClB,EAAKD,aAAaC,EAAI,EAEtB,EAAKD,aAAaC,EAAI,EAE1B,IAAMiG,EAAU,EAAKA,UACfwS,EAAexS,EAAUA,EAAQqM,eAAezR,OAAS,EAAI,EACnE,EAAKd,aAAaE,EAAIuY,EAAWC,EAAO,EACnCxS,EAGD,EAAKiS,YAFL,EAAK7X,SAAS,EAAKN,eAnGD,KAyG1BmY,UAAY,WAAO,IAAD,EAIP,EAHDI,EAAS,UAAG,EAAKrS,iBAAR,aAAG,EAAgBqM,eAC9BgG,GAAaA,EAAU,EAAKvY,aAAaE,GACzC,EAAK6D,MAAM/F,MAAMiU,QAAQsG,EAAU,EAAKvY,aAAaE,IAErD,EAAK6D,MAAM/F,MAAMoU,UAAS,YAAKlM,iBAAL,eAAgBlD,SAAU,IAExD,OAAO,GAhHe,KAmH1BkD,QAAU,WACN,OAAO,EAAK0R,KAAK,EAAK5X,aAAaC,GAAG,EAAKD,aAAaF,IApHlC,KAuH1Ba,aAAe,WACX,OAAI,EAAKoD,MAAM/F,MAAMmI,MAAQ,EAAKpC,MAAM/F,MAAMmI,KAAKhB,WACxC,EAAKpB,MAAM/F,MAAMmI,KAAKpF,QAAQ,CAAEC,YAAY,IAC5C,EAAK+C,MAAM/F,MAAM6C,MACxB,UAAO,EAAKqF,iBAAZ,aAAO,EAAgB8C,WAAW,CAAEhI,YAAY,IAEzC,SAACjD,GACJA,EAAIgC,UAAUoY,YACdpa,EAAI2D,KAAKC,YAAY4U,UAAW,GALJ,IAAD,GAzHnC7E,KAAK3N,MAAQA,EACb2N,KAAK1R,aAAe,CAAEF,EAAG,EAAGG,EAAG,EAAGC,EAAG,GACrCwR,KAAKkG,KAAO,CAAC,CAAClG,KAAK3N,MAAMwG,MAAOmH,KAAK3N,MAAMmK,WAAOoK,GAAtC,mBAAoD5G,KAAK3N,MAAMuF,WAAWC,SAA1E,YAAuFmI,KAAK3N,MAAM4K,QAAQpF,UCbzGoP,GAOjB,WAAYnb,GAAiC,IAAD,gCAN5CA,oBAM4C,OAL5C8P,iBAK4C,OAJ5CG,wBAI4C,OAH5CmL,qBAG4C,OAF5C1X,oBAE4C,OAQ5C+L,kBAAoB,SAACJ,GACb,EAAK3L,eAAe8L,MAAQH,IAC5B,EAAK3L,eAAiB4L,IAAgB+L,IAAIhM,KAVN,KAc5CtL,WAAa,WACT,EAAKL,eAAiB4L,IAAgBgM,eAfE,KAkB5C9D,YAAc,WACV,SAAI,EAAK9T,eAAeE,cAAe,EAAKF,eAAe6L,QACvD,EAAK7L,eAAiB4L,IAAgB+L,IAAI,EAAK3X,eAAe6L,OACvD,IApBX2E,KAAKlU,eAAiBA,EACtBkU,KAAKpE,YAAc9P,EAAe8P,YAClCoE,KAAKjE,mBAAqBjQ,EAAeiQ,mBACzCiE,KAAKkH,gBAAkB9L,IAAgBiM,qBACvCrH,KAAKxQ,eAAiB4L,IAAgB+L,IAAIrb,EAAe0D,iBAZ5CyX,GAiCVnE,KAAO,SAACC,GACX,IAAMD,EAAO,IAAImE,GAASlE,EAAKjX,gBAI/B,OAHAgX,EAAKtT,eAAiBuT,EAAKvT,eAC3BsT,EAAKlH,YAAcmH,EAAKnH,YACxBkH,EAAK/G,mBAAqBgH,EAAKhH,mBACxB+G,G,aCpCM/F,G,kDAOjB,WAAY5N,EAAetD,GAAqB,IAAD,8BAC3C,cAAM,UAPVA,cAM+C,IAL/Cyb,gBAK+C,IAJ/CxO,YAI+C,IAH/CzB,cAG+C,IAF/CK,aAE+C,IAD/CJ,gBAC+C,IAkB/C4J,WAAa,SAAC7R,GACV,EAAKiI,WAAa,SAACgK,GAAD,OAAOjS,EAAQ,KAAMiS,EAAG,OAC1C,EAAKnS,MAAM+B,SAAQ,SAACuD,EAAMxC,GACtBwC,EAAKpF,QAAU,SAACiS,GAAD,OAAWjS,EAAQ,eAAKoF,GAAQ6M,EAAG,OAClD7M,EAAKhB,SAAW,kBAAMxB,GAAS,EAAK9C,MAAMC,OAAS,OAtBZ,EA0B/C0Q,OAAS,WAEL,OADe,EAAK3Q,MAAM8S,OA3BiB,EAsC/CnF,QAAU,SAACN,GACP,QAAIA,EAAMpN,SACN,EAAKD,MAAQqN,EAAM+K,UAAU/V,IAAI,EAAKgW,mBACtC,EAAKrY,MAAM,EAAKA,MAAMC,OAAS,GAAGqE,SAAW,kBAAM,GACnD,EAAK6T,cACE,IA3CgC,EAiD/CE,kBAAoB,SAAC/S,GAIjB,OAHAA,EAAKsN,aAAarI,KAAKsI,IAAI,EAAKnW,SAASkQ,mBAAoB,IAC7DtH,EAAKf,UAAW,EAChBe,EAAKnD,OAAS,EAAKA,OACZmD,GArDoC,EAwD/CgT,QAAU,SAAChT,GAAD,OAAgBA,GAAQA,EAAKb,OAAO,EAAKgN,WAxDJ,EA0D/ChE,OAAS,WACL,IAAI8K,EAAiB,GACrB,GAA6C,UAAzC,EAAK7b,SAASC,eAAe0R,SAAsB,CACnD,IAAMrI,EAAM,EAAKhG,MAAM8S,MACnB9M,IAAKuS,EAAS,CAACvS,IASvB,MAP6C,UAAzC,EAAKtJ,SAASC,eAAe0R,WAC7BkK,EAAS,EAAKvY,MAAMqW,OAAO,EAAKrW,MAAMC,OAAS,IAE1B,GAArB,EAAKD,MAAMC,QACX,EAAK0J,SAGF4O,GAvEoC,EAkF/C5L,WAAa,SAACD,GAEV,OADA,EAAK1M,MAAM+B,SAAQ,SAAC2F,GAAD,OAAaA,EAAQkL,aAAarI,KAAKsI,IAAInG,EAAK,OAC5D,iBAlFP,EAAKhQ,SAAWA,EAChB,EAAKsD,MAAQA,EAAMqC,IAAI,EAAKgW,mBAC5B,EAAKF,WAAa,EAClB,EAAKxO,QAAU,EAEf,EAAKzB,SAAW,EAChB,EAAKK,QAAU,aACf,EAAKJ,WAAa,kBAAM,cAC0B,UAA9C,EAAKzL,SAASC,eAAe8M,gBAC7B,EAAKE,OAAS,GAEgC,UAA9C,EAAKjN,SAASC,eAAe8M,gBAC7B,EAAKE,OAAS,GAdyB,E,0DAgC3C,MACkD,YAA9CkH,KAAKnU,SAASC,eAAe8M,eACkB,UAA9CoH,KAAKnU,SAASC,eAAe8M,eAA6BoH,KAAKsH,WAAa,M,GAzCtD3G,IAAd5D,GAiFV+F,KAAO,SAACC,GACX,IAAMD,EAAO,IAAI/F,GAAM,GAAIgG,EAAKlX,UAIhC,OAHAiX,EAAK3T,MAAQ0C,KAAKoR,QAAQF,EAAK5T,OAC/B2T,EAAKhK,OAASiK,EAAKjK,OACnBgK,EAAKwE,WAAavE,EAAKuE,WAChBxE,G,ICrFM/F,GAEjB,WAAY1O,GAAuB,IAAD,gCADlCA,eACkC,OAIlCsH,MAAuB,SAACrK,GAAD,OAAkB,IAAIqT,IAAUC,YAAW,SAACxB,GAAD,OAAcA,EAAEvE,QAAOvN,IAJvD,KAMlCyT,gBAAkB,SAACoE,EAAawE,EAAgBrc,GAA9B,OAA+C,EAAKqK,MAAMrK,EAAO,IANjD,KAQlC6T,eAAiB,SAAC1K,EAAmBkT,EAAgBrc,GACjD,OAAe,MAARmJ,EAAe,EAAKmT,YAAYnT,EAAMnJ,GAAS,EAAKuc,aAAavc,IAT1C,KAYlCsc,YAAc,SAACnT,EAAYnJ,GACvB,OAAOA,EAAMuN,MAAM4O,QAAQhT,IAASnJ,EAAMkR,MAAMG,OAAOrR,EAAMuN,MAAM+D,WAAatR,EAAM0E,KAAKkP,aAAa,QAAS,UAbnF,KAgBlC2I,aAAe,SAACvc,GACZ,IAAKA,EAAMuN,MAAM+H,SACb,QACOtV,EAAMkR,MAAMoE,UACXtV,EAAMuN,MAAMgE,cACZvR,EAAMuN,MAAMiE,QAAQxR,EAAMkR,MAAMM,YAChCxR,EAAM0E,KAAKyT,mBACX,EAAKpV,UAAUoY,aACnB,EAAK9Q,MAAMrK,EAAO,IAvB1B0U,KAAK3R,UAAYA,GCJJkP,G,iDACjB5H,MAAuB,SAACrK,GAAD,OAAkB,IAAIqT,IAAUC,YAAW,SAACxB,GAAD,OAAcA,EAAEZ,QAAOlR,I,KAEzFyT,gBAAkB,SAACtK,EAAY8B,EAAejL,GAA5B,OACbA,EAAMkR,MAAMwC,mBAAqB1T,EAAMkR,MAAME,eAAiBpR,EAAM0E,KAAKkP,aAAa,QAAS,UAAa,EAAKvJ,MAAMrK,EAAO,I,KAEnI6T,eAAiB,SAAC1K,EAAmB8B,EAAejL,GAAnC,OACZmJ,GAAQnJ,EAAM4D,KAAKkQ,OAAO,CAAC9T,EAAMkR,MAAMI,OAAOnI,IAAQ,QAAS8B,IAAajL,EAAM0E,KAAKsP,kBAAqB,EAAK3J,MAAMrK,EAAO,KCRlHwc,GAIjB,aAAe,IAAD,gCAHd7K,aAGc,OAFdT,WAEc,OAKduL,gBAAkB,SAACzc,GACf,EAAK0c,sBAAsB1c,GAEvBA,EAAMO,SAAS2D,eAAe8L,MAAQF,IAAgB6M,MACrD,EAAKC,kBAAkB5c,IACvB,EAAK6c,sBAAsB7c,IAC3BA,EAAM4D,KAAKuO,iBACV,EAAK2K,iBAAiB9c,IAAUA,EAAMO,SAAS2D,eAAe8L,KAAOF,IAAgBiN,OACtF/c,EAAMuN,MAAM+H,WAAYtV,EAAMuN,MAAMgE,cACrCvR,EAAMO,SAAS2D,eAAe8L,MAAQF,IAAgBkN,SAEtDhd,EAAMuN,MAAMnD,YAAa,IAhBnB,KAoBdyS,sBAAwB,SAAC7c,EAAcid,GACnC,IAAKjd,EAAM4D,KAAKuO,iBAAmBnS,EAAMO,SAAS2D,eAAe8L,KAAOF,IAAgB6M,KACpF,OAAO,EAGX,IAAMO,EAAW,GACjB,GAAIld,EAAMkR,MAAMwC,oBACR1T,EAAMO,SAAS2D,eAAe8L,MAAQF,IAAgBiN,OAAS/c,EAAM4D,KAAKuN,eAAe,CACzF,IAAM6H,EAAO,CAAEpO,OAAQ,QAAS5E,OAAQhG,EAAM4D,KAAKoC,SAC/ChG,EAAMO,SAAS2D,eAAe8L,MAAQF,IAAgBkN,QAAUhd,EAAM0E,KAAKI,OAAOoT,SAASc,GAAQ,KACnGkE,EAAS1X,KAAKwT,GACdhZ,EAAMkR,MAAM9G,YAAa,GAiDrC,OA5CApK,EAAMsM,WAAWC,OAAO3G,SAAQ,SAAC/B,EAAO8C,GACpC,GAAI3G,EAAMsM,WAAWoH,gBAAgB/M,KAC7B3G,EAAMO,SAAS2D,eAAe8L,MAAQF,IAAgBiN,OAAS/c,EAAM4D,KAAK0W,iBAAiB3T,IAAQ,CACnG,IAAMqS,EAAO,CAAEpO,OAAQ/G,EAAMmC,OAAQA,OAAQhG,EAAM4D,KAAKoC,SACpDhG,EAAMO,SAAS2D,eAAe8L,MAAQF,IAAgBkN,QAAUhd,EAAM0E,KAAKI,OAAOoT,SAASc,GAAQ,KACnGkE,EAAS1X,KAAKwT,GACdnV,EAAMuG,YAAa,OAMnCpK,EAAM2R,QAAQpF,OAAO3G,SAAQ,SAAC/B,EAAO8C,GACjC,GAAI3G,EAAM2R,QAAQ+B,gBAAgB/M,KAC1B3G,EAAMO,SAAS2D,eAAe8L,MAAQF,IAAgBiN,OAAS/c,EAAM4D,KAAK2W,cAAc5T,IAAQ,CAChG,IAAMwW,EACFnd,EAAM4D,KAAKwW,iBACW,GAAtBvW,EAAMA,MAAMC,QACZ9D,EAAM4D,KAAK4W,oBACwD,GAAnExa,EAAM2R,QAAQpF,OAAOvM,EAAM4D,KAAK8W,mBAAmB7W,MAAMC,OAEvDsZ,EACFvZ,EAAMA,MAAMC,OAAS,GACrB9D,EAAM4D,KAAK4W,oBACXxa,EAAM2R,QAAQpF,OAAOvM,EAAM4D,KAAK8W,mBAAmB7W,MAAMC,OAAS,GAClED,EAAMA,MAAMA,EAAMA,MAAMC,OAAS,GAAGuF,MAChCrJ,EAAM2R,QAAQpF,OAAOvM,EAAM4D,KAAK8W,mBAAmB7W,MAC/C7D,EAAM2R,QAAQpF,OAAOvM,EAAM4D,KAAK8W,mBAAmB7W,MAAMC,OAAS,GACpEuF,OACLrJ,EAAM2R,QAAQ2D,OAAOtV,EAAM4D,KAAK8W,mBAAmBtS,SAElDiV,GAAaF,IAAkCC,EAErD,IAAKH,GAAcjd,EAAMO,SAAS2D,eAAe8L,MAAQF,IAAgBiN,MAAQM,EAAW,CACxF,IAAMrE,EAAO,CAAEpO,OAAQ/G,EAAMmC,OAAQA,OAAQhG,EAAM4D,KAAKoC,SACpDhG,EAAMO,SAAS2D,eAAe8L,MAAQF,IAAgBkN,QAAUhd,EAAM0E,KAAKI,OAAOoT,SAASc,GAAQ,KACnGkE,EAAS1X,KAAKwT,GACdnV,EAAMuG,YAAa,QAOhC8S,EAASpZ,QAhFN,KAmFdgZ,iBAAmB,SAAC9c,GAChB,IAAIsd,GAAW,EACTC,EAAaC,GAAMhG,KAAKxX,GAwB9B,OAvBA,EAAKkR,MAAM2C,eAAe0J,EAAWrM,MAAMoE,SAAU,KAAMiI,GACvDA,EAAW7Y,KAAKC,YAAY4U,UACxB,EAAKsD,sBAAsBU,GAAY,IAASvd,EAAMO,SAAS2D,eAAe8L,KAAOF,IAAgBiN,KAAO,EAAI,KAChH/c,EAAMkR,MAAM9G,YAAa,EACzBkT,GAAW,GAInBtd,EAAM2R,QAAQpF,OAAO3G,SAAQ,SAAC+L,EAAShL,GAAV,OACzBgL,EAAQ9N,MACHqC,KAAI,SAACiD,EAAMsU,GAAP,MAAsB,CAAEA,YAAWtU,WACvCqM,QAAO,qBAAGrM,KAAiBf,YAC3BxC,SAAQ,YAA0B,IAAvBuD,EAAsB,EAAtBA,KAAMsU,EAAgB,EAAhBA,UACRC,EAAeF,GAAMhG,KAAKxX,GAChC,EAAK2R,QAAQkC,eAAe1K,EAAM,KAAMuU,EAAc/W,GAClD+W,EAAahZ,KAAKC,YAAY4U,UAC1B,EAAKsD,sBAAsBa,GAAc,IAAS1d,EAAMO,SAAS2D,eAAe8L,KAAOF,IAAgBiN,KAAO,EAAI,KAClHpL,EAAQ9N,MAAM4Z,GAAWrT,YAAa,EACtCkT,GAAW,SAKxBA,GA7GG,KAgHdV,kBAAoB,SAAC5c,GACjB,IAAKA,EAAM4D,KAAKuO,gBAAiB,CAC7B,IAAMwL,EAAW3d,EAAM2R,QAAQpF,OAC1BrG,KAAI,SAAC0X,EAAQjX,GAAT,OAAmBA,KACvB6O,QAAO,SAAC7O,GAAD,OAAW3G,EAAM2R,QAAQ2D,OAAO3O,IAAU3G,EAAM2R,QAAQ2D,OAAO3O,GAAOyB,YAIlF,OAHAuV,EAAS/X,SAAQ,SAACe,GACd3G,EAAM2R,QAAQ2D,OAAO3O,GAAOyD,YAAa,KAEtCuT,EAAS7Z,OAGpB,OAAO,GA3HG,KA8Hd4Y,sBAAwB,SAAC1c,GACrB,IAAM6d,EAAoB,SAApBA,EAAqB3E,GACvBA,EAAI9O,YAAa,EACjB8O,EAAIrV,OAASqV,EAAIrV,MAAM+B,QAAQiY,GAC/B3E,EAAI3M,QAAU2M,EAAI3M,OAAO3G,QAAQiY,IAGrCA,EAAkB7d,EAAMkR,OACxB2M,EAAkB7d,EAAMuN,OACxBsQ,EAAkB7d,EAAM2R,SACxBkM,EAAkB7d,EAAMsM,aAvIxBoI,KAAK/C,QAAU,IAAIE,GACnB6C,KAAKxD,MAAQ,IAAIe,ICJZ6L,GAAb,4MAEI/R,SAAW,EAFf,EAGI5F,GAAK,EAHT,EAKIpC,QAAU,SAACkT,GAAD,OAAY,SAACnF,MAL3B,EAOI9F,WAAa,SAACiL,GAAD,OAAY,SAACnF,MAP9B,EAQI8D,WAAa,aARjB,YAAkCH,IAUb5D,GAKjB,WAAYtR,EAAoBqD,GAAa,IAAD,gCAJ5C2I,YAI4C,OAH5ChM,cAG4C,OAF5CqD,UAE4C,OAa5CgS,WAAa,SACT7R,EACAga,EACAna,GAEA,EAAK2I,OAAO3G,SAAQ,SAAC/B,EAAO8C,GACxB9C,EAAMmI,WAAa,SAACgK,GAAD,OAAYjS,EAAQ,KAAMiS,EAAGrP,IAChD9C,EAAMA,MAAM+B,SAAQ,SAACuD,EAAM8M,GACvB,IAAM/K,EAAQ/B,EAAKf,UAAY6N,GAAUpS,EAAMA,MAAMC,OAAS,EAAIia,EAAgBha,EAClFoF,EAAKpF,QAAU,SAACiS,GAAD,OAAY9K,EAAM,eAAK/B,GAAQ6M,EAAGrP,IACjDwC,EAAKhB,SAAW,kBAAOgB,EAAKf,UAAY,EAAK4V,WAAWrX,EAAOwC,KAAS,MAE5EvF,EAAKgS,WAAW/R,OAzBoB,KA6B5Coa,SAAW,SAACtX,GAAD,OAAmB,EAAK4F,OAAO5F,IA7BE,KA+B5C+M,gBAAkB,SAAC/M,GAAD,OAAmB,EAAKuX,WAAW,EAAK5I,OAAO3O,GAAQ,EAAK/C,KAAM+C,IA/BxC,KAiC5CyK,YAAc,SAACzK,GAAD,OAAmB,EAAK2P,IAAI3P,EAAO,EAAK/C,KAAK2S,YAjCf,KAmC5C2H,WAAa,SAAC/U,EAAYvF,EAAY+C,GAAzB,OACRwC,GAAQA,EAAKf,UAAYxE,EAAKyW,oBAAoBlR,IACnD,EAAKkN,QAAQ1P,EAAO/C,EAAKyE,iBACvBc,GAAQvF,EAAK2W,cAAc5T,IAtCW,KAwC5C0P,QAAU,SAAC1P,EAAeuC,GACtB,IAAMW,EAAM,EAAKyL,OAAO3O,GACxB,IAAKkD,EACD,OAAOX,GAA4B,MAAjBA,EAAQG,KAE9B,GAAIQ,EAAIzB,SACJ,OAAO,EAEX,IAAM+V,EAAK,YAAOC,gBAGlB,OAFqBlV,EAAUiV,EAAME,QAAQnV,EAAQG,MAAQ,GAEvC,GADL8U,EAAME,QAAQxU,EAAIR,QACW,OAAPH,QAAO,IAAPA,OAAA,EAAAA,EAASvB,KAAKoO,SAAUlM,EAAIlC,KAAKoO,OAAsB,MAAblM,EAAIR,MAnD7C,KAsD5CiV,QAAU,SAAC3X,EAAewC,GACtB,IAAK,IAAI+R,EAAI,EAAGA,EAAI,EAAK3O,OAAO5F,GAAO9C,MAAMC,OAAQoX,IACjD,GAAI/R,GAAQA,EAAKb,OAAO,EAAKiE,OAAO5F,GAAO9C,MAAMqX,KAAO/R,EAAKf,WAAa,EAAKmE,OAAO5F,GAAO9C,MAAMqX,GAAG9S,SAClG,OAAO,EAAKmE,OAAO5F,GAAO9C,MAAMqX,GAGxC,OAAO,GA5DiC,KA+D5CnH,iBAAmB,SAAC5K,EAAY4I,GAC5B,IAAK,IAAImJ,EAAI,EAAGA,EAAI,EAAK3O,OAAOwF,GAAGlO,MAAMC,OAAQoX,IAC7C,GAAI/R,GAAQA,EAAKb,OAAO,EAAKiE,OAAOwF,GAAGlO,MAAMqX,IAAK,CAC9C,IAAMkB,EAAS,EAAK7P,OAAOwF,GAAGlO,MAAMqW,OAAOgB,EAAG,EAAK3O,OAAOwF,GAAGlO,MAAMC,QAEnE,OADA,EAAKya,aAAaxM,GACXqK,EAIf,MAAO,IAxEiC,KA2E5C9W,KAAO,SAAC6D,EAAYxC,GAChB,EAAK4F,OAAO5F,GAAO9C,MAAM2B,KAAK2D,IA5EU,KA+E5C6U,WAAa,SAACrX,EAAewC,GAEzB,OADY,EAAKmM,OAAO3O,GACbyB,UAAYe,GAAQA,EAAKb,OAAO,EAAKgN,OAAO3O,KAjFf,KAoF5CwN,QAAU,SAACxN,EAAewC,GACtB,IAAMU,EAAM,EAAKyL,OAAO3O,GACxB,QAAI,EAAKqX,WAAWrX,EAAOwC,KACvBU,EAAIzB,UAAW,EACf,EAAKmW,aAAa5X,IACX,IAzF6B,KA+F5C4X,aAAe,SAAC5X,GAIZ,IAHA,IAAI6X,EAAU,EAAKje,SAASkQ,mBACxBV,EAAO,EACPlG,EAAM,EAAKyL,OAAO3O,GACf6X,GAAsB,GAAXA,GAAgB3U,GAC9BA,EAAI4M,aAAa+H,GACjBA,IACA3U,EAAM,EAAKyL,OAAO3O,EAAOoJ,GACzBA,KAvGoC,KA2G5CuG,IAAM,SAAC3P,EAAeiG,GAGlB,OAFA,EAAKL,OAAO5F,GAAO9C,MAAQ,EAAK0I,OAAO5F,GAAO9C,MAAM4a,OAAO7R,EAAM1G,KAAI,SAAC+T,GAAD,OAAO,EAAKiC,kBAAkBjC,EAAGtT,OACtG,EAAK4X,aAAa5X,GACXiG,GA9GiC,KAiH5CsP,kBAAoB,SAAC/S,EAAYxC,GAE7B,OADAwC,EAAKnD,OAAS,EAAKuG,OAAO5F,GAAOX,OAC1BmD,GAnHiC,KAsH5CmM,OAAS,SAAC3O,EAAe+X,GAAhB,OAAoC,EAAKnS,OAAO5F,GAAO9C,MAAM,EAAK0I,OAAO5F,GAAO9C,MAAMC,OAAS,GAAK4a,GAAU,KAtH3E,KAmI5ClO,WAAa,SAACD,GAEV,OADA,EAAKhE,OAAO3G,SAAQ,SAAC/B,GAAD,OAAWA,EAAMA,MAAM+B,SAAQ,SAAC2F,GAAD,OAAaA,EAAQkL,aAAarI,KAAKsI,IAAInG,EAAK,UAC5F,GAnIPmE,KAAK9Q,KAAOA,EACZ8Q,KAAKnI,OAFO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEbrG,KAAI,SAACC,GACnB,IAAM2L,EAAI,IAAIgM,GAAa,WAAa3X,EAAIvC,GAI5C,OAHAkO,EAAEjO,MAAQ,GACViO,EAAE/F,SAAW,EACb+F,EAAE3L,GAAKA,EACA2L,KAEX4C,KAAKnU,SAAWA,GAfHsR,GA6HV2F,KAAO,SAACC,EAAe7T,GAC1B,IAAM4T,EAAO,IAAI3F,GAAQ4F,EAAKlX,SAAUqD,GAOxC,OANA4T,EAAKjL,OAASkL,EAAKlL,OAAOrG,KAAI,SAACrC,EAAO8C,GAClC,IAAMmL,EAAI,IAAIgM,GAAaja,EAAMmC,OAAQpC,GAGzC,OAFAkO,EAAE3L,GAAKQ,EACPmL,EAAEjO,MAAQ0C,KAAKoR,QAAQ9T,EAAMA,OACtBiO,KAEJ0F,G,IChJMvF,G,kDAKjB,WAAY1R,EAAoBqD,GAAa,IAAD,8BACxC,cAAM,QAASA,IALnBrD,cAI4C,IAH5CwL,cAG4C,IAF5CK,aAE4C,IAD5CJ,gBAC4C,IAS5C4J,WAAa,SAAC7R,GACV,EAAKiI,WAAa,SAACgK,GAAD,OAAOjS,EAAQ,KAAMiS,EAAG,OAC1C,EAAKnS,MAAM+B,SAAQ,SAACuD,EAAMxC,GACtBwC,EAAKpF,QAAU,SAACiS,GAAD,OAAWjS,EAAQ,eAAKoF,GAAQ6M,EAAG,OAClD7M,EAAKhB,SAAW,kBAAMxB,GAAS,EAAK9C,MAAMC,OAAS,MAEvD,EAAKF,KAAKgS,WAAV,kBAfwC,EAkB5CxE,YAAc,kBAAM,EAAKC,OAAO,EAAKzN,KAAK2S,YAlBE,EAoB5CD,IAAM,SAACnN,GAAD,OAAgBA,GAAQ,EAAKtF,MAAM2B,KAAK,EAAK0W,kBAAkB/S,KApBzB,EAsB5CkI,OAAS,SAACzE,GAAD,OAAmBA,GAASA,EAAM9I,QAAU8I,EAAM1G,IAAI,EAAKoQ,MAtBxB,EAwB5C4F,kBAAoB,SAAC/S,GAIjB,OAHAA,EAAKnD,OAAS,EAAKA,OACnBmD,EAAKf,UAAW,EAChBe,EAAKsN,aAAarI,KAAKsI,IAAI,EAAKnW,SAASkQ,mBAAoB,IACtDtH,GA5BiC,EA+B5CuK,gBAAkB,kBAAM,EAAK9P,KAAKuN,eAAiB,EAAKwN,OAAO,EAAK/a,KAAKyE,gBA/B7B,EAiC5CsW,OAAS,SAACxV,GAAD,OAAuBA,KAAU,EAAKmM,WAAanM,EAAKb,OAAO,EAAKgN,YAjCjC,EAmC5ChE,OAAS,SAACnI,GAAD,OAAiBA,GAAQA,EAAKb,OAAO,EAAKgN,WAAa,EAAKzR,MAAM8S,OAAU,MAnCzC,EAqC5CnF,QAAU,kBAAM,EAAK3N,MAAMqW,OAAO,EAAG,EAAKrW,MAAMC,SArCJ,EA6C5C0M,WAAa,SAACD,GAEV,OADA,EAAK1M,MAAM+B,SAAQ,SAAC2F,GAAD,OAAaA,EAAQkL,aAAarI,KAAKsI,IAAInG,EAAK,OAC5D,iBA7CP,EAAKhQ,SAAWA,EAEhB,EAAKwL,SAAW,EAChB,EAAKK,QAAU,aACf,EAAKJ,WAAa,kBAAM,cANgB,E,UALbyJ,IAAdxD,GA4CVuF,KAAO,SAACC,EAAa7T,GACxB,IAAM4T,EAAO,IAAIvF,GAAMwF,EAAKlX,SAAUqD,GAEtC,OADA4T,EAAK3T,MAAQ0C,KAAKoR,QAAQF,EAAK5T,OACxB2T,G,ICjCMgG,GAajB,WAAYtE,GAAW,IAAD,gCAZtB3L,WAYsB,OAXtB2D,WAWsB,OAVtB5E,gBAUsB,OATtBqF,aASsB,OARtB/N,UAQsB,OAPtBc,UAOsB,OANtBnE,cAMsB,OALtBS,WAKsB,OAJtB4d,eAIsB,OAHtBzZ,YAGsB,OAFtBpC,eAEsB,OActB8b,gBAAkB,WAEd,OADA,EAAKD,UAAUnC,gBAAgB,GACxB,GAhBW,KAmBtBjM,WAAa,SAACD,GACV,EAAKhQ,SAAS+P,YAAcC,EAC5B,EAAKhD,MAAMiD,WAAWD,GACtB,EAAKW,MAAMV,WAAWD,GACtB,EAAKjE,WAAWkE,WAAWD,GAC3B,EAAKoB,QAAQnB,WAAWD,IAxBN,KA2BtBuO,aAAe,WACX,IAAMjK,EAAa,SAACD,GAAD,OAAgC,IAAID,GAAWC,GAAcC,WAAW,EAAKjR,OAKhG,OAJA,EAAK2J,MAAMqI,WAAWf,EAAW,IAAIkK,GAAa,EAAKhc,aACvD,EAAKmO,MAAM0E,WAAWf,EAAW,IAAImK,KACrC,EAAK1S,WAAWsJ,WAAWf,EAAW,IAAIoK,KAC1C,EAAKtN,QAAQiE,WAAWf,EAAW,IAAIqK,IAAmBrK,EAAW,IAAIZ,IAAkB,EAAKrQ,MACzF,GAhCP8Q,KAAKnH,MAAQ2L,EAAI3L,MACjBmH,KAAKxD,MAAQgI,EAAIhI,MACjBwD,KAAKpI,WAAa4M,EAAI5M,WACtBoI,KAAK/C,QAAUuH,EAAIvH,QACnB+C,KAAK9Q,KAAOsV,EAAItV,KAChB8Q,KAAKhQ,KAAOwU,EAAIxU,KAChBgQ,KAAKnU,SAAW2Y,EAAI3Y,SACpBmU,KAAK1T,MAAQkY,EAAIlY,MACjB0T,KAAKkK,UAAY,IAAIpC,GACrB9H,KAAKvP,OAAS,IAAIH,GAClB0P,KAAK3R,UAAY,IAAI4X,GAAUjG,OAxBlB8I,GAiDV2B,gBAAkB,SAAC3e,EAAgC4e,GACtD,IAAM7e,EAAW,IAAIob,GAASnb,GACxBoD,EAAO,IAAIoW,GACXha,EAAQ,CACVuN,MAAO,IAAIkE,GAAJ,YAAc2N,EAAKxS,OAAQrM,GAClC2Q,MAAO,IAAIe,GAAM1R,EAAUqD,GAC3B0I,WAAY,IAAIE,GAAWjM,EAAUqD,GACrC+N,QAAS,IAAIE,GAAQtR,EAAUqD,GAC/BA,KAAMA,EACNc,KAAM,IAAIqV,GAAKxZ,GACfA,SAAUA,EACVS,MAAO,IAAI8T,GAAMvU,IAErB,OAAO,IAAIid,GAAMxd,IA9DJwd,GAiEVhG,KAAO,SAACxX,GACX,IAAM4D,EAAOoW,GAAKxC,KAAKxX,EAAM4D,MAC7B,OAAO,IAAI4Z,GAAM,CACbjQ,MAAOkE,GAAM+F,KAAKxX,EAAMuN,OACxB2D,MAAOe,GAAMuF,KAAKxX,EAAMkR,MAAOtN,GAC/B0I,WAAYE,GAAWgL,KAAKxX,EAAMsM,WAAY1I,GAC9C+N,QAASE,GAAQ2F,KAAKxX,EAAM2R,QAAS/N,GACrCA,KAAMA,EACNc,KAAMqV,GAAKvC,KAAKxX,EAAM0E,MACtBnE,SAAUob,GAASnE,KAAKxX,EAAMO,UAC9BS,MAAOhB,EAAMgB,SCtFlB,IAAMX,GAAeJ,IAAMof,cAAc,CAC5Cjf,OAAQ,IAGNkf,GAAgBjf,GAAakf,SAUdC,G,kDACjB,WAAYzf,GAAwB,IAAD,8BAC/B,cAAMA,IAKV2C,eAAiB,SAACW,GAAD,OAA6B,EAAKoc,SAASpc,IANzB,EASnCb,cAAgB,SAACa,GAAD,OACZ,EAAKX,gBAAe,SAAC1C,GAEjB,OADAqD,EAASrD,GACFA,MAZoB,EAgBnCyC,kBAAoB,SAACY,GAAD,OAChB,EAAKX,gBAAe,SAAC1C,GACjBA,EAAM0E,KAAKC,YAAY4U,UAAW,EAClC,IAAM9U,EAAW+Y,GAAMhG,KAAKxX,GAE5B,OADAqD,EAASrD,GACLA,EAAM0E,KAAKC,YAAY4U,UACvBvZ,EAAM0E,KAAKC,YAAY6U,kBAAkB/U,GAClCzE,GAGJ,SA1BoB,EA8BnC6H,OAAS,WACL,IAAMa,EAAU,CACZ1I,MAAO,EAAKA,MAAM8e,eAAeD,kBACjCnc,eAAgB,EAAKA,eACrBF,cAAe,EAAKA,cACpBC,kBAAmB,EAAKA,kBACxBiM,QAAS,EAAK3O,MAAM2O,SAExB,OACI,eAAC,IAAD,CAAUoC,MAAOpI,EAAjB,UACI,cAAC4W,GAAD,CAAexO,MAAO,CAAE1Q,OAAQ,EAAKL,MAAMK,QAA3C,SACI,cAAC,GAAD,CAAOoO,KAAM,EAAKzO,MAAMQ,SAASI,cAErC,cAAC,GAAD,QAzCR,EAAKX,MAAQwd,GAAM2B,gBAAgBpf,EAAMQ,SAAUR,EAAMqf,MAF1B,E,UADAnf,IAAMyf","file":"static/js/6.44878a2e.chunk.js","sourcesContent":["import { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GamePad from \"../../../common/GamePad\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardGamePad = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isGamePadDriven = state.settings.launchSettings.inputMode == \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n\n    const switchToGamePad = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight(switchToGamePad)}\n            onUp={() => props.onUp(switchToGamePad)}\n            onDown={() => props.onDown(switchToGamePad)}\n            onAction={() => props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToGamePad)}\n            onMenu={() => props.onMenu(switchToGamePad)}\n        />\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"../../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GlobalContext from \"../../Context\";\nimport Keyboard from \"../../../common/Keyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardKeyboard = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isKeyboardDriven = state.settings.launchSettings.inputMode === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import { BoardContext } from \"../BoardWrap\";\nimport BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\ntype _mod = (state: Model) => void;\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const isPaused = !!paused.state.paused;\n\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const handlers = {\n        onLeft: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveLeft(before);\n            }),\n\n        onRight: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveRight(before);\n            }),\n\n        onUp: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveUp(before);\n            }),\n\n        onDown: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveDown(before);\n            }),\n\n        onAction: (modifier: _mod) =>\n            updateGameContext((ctx) => {\n                modifier(ctx);\n                const handler = state?.navigator?.pressCurrent();\n                handler && handler(ctx);\n            }),\n\n        onCancel: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n            }),\n\n        onPause: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n\n        onHint: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n                if (isVisible(state) && !isDisabled(state)) {\n                    state.settings.enableHint();\n                }\n            });\n        },\n\n        onUndo: () => {\n            replaceContext((_state) => {\n                const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n                if (previous) {\n                    previous.game.rating.penalize(_state.game.rating);\n                    return previous;\n                }\n                return null;\n            });\n        },\n        onMenu: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n    };\n\n    return isPaused ? null : (\n        <>\n            <BoardKeyboard {...handlers} />\n            <BoardGamePad {...handlers} />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import GlobalContext from \"../Context\";\nimport React from \"react\";\n\nconst Dealer: () => any = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const timeouts: any[] = [];\n\n    if (state.settings.launchSettings.quickDeal) {\n        if (state && state.dealer && !state.dealer.isDealt) {\n            replaceContext(state.dealer.dealAll());\n        }\n    } else {\n        const deal = (dealt: number) => {\n            timeouts.push(\n                setTimeout(() => {\n                    if (state && state.dealer && !state.dealer.isDealt) {\n                        replaceContext(state.dealer.dealOne(dealt, deal));\n                    }\n                }, 35)\n            );\n        };\n\n        React.useEffect(() => {\n            deal(state.dealer.dealt);\n            return () =>\n                timeouts.forEach((timeout) => {\n                    clearTimeout(timeout);\n                });\n        }, []);\n        React.useEffect(() => {}, [state.dealer.isDealt]);\n    }\n    return null;\n};\nexport default Dealer;\n","const getStackLabel = (source: string) => {\n    const names = [0, 1, 2, 3, 4, 5, 6].map((id) => \" stack \" + (id + 1));\n    let label = \"\";\n    const split = source.split(\"-\");\n    label += split[0];\n    if (split.length > 1) {\n        label += names[parseInt(split[1])];\n    }\n    return label;\n};\n\nexport default getStackLabel;\n","import CardModel from \"../../Model/Deck/Card\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport getStackLabel from \"./StackDescription\";\nimport { useDrag } from \"react-dnd\";\n\ntype CardProps = {\n    index: number;\n    models: CardModel[];\n    isSuggested?: (index: number) => boolean | undefined;\n    isSelected?: (index: number) => boolean;\n    blink?: number;\n    zIndex?: number;\n    offsetTop?: (index: number, models: CardModel[]) => number;\n    offsetLeft?: (index: number) => number;\n    isDrag?: boolean;\n};\n\nconst Card = (props: CardProps) => {\n    const ReRender = () => (\n        <Card\n            {...{\n                ...props,\n                models: props.models.slice(props.index, props.models.length),\n                offsetLeft: () => 0,\n                isSelected: () => false,\n                index: 0,\n                isDrag: isDrag,\n            }}\n        />\n    );\n    if (!props.models.length) {\n        return null;\n    }\n    const model = props.models[props.index];\n    ReRender.displayName = \"ReRender\";\n    //@todo for proper drag & drop of stacks, we need each card to render the following ones\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const pause = React.useContext(PauseContext);\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const isFocused = state.focus.hasCard(model);\n    const [isDrag, setDrag] = React.useState<boolean>(!!props.isDrag);\n    const _isDrag = props.isDrag || isDrag;\n    const [{ opacity }, dragRef, preview] = useDrag({\n        item: { type: \"card\", text: \"some text\", render: ReRender()},\n        collect: (monitor) => {\n            return { opacity: monitor.isDragging() ? 1 : 1 };\n        },\n        canDrag: () => model.canClick() && !model.isHidden && (state.hand.currentCard() == null || model.equals(state.hand.currentCard())),\n        begin: (monitor) => {\n            console.log(monitor);\n            setDrag(true);\n            if (model.onClick && (!props.isSelected || !props.isSelected(props.index))) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n        end: (_item, monitor) => {\n            setDrag(false);\n            if (!monitor.didDrop()) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n    });\n\n    React.useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, []);\n\n    const getRef = () => (model.canClick() ? dragRef : inputEl);\n    React.useEffect(() => {\n        if (isFocused && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n    }, [isFocused, state.focus.card]);\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        let ele = e.target;\n\n        while (ele && !ele.className.includes(\"card-base\")) {\n            ele = ele.offsetParent;\n        }\n\n        const rect = ele.getBoundingClientRect();\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - ele.ownerDocument.defaultView.pageXOffset,\n                y: e.clientY - ele.ownerDocument.defaultView.pageYOffset,\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n        const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n        //@todo A11Y allow keyboard actions in singleplayer\n        if (model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.inputMode = \"mouse\";\n                }\n            });\n        }\n    };\n\n    const getClassName = () => {\n        const hasSuggestion = (props.isSuggested && props.isSuggested(props.index)) || model.suggestion;\n        let className = `card card-base suit-${model.type.icon}`;\n        className +=\n            (!props.isSelected || !props.isSelected(props.index)) && !isFocused && !hasSuggestion ? ` card-stack-${model.source}` : \"\";\n        className += !_isDrag && props.isSelected && props.isSelected(props.index) && !_isDrag ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += model.canClick() ? \" clickable\" : \"\";\n        //@todo onhover, trigger highlight of suggested target card/stack (preview what happens if picked up)\n        className += hasSuggestion && !isFocused ? \" card-suggested\" : \"\";\n        className += isFocused ? \" card-focused\" : \"\";\n        return className;\n    };\n\n    const getCardStyle = () => {\n        const style = {\n            opacity: _isDrag ? 0 : opacity,\n            zIndex: (props.zIndex ? props.zIndex : (props.offsetTop && props.offsetTop(props.index, props.models) > 0 ? 1 : 0) * 20) + 1,\n            top: props.offsetTop ? props.offsetTop(props.index, props.models) / 15 + \"em\" : 0,\n            ...model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft(props.index) * 2 + \"em\";\n        }\n\n        if (!model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    };\n\n    const getStackbaseStyle: () => React.CSSProperties = () => {\n        if (!model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    };\n\n    let label = getStackLabel(model.source);\n    label += \": \";\n\n    label += model.isHidden ? \"hidden card\" : model.type.icon + model.face;\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n\n    return (\n        <>\n            <div style={getStackbaseStyle()} className=\"stack-base\">\n                <button\n                    onFocus={() => {\n                        // updateContext((ctx) => {\n                        //     ctx.navigator.update(model.source, props.model);\n                        // });\n                    }}\n                    onBlur={() => {\n                        //updateContext((ctx) => ctx.focus.unsetCard(props.model));\n                    }}\n                    style={getCardStyle()}\n                    // ref={inputEl}\n                    ref={getRef()}\n                    className={getClassName()}\n                    onClick={onClick}\n                    disabled={!model.canClick() || pause.state.paused}\n                    tabIndex={model.canClick() ? 0 : -1}\n                    aria-label={label}\n                    title={label}\n                >\n                    <div className=\"card-content\">\n                        {model.isHidden || pause.state.paused ? (\n                            <div className=\"card-back\">&nbsp;</div>\n                        ) : (\n                            <div className=\"card-grid-container\">\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-left\">{model.face}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div className=\"mainface\">\n                                    <div className=\"align-center\">{model.face} </div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-right\">{model.face}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </button>\n            </div>\n            {props.models.length - 1 > props.index && <Card {...props} isDrag={_isDrag} index={props.index + 1} />}\n        </>\n    );\n};\n\nexport default Card;\n","import GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\n\nconst StackBase = (props: { model: IStack; children?: any | null }) => {\n    let classname = \"card-base socket\";\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    React.useEffect(() => {\n        if (state.focus.hasStack(props.model.source) && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            const current = inputEl && inputEl.current ? inputEl.current : null;\n            current && current.focus();\n        }\n    });\n    if (!props.model.stack.length) {\n        if (props.model.blinkFor) {\n            classname += \" socket-blink\";\n        } else if (state.focus.hasStack(props.model.source)) {\n            classname += \" socket-focused\";\n        } else {\n            classname += \" socket-empty\";\n        }\n    } else {\n        classname += \" socket-full\";\n    }\n\n    if (props.model.suggestion && !props.model.stack.length) {\n        classname += \" socket-suggested\";\n    }\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": empty socket\";\n\n    return (\n        <button\n            onFocus={() => {\n                // updateContext((ctx) => {\n                //     ctx.navigator.update(props.model.parent);\n                // });\n            }}\n            onBlur={() => {\n                // updateContext((ctx) => ctx.focus.unsetStack(props.model.parent));\n            }}\n            ref={inputEl}\n            className={classname}\n            onClick={onClick}\n            disabled={!!props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n            aria-label={label}\n            title={label}\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\n\ntype _selector = (model: Model) => IStack;\n\nconst useBlinkEffect = (selector: _selector) => {\n    const { updateContext, state } = React.useContext(GlobalContext);\n    if (!state) return;\n    const model = selector(state);\n    let timeout: any = null;\n    React.useEffect(() => {\n        if (state && selector(state).blinkFor) {\n            timeout = setTimeout(\n                () =>\n                    updateContext((state: Model) => {\n                        selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [state, model.blinkFor]);\n};\n\nexport default useBlinkEffect;\n","import Card from \"./Card\";\nimport { FoundationStack } from \"../../Model/Game/Foundation\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\ntype FoundationProps = { index: number; model: FoundationStack };\n\nconst FoundationStacks = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    return (\n        <>\n            {state.foundation.stacks.map((foundation, index) => (\n                <Foundation key={index} model={foundation} index={index} />\n            ))}\n        </>\n    );\n};\n\nexport default FoundationStacks;\n\nconst Foundation = (props: FoundationProps) => {\n    useBlinkEffect((model) => model.foundation.stacks[props.index]);\n    const { updateGameContext } = React.useContext(GlobalContext);\n    const model = props.model;\n    const [, drop] = useDrop({\n        accept: \"card\",\n        drop: () => {\n            console.log(\"dropping\", drop);\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n            props.model.clickEmpty({ isKeyboard: false });\n        },\n    });\n    const { state } = React.useContext(GlobalContext);\n    const cards = state?.hand.source == model.source ? [...model.stack, ...state.hand.stack] : [...model.stack];\n    return (\n        <div className=\"board-field\" key={props.index} ref={drop}>\n            <StackBase model={model}>\n                <div className={\"align-center foundation-base suit-\" + model.icon}>{model.icon}</div>\n            </StackBase>\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={model.blinkFor}\n                isSuggested={(index) => model.suggestion && model.stack.length - 1 == index}\n                isSelected={(index) => index > model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst Clock = () => {\n    const { state, getElapsed } = React.useContext(PauseContext);\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (state.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [state.started, state.paused]);\n\n    return !state.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Hearts = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode == \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst Hint = () => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Points = () => {\n    const { state } = React.useContext(GlobalContext);\n\n    return (\n        <>\n            <div className=\"icon-container\">🏆</div> {state?.game.rating.points}\n        </>\n    );\n};\n\nexport default Points;\n","import { BoardContext } from \"../../Game/BoardWrap\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst ToggleMenu = () => {\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n\n    return (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Undo = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"../../Style/Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import \"../Style/Menu.scss\";\n\nimport { NavigationContext, NavigationProvider, NavigationState } from \"./StartScreen/Context\";\nimport { Universal, getKeyboardLayout } from \"../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../Game/BoardWrap\";\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\n\nconst _Menu = () => {\n    const [navigation, setNavigation] = React.useState<NavigationState>({\n        menu: {\n            x: 0,\n            y: 0,\n        },\n        screen: {\n            x: 0,\n            y: 0,\n        },\n        focus: \"menu\",\n        mainMenu: \"\",\n        screeen: \"\",\n    });\n    const navigationContext = {\n        navigation,\n        setNavigation,\n    };\n    return (\n        <NavigationProvider value={navigationContext}>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too if consented and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = React.useContext(NavigationContext);\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n    if (!state) {\n        return null;\n    }\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining == 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining == 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) [(announcement = \"The game is not paused.\")];\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle label=\"😴\" />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle label=\"😴\" />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon=\"▶️\"\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                        />\n                        <MenuButton\n                            icon=\"🌪️\"\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            toggled={navigation.mainMenu == \"entropy\"}\n                        >\n                            <MenuButton\n                                icon=\"🌪️\"\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                            />\n                            <MenuButton\n                                icon=\"🌬️\"\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon=\"♻️\"\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon=\"🗑️\" title=\"Quit Game\" onClick={() => restart()} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import React from \"react\";\n\nconst usePrevious = <T>(value: T) => {\n    const ref = React.useRef<T>();\n    React.useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n","import Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport usePrevious from \"./usePrevious\";\n\nconst Renderer = (props: { length: number; paused: boolean; started: number }) => {\n    const context = React.useContext(GlobalContext);\n\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout: any = null;\n        if (\n            context &&\n            context.state &&\n            context.state.settings.launchSettings.speed &&\n            started &&\n            !paused &&\n            previous &&\n            (previous?.length != length || previous?.started != started || previous?.paused != paused)\n        ) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (\n                        length == state.stock.stack.length &&\n                        state.stock.passes > 0 &&\n                        (state.stock.stack.length || state.waste.stack.length)\n                    ) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => clearTimeout(timeout);\n    }, [length, paused, started]);\n\n    if (!context || !context.state) return null;\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            <Card\n                index={0} \n                key={0}\n                models={context.state.stock.stack}\n                offsetTop={(index) => (index / 2) * -1}\n                zIndex={0}\n                blink={context?.state?.stock.blinkFor}\n                isSuggested={(index) => context?.state?.stock.suggestion && index == context.state.stock.stack.length - 1}\n            />\n        </div>\n    );\n};\n\nconst Stock = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    useBlinkEffect((model) => model.stock);\n    const pause = React.useContext(PauseContext);\n    const { paused, started } = pause.state;\n    return <Renderer length={state.stock.stack.length} paused={paused} started={started} />;\n};\n\nexport default Stock;\n","import TableauModel, { TableauStack } from \"../../Model/Game/Tableau\";\n\nimport Card from \"./Card\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\ntype TableauProps = { index: number; model: TableauStack; parent: TableauModel };\n\nconst TableauStacks = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    return (\n        <>\n            {state.tableau.stacks.map((tableau, index) => (\n                <Tableau key={index} index={index} model={tableau} parent={state.tableau} />\n            ))}\n        </>\n    );\n};\nexport default TableauStacks;\n\nconst Tableau = (props: TableauProps) => {\n    useBlinkEffect((s) => s.tableau.stacks[props.index]);\n    const { updateGameContext } = React.useContext(GlobalContext);\n    const [, drop] = useDrop({\n        accept: \"card\",\n        drop: () => {\n            console.log(\"dropping\", drop);\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n            props.model.clickEmpty({ isKeyboard: false });\n        },\n    });\n\n    const { state } = React.useContext(GlobalContext);\n    const cards = state?.hand.source == props.model.source ? [...props.model.stack, ...state.hand.stack] : [...props.model.stack];\n\n    let offset = 1;\n    const getOffset = (index: number, cards: CardModel[]) => {\n        for (let i = 0; i <= index; i++) {\n            if (cards[i] && !cards[i].isHidden) {\n                offset = i * 12 + (index - i) * 24;\n                return offset;\n            }\n        }\n        offset = index * 12;\n        return offset;\n    };\n\n    return (\n        <div className=\"board-field\" ref={drop}>\n            <StackBase model={props.model} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={props.model.blinkFor}\n                isSuggested={(index) => props.model.suggestion && props.model.stack.length - 1 == index}\n                offsetTop={(index, models) => getOffset(index, models)}\n                isSelected={(index) => index > props.model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\n\nconst Waste = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    useBlinkEffect((model) => model.waste);\n    const getOffset = (index: number) => {\n        if (state.settings.launchSettings.drawMode == \"single\") {\n            return 0;\n        }\n        const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n        let additionalOffset = 2;\n        if (length == 2) {\n            additionalOffset = 1;\n        }\n\n        if (length == 1) {\n            additionalOffset = 0;\n        }\n\n        return ((index - length - 2) % 3) + additionalOffset;\n    };\n\n    const cards = state?.hand.source == state.waste.source ? [...state.waste.stack, ...state.hand.stack] : [...state.waste.stack];\n\n    return (\n        <div className=\"board-field\">\n            <StackBase model={state.waste} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                offsetTop={(index) => (index / 2) * -1}\n                offsetLeft={(index) => getOffset(index)}\n                blink={state.waste.blinkFor}\n                isSuggested={(index) => state.waste.suggestion && index == state.waste.stack.length - 1}\n                isSelected={(index) => index > state.waste.stack.length - 1}\n            />\n        </div>\n    );\n};\nexport default Waste;\n","import \"../Style/Board.scss\";\n\nimport BoardNavigator from \"./Navigation/BoardNavigator\";\nimport Dealer from \"./Dealer\";\nimport { DndProvider } from \"react-dnd-multi-backend\";\nimport FoundationStacks from \"./Foundation\";\nimport HTML5toTouch from \"react-dnd-multi-backend/dist/esm/HTML5toTouch\";\nimport Header from \"../UI/Header/Header\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport TableauStacks from \"./Tableau\";\nimport Waste from \"./Waste\";\nimport { usePreview } from \"react-dnd-preview\";\n\nconst Preview = (props: { reff: any }) => {\n    // eslint-disable-next-line no-unused-vars\n    const { display, _itemType, item, style } = usePreview();\n    if (!display) {\n        return null;\n    }\n    const rect = props.reff.getBoundingClientRect();\n    return (\n        <div\n            style={{\n                ...style,\n                position: \"relative\",\n                width: \"100%\",\n                left: rect.left * -1,\n                top: rect.top * -1,\n                zIndex: 2000,\n                opacity: 1,\n            }}\n        >\n            {item.render}\n        </div>\n    );\n};\ntype BoardProps = { mode: string };\nconst Board = (props: BoardProps) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n    return (\n        <DndProvider options={HTML5toTouch}>\n            <Menu />\n            <Header mode={props.mode} />\n            <div className={\"board-jail \" + props.mode}>\n                <div className={\"board-grid-container \" + props.mode}>\n                    <Stock />\n                    <Waste />\n                    <div className=\"board-field spacer\" ref={ref}>\n                        {ref.current && <Preview reff={ref.current} />}\n                    </div>\n                    <FoundationStacks />\n                    <TableauStacks />\n                </div>\n            </div>\n            <Dealer />\n            <BoardNavigator />\n        </DndProvider>\n    );\n};\n\nexport default Board;\n","import \"../Style/Screens.scss\";\n\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\n\nconst EndScreen = () => {\n    const { state, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    //@todo show launch settings (draw mode, recycling mode)\n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover();\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: any) => (state: Model) => {\n        if (dealt != state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n        if (state.dealer.isDealt) {\n            state.game.started = Date.now();\n        }\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt != state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        state.game.started = Date.now();\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                if (newCard) {\n                    newCard.source = tableau.stacks[i].source;\n                    if (stack.length == tableau.stacks.length - 1 - i) {\n                        newCard.isHidden = false;\n                    }\n                    tableau.deal(newCard, i);\n                    this.dealt++;\n                    this.dealingAt++;\n                    if (this.dealingAt == tableau.stacks.length) {\n                        this.dealingAt = 0;\n                    }\n                    this.isDealt = false;\n                }\n                return;\n            } else {\n                const isFirst = this.dealingAt == 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n    }\n\n    validSettings = () => this.settings.launchSettings.inputMode !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack == stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && this.card && card && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack == stack;\n}\n","import Card from \"../Deck/Card\";\n\nexport default class BasicStack {\n    source: string;\n    constructor(source: string) {\n        this.source = source;\n    }\n    stack: Card[] = [];\n    getTop: () => Card | null = () => (this.stack && this.stack.length && this.stack[this.stack.length - 1]) || null;\n    suggestion = false;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n}\n","import BasicStack from \"./BasicStack\";\nimport Hand from \"./Hand\";\n\nexport default class HandHoldingStack extends BasicStack {\n    hand: Hand;\n    constructor(source: string, hand: Hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source == this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n    blinkFor = 0;\n    unblink = () => {};\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport Suits from \"../Deck/Suits\";\nimport { XY } from \"../../View/UI/XY\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nexport class FoundationStack extends HandHoldingStack implements IStack {\n    setOnClick: () => void = () => {};\n    acceptedCards: string[] = [];\n    usedCards: any[] = [];\n    icon: string = \"\";\n    color: string = \"\";\n    blinkFor: number = 0;\n    clickEmpty: (p: any) => any = () => {};\n}\nexport default class Foundation {\n    settings: Settings;\n    hand: Hand;\n    stacks: FoundationStack[];\n    blinkFor: number;\n    unblink: () => void;\n    constructor(settings: Settings, hand: Hand) {\n        this.settings = settings;\n        this.hand = hand;\n        const template = (index: number) => {\n            const s = new FoundationStack(\"foundation-\" + index, hand);\n            s.stack = [];\n            s.acceptedCards = [...getFoundationOrder()];\n            s.usedCards = [];\n            s.icon = \"\";\n            s.color = \"\";\n            s.blinkFor = 0;\n            return s;\n        };\n        const stacks = Object.keys(Suits)\n            .map((key: string) => Suits[key])\n            .map((suit, index) => ({ ...template(index), ...suit }));\n        this.stacks = [...stacks];\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, index: number) => (s:any) => void) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                card.onClick = (p: XY) => onClick({ ...card }, p, index);\n                card.canClick = () => sindex == stack.stack.length - 1;\n            });\n            this.hand.setOnClick(stack);\n        });\n    };\n\n    getCurrentAccepted = (index: number) => {\n        const currentFoundation = this.stacks[index].acceptedCards;\n        return currentFoundation[currentFoundation.length - 1];\n    };\n\n    wouldAcceptHand = (index: number) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    accepts = (index: number, card: Card | null) => {\n        if (!card) return false;\n        const currentAccepted = this.getCurrentAccepted(index);\n        return this.stacks[index].icon == card.type.icon && currentAccepted == card.face;\n    };\n\n    add = (index: number, cards: Card[]) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index: number, card: Card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return (card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop()) || null;\n    };\n\n    getPreviousUsed = (index: number) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => f.stack.length).reduce((a, b) => a + b, 0);\n\n    getTop = (index: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig: Foundation, hand: Hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new FoundationStack(origStack.source, hand);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src);\n            this.tryDetectEnd(state);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card | null, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.face) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    //@todo move this to a generic place, also detect failure\n    tryDetectEnd(state: Model) {\n        const nrofCards = state.foundation.countCards();\n        if (nrofCards === 52) {\n            state.game.isEnded = true;\n            state.game.end = Date.now();\n        }\n    }\n}\n","import Settings from \"./Settings\";\n\nexport default class Rating {\n    settings: Settings;\n    points: number;\n    multiplicator: number;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode == \"single\" && this.settings.launchSettings.recyclingMode == \"infinite\") {\n            if (this.points > 0) {\n                if (this.points < 100) {\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                }\n            }\n            console.debug(\"RATING: subtract (max) 100 points for RECYCLE\");\n        }\n    };\n\n    registerUncover = () => {\n        this.registerHint(this.settings.disableHint());\n        this.points += 5;\n        console.debug(\"RATING: add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on: boolean) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            console.debug(\"RATING: subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other: Rating) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            console.debug(`RATING: applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done: boolean) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            console.debug(`RATING: applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move: { source: string; target: string }) {\n        const isTableau = (obj: string) => obj.substr(0, 7) == \"tableau\";\n        const isFoundation = (obj: string) => obj.substr(0, 10) == \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                console.debug(\"RATING: add 10 points for MOVE tableau -> foundation\");\n                return 10;\n            }\n        } else if (move.source == \"waste\") {\n            if (isFoundation(move.target)) {\n                console.debug(\"RATING: add 10 points for MOVE waste -> foundation\");\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                console.debug(\"RATING: add 5 points for MOVE waste -> tableau\");\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                console.debug(\"RATING: subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start: number, end: number) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    };\n\n    static copy = (orig: Rating) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Model from \"../Model\";\n\nexport default class TimeMachine {\n    previousStates: any[];\n    memorable: boolean;\n    modified: boolean;\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source == target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state: any) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id: number, current: any) => {\n        const isRequested = this.previousStates.length - 1 == id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        if (on) {\n            this.modified = true;\n            this.memorable = false;\n        }\n    }\n\n    stackEquals = (a: IStack, b: IStack) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden == b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a: { stacks: IStack[] }, b: { stacks: IStack[] }) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a: Model, b: Model) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig: TimeMachine) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Rating from \"./Rating\";\nimport Settings from \"./Settings\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    settings: Settings;\n    rating: Rating;\n    timemachine: TimeMachine;\n    started: number;\n    isEnded: boolean;\n    end: number;\n    paused: any;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n        //@todo move to context:\n        this.started = 0;\n        this.isEnded = false;\n        this.end = 0;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.rating.registerMove(target, source);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = () => {\n        this.rating.registerUncover();\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig: Game) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        copy.paused = orig.paused;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    filter: (stack: any[]) => Card[] = (stack) => {\n        return stack.filter((c) => c);\n    };\n\n    pickUp = (stack: (Card | null)[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = this.filter(stack).map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source == model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.face == \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source == this.source) || null;\n\n    isFromWaste = () => this.source && this.source == \"waste\";\n\n    isFromFoundation = (index: number) => this.source && this.source == `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source == `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) == \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/IStack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: (IStack | undefined)[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source == pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x == -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x == 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        const current = this.current();\n        if (current == undefined) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = current.getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y == 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const current = this.current();\n        const last: number = current ? current.getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (!current) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current()?.source || \"\");\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = () => {\n        if (this.model.focus.card && this.model.focus.card.canClick()) {\n            return this.model.focus.card.onClick({ isKeyboard: true });\n        } else if (this.model.focus.stack) {\n            return this.current()?.clickEmpty({ isKeyboard: true });\n        } else {\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./BasicStack\";\nimport Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Stock extends BasicStack implements IStack {\n    settings: Settings;\n    recyclings: number;\n    passes: number;\n    blinkFor: number;\n    unblink: () => void;\n    clickEmpty: (p: any) => (s: any) => void;\n    constructor(stack: Card[], settings: Settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        this.clickEmpty = () => () => {};\n        if (this.settings.launchSettings.recyclingMode == \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode == \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: XY) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n    };\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode == \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode == \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste: Card[]) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card: Card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card: Card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result: Card[] = [];\n        if (this.settings.launchSettings.drawMode == \"single\") {\n            const top = this.stack.pop();\n            if (top) result = [top];\n        }\n        if (this.settings.launchSettings.drawMode == \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length == 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig: Stock) => {\n        const copy = new Stock([], orig.settings);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\");\n    };\n\n    recycleWaste = (state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\")) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key == SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key == SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length == 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length == 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].face ==\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].face &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (this.getPutdownSuggestions(tableauState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nexport class TableauStack extends HandHoldingStack implements IStack {\n    //@todo move to IStack, make boolean\n    blinkFor = 0;\n    id = 0;\n    // eslint-disable-next-line no-unused-vars\n    onClick = (a: any) => (s: any) => {};\n    // eslint-disable-next-line no-unused-vars\n    clickEmpty = (a: any) => (s: any) => {};\n    setOnClick = () => {};\n}\nexport default class Tableau {\n    stacks: TableauStack[];\n    settings: Settings;\n    hand: Hand;\n\n    constructor(settings: Settings, hand: Hand) {\n        const ids = [0, 1, 2, 3, 4, 5, 6];\n        this.hand = hand;\n        this.stacks = ids.map((id) => {\n            const s = new TableauStack(\"tableau-\" + id, hand);\n            s.stack = [];\n            s.blinkFor = 0;\n            s.id = id;\n            return s;\n        });\n        this.settings = settings;\n    }\n\n    setOnClick = (\n        onClick: (a: any, b: any, index: number) => (s: any) => void,\n        onClickhidden: (a: any, b: any, index: number) => (s: any) => void,\n        hand: Hand\n    ) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p: any) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                const click = card.isHidden && sindex == stack.stack.length - 1 ? onClickhidden : onClick;\n                card.onClick = (p: any) => click({ ...card }, p, index);\n                card.canClick = () => !card.isHidden || this.canUncover(index, card) || false;\n            });\n            hand.setOnClick(stack);\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        const top = this.getTop(index);\n        if (!top) {\n            return current && current.face === \"K\";\n        }\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = current ? range.indexOf(current.face) : 0;\n        const topIndex = range.indexOf(top.face);\n        return currentIndex + 1 == topIndex && current?.type.color !== top.type.color && top.face !== \"A\";\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        return top.isHidden && card && card.equals(this.getTop(index));\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy != 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, cards: Card[]) => {\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number) => {\n        card.source = this.stacks[index].source;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1 - (offset || 0)];\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map((stack, index) => {\n            const s = new TableauStack(stack.source, hand);\n            s.id = index;\n            s.stack = Card.copyAll(stack.stack);\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Waste extends HandHoldingStack {\n    settings: Settings;\n    blinkFor: number;\n    unblink: () => void;\n    clickEmpty: (p: any) => (s: any) => void;\n    constructor(settings: Settings, hand: Hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        this.clickEmpty = () => () => {};\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: XY) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card: Card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards: Card[]) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card: Card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    canAdd = (card: Card | null) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card: Card) => (card && card.equals(this.getTop()) && this.stack.pop()) || null;\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig: Waste, hand: Hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n    }\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()), this.hand);\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings),\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n        });\n    };\n}\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../Context\";\nimport React from \"react\";\n\nexport const BoardContext = React.createContext({\n    player: 0,\n});\n\nconst BoardProvider = BoardContext.Provider;\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\n//We use class component here because setState allows partial updates \nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                return state;\n            }\n\n            return null;\n        });\n\n    //on every render, we refresh the click handlers in the model and the suggestions\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider value={{ player: this.props.player }}>\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n"],"sourceRoot":""}