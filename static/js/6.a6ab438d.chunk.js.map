{"version":3,"sources":["View/Game/Navigation/BoardGamePad.tsx","View/Game/Navigation/BoardKeyboard.tsx","View/Game/Navigation/BoardNavigator.tsx","View/Game/Dealer.tsx","View/Game/StackDescription.ts","View/Game/Card.tsx","View/Game/StackBase.tsx","View/Game/useBlinkEffect.ts","View/Game/Foundation.tsx","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/BasicStack.ts","Model/Game/HandHoldingStack.ts","Model/Game/Foundation.ts","Model/Business/Foundation.ts","Model/Game/Rating.ts","Model/Game/TimeMachine.ts","Model/Game/Game.ts","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.ts","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/Tableau.ts","Model/Game/Waste.ts","Model/Model.ts","View/Game/Judge.tsx","View/UI/Menu.tsx","View/Game/usePrevious.ts","View/Game/Stock.tsx","View/Game/Tableau.tsx","View/Game/Waste.tsx","View/Game/Board.tsx","View/UI/EndScreen.js","View/Game/BoardWrap.tsx"],"names":["BoardGamePad","props","state","React","useContext","GlobalContext","player","BoardContext","isGamePadDriven","settings","launchSettings","inputMode","isSinglePlayer","boardMode","GameModes","SINGLEPLAYER","switchToGamePad","ctx","focus","isKeyBoard","GamePad","gamepadIndex","players","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","layout","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","BoardNavigator","updateContext","updateGameContext","replaceContext","paused","PauseContext","before","x","navigator","currentIndex","y","z","beforeFocused","card","stack","isPaused","handlers","modifier","moveLeft","moveRight","moveUp","moveDown","handler","pressCurrent","finishNav","hand","length","onClick","isKeyboard","togglePause","suggestionMode","supportsHints","isTemporary","isVisible","isDisabled","enableHint","_state","previous","game","timemachine","popPreviousState","previousStates","rating","penalize","Dealer","timeouts","quickDeal","dealer","isDealt","dealAll","deal","dealt","push","setTimeout","dealOne","useEffect","forEach","timeout","clearTimeout","getStackLabel","source","names","map","id","label","split","parseInt","Card","ReRender","models","slice","index","offsetLeft","isSelected","isDrag","model","displayName","pause","inputEl","useRef","isFocused","hasCard","useState","setDrag","_isDrag","useDrag","item","type","render","collect","monitor","opacity","isDragging","canDrag","canClick","isHidden","currentCard","equals","begin","context","end","_item","didDrop","dragRef","preview","getEmptyImage","captureDraggingState","current","icon","face","style","pointerEvents","className","onFocus","onBlur","zIndex","offsetTop","top","entropyStyle","left","getCardStyle","ref","hasSuggestion","isSuggested","suggestion","blink","accepting","getClassName","e","preventDefault","clientX","clientY","ele","target","includes","offsetParent","rect","getBoundingClientRect","position","click","ownerDocument","defaultView","pageXOffset","pageYOffset","element","disabled","tabIndex","aria-label","title","FireworkWatcher","origin","substring","foundationIndex","tableauIndex","success","FireWork","clearSuccess","token","defaults","ticks","fire","particleRatio","opts","confetti","Object","assign","particleCount","Math","floor","spread","startVelocity","decay","scalar","StackBase","classname","hasStack","blinkFor","clickEmpty","children","useBlinkEffect","selector","unblink","FoundationStacks","foundation","stacks","Foundation","useDrop","accept","canDrop","accepts","drop","cards","Clock","getElapsed","elapsed","setElapsed","interval","setInterval","started","clearInterval","Hearts","recyclingMode","stock","passes","createString","Array","from","keys","join","getHearts","Hint","Points","points","ToggleMenu","Undo","pow","multiplicator","Header","mode","Blinker","startBlink","registerBlink","s","stopBlink","Tableau","tableau","dispatchPutDown","wouldAcceptHand","src","putDownHand","registerMove","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","isHoldingCard","uncover","registerUncover","dealingAt","callback","Date","now","i","newCard","popOne","isFirst","this","Dispatcher","clickHandler","getHandler","Focus","keyboard","validSettings","setCard","unsetCard","unsetStack","setStack","BasicStack","getTop","getClickable","filter","HandHoldingStack","getHandContent","FoundationStack","setOnClick","acceptedCards","usedCards","color","getCurrentAccepted","currentAccepted","p","sindex","hasMoreThanOneCard","add","putDown","causeEntropy","min","interactionEntropy","pop","remove","getPreviousUsed","countCards","f","reduce","a","b","setEntropy","lvl","Suits","key","suit","getFoundationOrder","template","copy","orig","origStack","copyAll","tryDetectEnd","_card","isEnded","Rating","ratings","hasNotifications","r","notified","getNextNotification","setNotified","n","applyRating","text","console","debug","registerHint","disableHint","currentMove","rateMove","registerRecycle","drawMode","diff","other","undoPenalty","penalty","done","hintPenalty","getTimePenalty","start","secondsToFinish","trunc","getBonusPoints","round","getTotal","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","memorable","modified","pushPreviousState","modelEquals","isRequested","popPrevious","stackEquals","every","stacksEqual","waste","Game","Hand","c","splice","_onClick","isHoldingKing","isFromCurrentSource","isFromWaste","isFromFoundation","isFromTableau","isFromAnyTableau","getTableauIndex","Navigator","rows","getZindex","elem","targets","update","pos","row","j","valid","direction","undefined","clickable","toggleRow","pickLast","last","Settings","baseEntropy","suggestionModes","setSuggestionMode","sm","SuggestionModes","get","getHintMode","next","allSuggestionModes","Stock","recyclings","recycle","reverse","setCardProperties","isOnTop","popTop","result","_position","moveToWaste","recycleWaste","addAll","canRecycle","Waste","Suggestions","evaluateOptions","disableAllSuggestions","NONE","getUncoverOptions","getPutdownSuggestions","getPickupOptions","FULL","SCORED","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","range","getTableauOrder","indexOf","onClickhidden","canUncover","getStack","canPutDown","getCard","stackEntropy","entropy","concat","offset","canAdd","suggestor","setToken","withSuggestions","_hasSuggestion","some","hasSuggestions","canAutoSolve","clear","_c","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","AutoSolve","solving","setSolving","canAutosolve","Solver","suggestedFoundations","suggestedFoundation","suggestedTableaus","suggestedCards","suggestedCard","useEvaluation","falseResults","setFalseResults","Evaluator","full","resetFull","REGULAR","regular","resetRegular","noRegularSince","setNoRegularSince","noFullSince","setNoFullSince","log","toast","error","closeToast","alert","autoClose","closeButton","RatingToast","RatingToastProps","hideProgressBar","RatingNotifier","notification","warn","Judge","Menu","restart","NavigationContext","navigation","setNavigation","switchToMenu","menu","screeen","mainMenu","showMenu","remaining","allowed","pauses","announcement","keyboardLayout","pausedBy","MenuTitle","MenuTree","MenuButton","val","toggleMainMenu","toggled","EntropyLevels","skip","_Menu","screen","navigationContext","value","usePrevious","Renderer","speed","TableauStacks","parent","setAccepting","getOffset","_drop","additionalOffset","Preview","usePreview","display","_itemType","reff","width","Board","options","HTML5toTouch","closeOnClick","newestOnTop","limit","pauseOnFocusLoss","draggable","transition","Slide","EndScreen","createContext","BoardProvider","Provider","BoardWrap","setState","random","Component"],"mappings":"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","file":"static/js/6.a6ab438d.chunk.js","sourcesContent":["import { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GamePad from \"../../../common/GamePad\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardGamePad = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isGamePadDriven = state.settings.launchSettings.inputMode == \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n\n    const switchToGamePad = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight(switchToGamePad)}\n            onUp={() => props.onUp(switchToGamePad)}\n            onDown={() => props.onDown(switchToGamePad)}\n            onAction={() => props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToGamePad)}\n            onMenu={() => props.onMenu(switchToGamePad)}\n        />\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"../../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GlobalContext from \"../../Context\";\nimport Keyboard from \"../../../common/Keyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardKeyboard = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isKeyboardDriven = state.settings.launchSettings.inputMode === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import { BoardContext } from \"../BoardWrap\";\nimport BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\ntype _mod = (state: Model) => void;\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const beforeFocused = { card: state.focus.card, stack: state.focus.stack };\n    const isPaused = !!paused.state.paused;\n\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const handlers = {\n        onLeft: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveLeft(before);\n            }),\n\n        onRight: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveRight(before);\n            }),\n\n        onUp: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveUp(before);\n            }),\n\n        onDown: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveDown(before);\n            }),\n\n        onAction: (modifier: _mod) =>\n            updateGameContext((ctx) => {\n                modifier(ctx);\n                const handler = state?.navigator?.pressCurrent(beforeFocused);\n                handler && handler(ctx);\n                ctx.navigator.finishNav();\n            }),\n\n        onCancel: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n            }),\n\n        onPause: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n\n        onHint: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n                if (isVisible(state) && !isDisabled(state)) {\n                    state.settings.enableHint();\n                }\n            });\n        },\n\n        onUndo: () => {\n            //@todo use gamestate token to avoid double processing\n            replaceContext((_state) => {\n                const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n                if (previous) {\n                    previous.game.rating.penalize(_state.game.rating);\n                    return previous;\n                }\n                return null;\n            });\n        },\n        onMenu: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n    };\n\n    return isPaused ? null : (\n        <>\n            <BoardKeyboard {...handlers} />\n            <BoardGamePad {...handlers} />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import GlobalContext from \"../Context\";\nimport React from \"react\";\n\nconst Dealer: () => any = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const timeouts: any[] = [];\n\n    if (state.settings.launchSettings.quickDeal) {\n        if (state && state.dealer && !state.dealer.isDealt) {\n            replaceContext(state.dealer.dealAll());\n        }\n    } else {\n        const deal = (dealt: number) => {\n            timeouts.push(\n                setTimeout(() => {\n                    if (state && state.dealer && !state.dealer.isDealt) {\n                        replaceContext(state.dealer.dealOne(dealt, deal));\n                    }\n                }, 35)\n            );\n        };\n\n        React.useEffect(() => {\n            deal(state.dealer.dealt);\n            return () =>\n                timeouts.forEach((timeout) => {\n                    clearTimeout(timeout);\n                });\n        }, []);\n        React.useEffect(() => {}, [state.dealer.isDealt]);\n    }\n    return null;\n};\nexport default Dealer;\n","const getStackLabel = (source: string) => {\n    const names = [0, 1, 2, 3, 4, 5, 6].map((id) => \" stack \" + (id + 1));\n    let label = \"\";\n    const split = source.split(\"-\");\n    label += split[0];\n    if (split.length > 1) {\n        label += names[parseInt(split[1])];\n    }\n    return label;\n};\n\nexport default getStackLabel;\n","import CardModel from \"../../Model/Deck/Card\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport confetti from \"canvas-confetti\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport getStackLabel from \"./StackDescription\";\nimport { useDrag } from \"react-dnd\";\n\ntype CardProps = {\n    index: number;\n    accepting?: boolean;\n    models: CardModel[];\n    isSuggested?: (index: number) => boolean | undefined;\n    isSelected?: (index: number) => boolean;\n    blink?: number;\n    zIndex?: number;\n    offsetTop?: (index: number, models: CardModel[]) => number;\n    offsetLeft?: (index: number) => number;\n    isDrag?: boolean;\n};\n\nconst Card = (props: CardProps) => {\n    const ReRender = () => (\n        <Card\n            {...{\n                ...props,\n                models: props.models.slice(props.index, props.models.length),\n                offsetLeft: () => 0,\n                isSelected: () => false,\n                index: 0,\n                isDrag: isDrag,\n            }}\n        />\n    );\n    if (!props.models.length) {\n        return null;\n    }\n    const model = props.models[props.index];\n    ReRender.displayName = \"ReRender\";\n    //@todo for proper drag & drop of stacks, we need each card to render the following ones\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const pause = React.useContext(PauseContext);\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const isFocused = state.focus.hasCard(model);\n    const [isDrag, setDrag] = React.useState<boolean>(!!props.isDrag);\n    const _isDrag = props.isDrag || isDrag;\n    const [{ opacity }, dragRef, preview] = useDrag({\n        item: { type: \"card\", model: model, render: ReRender() },\n        collect: (monitor) => {\n            return { opacity: monitor.isDragging() ? 1 : 1 };\n        },\n        canDrag: () => model.canClick() && !model.isHidden && (state.hand.currentCard() == null || model.equals(state.hand.currentCard())),\n        begin: () => {\n            setDrag(true);\n            //@todo if other card is still selected, drop it first.\n            if (model.onClick && (!props.isSelected || !props.isSelected(props.index))) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n        end: (_item, monitor) => {\n            setDrag(false);\n            if (!monitor.didDrop()) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n    });\n\n    //Deactivate native dnd preview - it's fast but it's not working on mobile.\n    React.useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, []);\n\n    const getRef = () => (model.canClick() ? dragRef : inputEl);\n    React.useEffect(() => {\n        if (isFocused && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n    }, [isFocused, state.focus.card]);\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        let ele = e.target;\n\n        while (ele && !ele.className.includes(\"card-base\")) {\n            ele = ele.offsetParent;\n        }\n\n        const rect = ele.getBoundingClientRect();\n\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - (ele?.ownerDocument?.defaultView?.pageXOffset || 0),\n                y: e.clientY - (ele?.ownerDocument?.defaultView?.pageYOffset || 0),\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n\n        const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n        //@todo A11Y allow keyboard actions in singleplayer\n        if (model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.inputMode = \"mouse\";\n                }\n            });\n        }\n    };\n\n    const getClassName = () => {\n        const hasSuggestion = (props.isSuggested && props.isSuggested(props.index)) || model.suggestion;\n        let className = `card card-base suit-${model.type.icon}`;\n        className +=\n            (!props.isSelected || !props.isSelected(props.index)) && !isFocused && !hasSuggestion ? ` card-stack-${model.source}` : \"\";\n        className += !_isDrag && props.isSelected && props.isSelected(props.index) && !_isDrag ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += model.canClick() ? \" clickable\" : \"\";\n        //@todo onhover, trigger highlight of suggested target card/stack (preview what happens if picked up)\n        className += hasSuggestion && !isFocused ? \" card-suggested\" : \"\";\n        className += isFocused ? \" card-focused\" : \"\";\n        className += props.accepting ? \" card-accepts\" : \"\";\n        return className;\n    };\n\n    const getCardStyle = () => {\n        const style = {\n            opacity: _isDrag ? 0 : opacity,\n            zIndex: (props.zIndex ? props.zIndex : (props.offsetTop && props.offsetTop(props.index, props.models) > 0 ? 1 : 0) * 20) + 1,\n            top: props.offsetTop ? props.offsetTop(props.index, props.models) / 15 + \"em\" : 0,\n            ...model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft(props.index) * 2 + \"em\";\n        }\n\n        if (!model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    };\n\n    const getStackbaseStyle: () => React.CSSProperties = () => {\n        if (!model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    };\n\n    let label = getStackLabel(model.source);\n    label += \": \";\n\n    label += model.isHidden ? \"hidden card\" : model.type.icon + model.face;\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n\n    return (\n        <>\n            <div style={getStackbaseStyle()} className=\"stack-base\">\n                <FireworkWatcher model={model} />\n                <button\n                    onFocus={() => {\n                        // updateContext((ctx) => {\n                        //     ctx.navigator.update(model.source, props.model);\n                        // });\n                    }}\n                    onBlur={() => {\n                        //updateContext((ctx) => ctx.focus.unsetCard(props.model));\n                    }}\n                    style={getCardStyle()}\n                    // ref={inputEl}\n                    ref={getRef()}\n                    className={getClassName()}\n                    onClick={onClick}\n                    disabled={!model.canClick() || pause.state.paused}\n                    tabIndex={model.canClick() ? 0 : -1}\n                    aria-label={label}\n                    title={label}\n                >\n                    <div className=\"card-content\">\n                        {model.isHidden || pause.state.paused ? (\n                            <div className=\"card-back\">&nbsp;</div>\n                        ) : (\n                            <div className=\"card-grid-container\">\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-left\">{model.face}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div className=\"mainface\">\n                                    <div className=\"align-center\">{model.face} </div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-right\">{model.face}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </button>\n            </div>\n            {props.models.length - 1 > props.index && <Card {...props} isDrag={_isDrag} index={props.index + 1} />}\n        </>\n    );\n};\n\nexport default Card;\n\nconst FireworkWatcher = (props: { model: CardModel }) => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const origin = {\n        x: 0,\n        y: 0,\n    };\n    //@todo position also depends on slitscreen or singleplayer\n    if (props.model.source.substring(0, 11) == \"foundation-\") {\n        const foundationIndex = parseInt(props.model.source.substring(11));\n        origin.y = 0.2;\n        origin.x = (foundationIndex + 3) / (7 / 100) / 100;\n    }\n    if (props.model.source.substring(0, 8) == \"tableau-\") {\n        const tableauIndex = parseInt(props.model.source.substring(8));\n        origin.y = 0.7;\n        origin.x = tableauIndex / (7 / 100) / 100;\n    }\n\n    React.useEffect(() => {\n        if (props.model.success) {\n            FireWork();\n            const timeout = setTimeout(() => updateContext((ctx) => ctx.clearSuccess(props.model)), 25);\n            return () => clearTimeout(timeout);\n        }\n    }, [state?.token, props.model.success]);\n    const FireWork = () => {\n        const count = 200;\n        const defaults = {\n            ticks: 50,\n            origin,\n        };\n\n        const fire = (particleRatio: any, opts: any) => {\n            confetti(\n                Object.assign({}, defaults, opts, {\n                    particleCount: Math.floor(count * particleRatio),\n                })\n            );\n        };\n\n        fire(0.25, {\n            spread: 48,\n            startVelocity: 55,\n        });\n        fire(0.2, {\n            spread: 120,\n        });\n        fire(0.35, {\n            spread: 160,\n            decay: 0.91,\n            scalar: 0.8,\n        });\n        fire(0.1, {\n            spread: 200,\n            startVelocity: 25,\n            decay: 0.92,\n            scalar: 1.2,\n        });\n        fire(0.1, {\n            spread: 240,\n            startVelocity: 45,\n        });\n        fire(0.1, {\n            spread: 359,\n            startVelocity: 45,\n        });\n        return null;\n    };\n    return null;\n};\n","import GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\n\nconst StackBase = (props: { model: IStack; children?: any | null }) => {\n    let classname = \"card-base socket\";\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    React.useEffect(() => {\n        if (state.focus.hasStack(props.model.source) && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            const current = inputEl && inputEl.current ? inputEl.current : null;\n            current && current.focus();\n        }\n    });\n    if (!props.model.stack.length) {\n        if (props.model.blinkFor) {\n            classname += \" socket-blink\";\n        } else if (state.focus.hasStack(props.model.source)) {\n            classname += \" socket-focused\";\n        } else {\n            classname += \" socket-empty\";\n        }\n    } else {\n        classname += \" socket-full\";\n    }\n\n    if (props.model.suggestion && !props.model.stack.length) {\n        classname += \" socket-suggested\";\n    }\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": empty socket\";\n\n    return (\n        <button\n            onFocus={() => {\n                // updateContext((ctx) => {\n                //     ctx.navigator.update(props.model.parent);\n                // });\n            }}\n            onBlur={() => {\n                // updateContext((ctx) => ctx.focus.unsetStack(props.model.parent));\n            }}\n            ref={inputEl}\n            className={classname}\n            onClick={onClick}\n            disabled={!!props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n            aria-label={label}\n            title={label}\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\n\ntype _selector = (model: Model) => IStack;\n\nconst useBlinkEffect = (selector: _selector) => {\n    const { updateContext, state } = React.useContext(GlobalContext);\n    if (!state) return;\n    const model = selector(state);\n    let timeout: any = null;\n    React.useEffect(() => {\n        if (state && selector(state).blinkFor) {\n            timeout = setTimeout(\n                () =>\n                    updateContext((state: Model) => {\n                        selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [state, model.blinkFor]);\n};\n\nexport default useBlinkEffect;\n","import Card from \"./Card\";\nimport { FoundationStack } from \"../../Model/Game/Foundation\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\ntype FoundationProps = { index: number; model: FoundationStack };\n\nconst FoundationStacks = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    return (\n        <>\n            {state.foundation.stacks.map((foundation, index) => (\n                <Foundation key={index} model={foundation} index={index} />\n            ))}\n        </>\n    );\n};\n\nexport default FoundationStacks;\n\nconst Foundation = (props: FoundationProps) => {\n    useBlinkEffect((model) => model.foundation.stacks[props.index]);\n    const { updateGameContext } = React.useContext(GlobalContext);\n    const model = props.model;\n    const [, drop] = useDrop({\n        accept: \"card\",\n        canDrop: (item: any) => {\n            return props.model.accepts(item.model);\n        },\n        drop: () => {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n    const { state } = React.useContext(GlobalContext);\n    const cards = state?.hand.source == model.source ? [...model.stack, ...state.hand.stack] : [...model.stack];\n    return (\n        <div className=\"board-field\" key={props.index} ref={drop}>\n            <StackBase model={model}>\n                <div className={\"align-center foundation-base suit-\" + model.icon}>{model.icon}</div>\n            </StackBase>\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={model.blinkFor}\n                isSuggested={(index) => model.suggestion && model.stack.length - 1 == index}\n                isSelected={(index) => index > model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst Clock = () => {\n    const { state, getElapsed } = React.useContext(PauseContext);\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (state.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [state.started, state.paused]);\n\n    return !state.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Hearts = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode == \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst Hint = () => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Points = () => {\n    const { state } = React.useContext(GlobalContext);\n\n    return (\n        <>\n            <div className=\"icon-container\">🏆</div> {state?.game.rating.points}\n        </>\n    );\n};\n\nexport default Points;\n","import { BoardContext } from \"../../Game/BoardWrap\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst ToggleMenu = () => {\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n\n    return (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Undo = () => {\n    //@todo use gamestate token to avoid double processing\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"../../Style/Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover();\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: any) => (state: Model) => {\n        if (dealt != state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n        if (state.dealer.isDealt) {\n            state.game.started = Date.now();\n        }\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt != state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        state.game.started = Date.now();\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                if (newCard) {\n                    newCard.source = tableau.stacks[i].source;\n                    if (stack.length == tableau.stacks.length - 1 - i) {\n                        newCard.isHidden = false;\n                    }\n                    tableau.deal(newCard, i);\n                    this.dealt++;\n                    this.dealingAt++;\n                    if (this.dealingAt == tableau.stacks.length) {\n                        this.dealingAt = 0;\n                    }\n                    this.isDealt = false;\n                }\n                return;\n            } else {\n                const isFirst = this.dealingAt == 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n    }\n\n    validSettings = () => this.settings.launchSettings.inputMode !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack == stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && this.card && card && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack == stack;\n}\n","import Card from \"../Deck/Card\";\n\nexport default class BasicStack {\n    source: string;\n    constructor(source: string) {\n        this.source = source;\n    }\n    stack: Card[] = [];\n    getTop: () => Card | null = () => (this.stack && this.stack.length && this.stack[this.stack.length - 1]) || null;\n    suggestion = false;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n}\n","import BasicStack from \"./BasicStack\";\nimport Hand from \"./Hand\";\n\nexport default class HandHoldingStack extends BasicStack {\n    hand: Hand;\n    constructor(source: string, hand: Hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source == this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n    blinkFor = 0;\n    unblink = () => {};\n}\n","/* eslint-disable no-unused-vars */\n\nimport Suits, { Suit } from \"../Deck/Suits\";\n\nimport Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nexport class FoundationStack extends HandHoldingStack implements IStack {\n    setOnClick: () => void = () => {};\n    acceptedCards: string[] = [];\n    usedCards: any[] = [];\n    icon: string = \"\";\n    color: string = \"\";\n    blinkFor: number = 0;\n    clickEmpty: (p: any) => any = () => {};\n    getCurrentAccepted = () => {\n        return this.acceptedCards[this.acceptedCards.length - 1];\n    };\n    accepts = (card: Card | null) => {\n        if (!card) return false;\n        const currentAccepted = this.getCurrentAccepted();\n        return this.icon == card.type.icon && currentAccepted == card.face;\n    };\n}\nexport default class Foundation {\n    settings: Settings;\n    hand: Hand;\n    stacks: FoundationStack[];\n    blinkFor: number;\n    unblink: () => void;\n    constructor(settings: Settings, hand: Hand) {\n        this.settings = settings;\n        this.hand = hand;\n        const template = (index: number, suit: Suit) => {\n            const s = new FoundationStack(\"foundation-\" + index, hand);\n            s.stack = [];\n            s.acceptedCards = [...getFoundationOrder()];\n            s.usedCards = [];\n            s.icon = suit.icon;\n            s.color = suit.color;\n            s.blinkFor = 0;\n            return s;\n        };\n        const stacks = Object.keys(Suits)\n            .map((key: string) => Suits[key])\n            .map((suit, index) => (template(index, suit)));\n        this.stacks = [...stacks];\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n    }\n\n    //@todo include hand content for proper canClick\n    setOnClick = (onClick: (c: any, p: XY, index: number) => (s: any) => void) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                card.onClick = (p: XY) => onClick({ ...card }, p, index);\n                card.canClick = () => sindex == stack.stack.length - 1;\n            });\n            this.hand.setOnClick(stack);\n        });\n    };\n\n    getCurrentAccepted = (index: number) => {\n        return this.stacks[index].getCurrentAccepted();\n    };\n\n    wouldAcceptHand = (index: number) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    accepts = (index: number, card: Card | null) => {\n        return this.stacks[index].accepts(card);\n    };\n\n    add = (index: number, cards: Card[]) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        card.success = true;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index: number, card: Card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return (card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop()) || null;\n    };\n\n    getPreviousUsed = (index: number) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => f.stack.length).reduce((a, b) => a + b, 0);\n\n    getTop = (index: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig: Foundation, hand: Hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new FoundationStack(origStack.source, hand);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src);\n            this.tryDetectEnd(state);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card | null, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.face) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    //@todo move this to a generic place, also detect failure\n    tryDetectEnd(state: Model) {\n        const nrofCards = state.foundation.countCards();\n        if (nrofCards === 52) {\n            state.game.isEnded = true;\n            state.game.end = Date.now();\n        }\n    }\n}\n","import Settings from \"./Settings\";\n\nexport interface AppliedRating {\n    points: number;\n    text: string;\n    notified?: boolean;\n}\n\nexport interface AppliedRatingWithId extends AppliedRating {\n    id: number;\n}\n\nexport default class Rating {\n    settings: Settings;\n    points: number;\n    multiplicator: number;\n    ratings: AppliedRating[];\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n        this.ratings = [];\n    }\n\n    hasNotifications = () => {\n        return this.ratings.filter((r) => !r.notified).length > 0;\n    };\n\n    getNextNotification = () => {\n        return this.ratings.map((r, id) => ({ ...r, id })).filter((r) => !r.notified)[0];\n    };\n\n    setNotified = (n: number) => {\n        this.ratings[n].notified = true;\n    };\n\n    applyRating = (points: number, text: string) => {\n        console.debug(\"RATING:\", text);\n        this.ratings.push({ points, text });\n    };\n\n    registerMove = (target: string, source: string) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode == \"single\" && this.settings.launchSettings.recyclingMode == \"infinite\") {\n            if (this.points > 0) {\n                let diff = 0;\n                if (this.points < 100) {\n                    diff = this.points * -1;\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                    diff = -100;\n                }\n                this.applyRating(diff, `subtract ${diff} (max 100 points) for RECYCLE`);\n            }\n        }\n    };\n\n    registerUncover = () => {\n        this.registerHint(this.settings.disableHint());\n        this.points += 5;\n        this.applyRating(5, \"add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on: boolean) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, \"subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other: Rating) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            this.applyRating(penalty * -1, `applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done: boolean) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, `applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move: { source: string; target: string }) {\n        const isTableau = (obj: string) => obj.substr(0, 7) == \"tableau\";\n        const isFoundation = (obj: string) => obj.substr(0, 10) == \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE tableau -> foundation\");\n                return 10;\n            }\n        } else if (move.source == \"waste\") {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE waste -> foundation\");\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                this.applyRating(5, \"add 5 points for MOVE waste -> tableau\");\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                this.applyRating(-15, \"subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start: number, end: number) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    };\n\n    static copy = (orig: Rating) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        copy.ratings = [...orig.ratings];\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Model from \"../Model\";\n\nexport default class TimeMachine {\n    previousStates: Model[];\n    memorable: boolean;\n    modified: boolean;\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source == target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state: any) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id: number, current: any) => {\n        const isRequested = this.previousStates.length - 1 == id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        if (on) {\n            this.modified = true;\n            this.memorable = false;\n        }\n    }\n\n    stackEquals = (a: IStack, b: IStack) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden == b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a: { stacks: IStack[] }, b: { stacks: IStack[] }) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a: Model, b: Model) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig: TimeMachine) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Rating from \"./Rating\";\nimport Settings from \"./Settings\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    settings: Settings;\n    rating: Rating;\n    timemachine: TimeMachine;\n    started: number;\n    isEnded: boolean;\n    end: number;\n    paused: any;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n        //@todo move to context:\n        this.started = 0;\n        this.isEnded = false;\n        this.end = 0;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.rating.registerMove(target, source);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = () => {\n        this.rating.registerUncover();\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig: Game) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        copy.paused = orig.paused;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    filter: (stack: any[]) => Card[] = (stack) => {\n        return stack.filter((c) => c);\n    };\n\n    pickUp = (stack: (Card | null)[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = this.filter(stack).map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source == model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.face == \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source == this.source) || null;\n\n    isFromWaste = () => this.source && this.source == \"waste\" || false;\n\n    isFromFoundation = (index: number) => this.source && this.source == `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source == `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) == \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/IStack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: (IStack | undefined)[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source == pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x == -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x == 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        const current = this.current();\n        if (current == undefined) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = current.getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y == 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const current = this.current();\n        const last: number = current ? current.getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (!current) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current()?.source || \"\");\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = (before: { card: Card | null; stack: string }) => {\n        const clickable = this.current()?.getClickable();\n        if (\n            this.model.focus.card &&\n            this.model.focus.card.canClick() &&\n            clickable &&\n            clickable[this.currentIndex.z] &&\n            clickable[this.currentIndex.z].face == this.model.focus.card.face &&\n            clickable[this.currentIndex.z].type.icon == this.model.focus.card.type.icon\n        ) {\n            return (ctx: Model) => {\n                if (this.model.focus.card && this.model.focus.card.equals(before.card)) {\n                    this.model.focus.card.onClick({ isKeyboard: true })(ctx);\n                }\n            };\n        } else if (this.model.focus.stack && this.model.focus.stack == before.stack) {\n            return (ctx: Model) => {\n                this.current()?.clickEmpty({ isKeyboard: true })(ctx);\n            };\n        } else {\n            //this is the entry point in case user starts keyboard nav with action button\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./BasicStack\";\nimport Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Stock extends BasicStack implements IStack {\n    settings: Settings;\n    recyclings: number;\n    passes: number;\n    blinkFor: number;\n    unblink: () => void;\n    clickEmpty: (p: any) => (s: any) => void;\n    constructor(stack: Card[], settings: Settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        this.clickEmpty = () => () => {};\n        if (this.settings.launchSettings.recyclingMode == \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode == \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: XY) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n    };\n    accepts = () => false;\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode == \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode == \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste: Card[]) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card: Card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card: Card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result: Card[] = [];\n        if (this.settings.launchSettings.drawMode == \"single\") {\n            const top = this.stack.pop();\n            if (top) result = [top];\n        }\n        if (this.settings.launchSettings.drawMode == \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length == 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig: Stock) => {\n        const copy = new Stock([], orig.settings);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\");\n    };\n\n    recycleWaste = (state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\")) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key == SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key == SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length == 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length == 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].face ==\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].face &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (\n                            this.getPutdownSuggestions(tableauState, true) >\n                            (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)\n                        ) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nexport class TableauStack extends HandHoldingStack implements IStack {\n    //@todo move to IStack, make boolean\n    blinkFor = 0;\n    id = 0;\n    // eslint-disable-next-line no-unused-vars\n    onClick = (a: any) => (s: any) => {};\n    // eslint-disable-next-line no-unused-vars\n    clickEmpty = (a: any) => (s: any) => {};\n    setOnClick = () => {};\n    accepts = (current: Card | null) => {\n        const top = this.getTop();\n        if (!top) {\n            return (current && current.face === \"K\") || false;\n        }\n        if (this.source == current?.source) return true;\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = current ? range.indexOf(current.face) : 0;\n        const topIndex = range.indexOf(top.face);\n        return currentIndex + 1 == topIndex && current?.type.color !== top.type.color && top.face !== \"A\";\n    };\n}\nexport default class Tableau {\n    stacks: TableauStack[];\n    settings: Settings;\n    hand: Hand;\n\n    constructor(settings: Settings, hand: Hand) {\n        const ids = [0, 1, 2, 3, 4, 5, 6];\n        this.hand = hand;\n        this.stacks = ids.map((id) => {\n            const s = new TableauStack(\"tableau-\" + id, hand);\n            s.stack = [];\n            s.blinkFor = 0;\n            s.id = id;\n            return s;\n        });\n        this.settings = settings;\n    }\n\n    //@todo include hand content for proper canClick\n    setOnClick = (\n        onClick: (a: any, b: any, index: number) => (s: any) => void,\n        onClickhidden: (a: any, b: any, index: number) => (s: any) => void,\n        hand: Hand\n    ) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p: any) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                const click = card.isHidden && sindex == stack.stack.length - 1 ? onClickhidden : onClick;\n                card.onClick = (p: any) => click({ ...card }, p, index);\n                card.canClick = () => !card.isHidden || this.canUncover(index, card) || false;\n            });\n            hand.setOnClick(stack);\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    putDownHand = (index: number) => this.add(index, this.hand.source, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        if (!current) return false;\n        return this.stacks[index].accepts(current);\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        return top.isHidden && card && card.equals(this.getTop(index));\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            top.success = true;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy != 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, source: string, cards: Card[]) => {\n        let success = false;\n        if (source == \"waste\") {\n            success = true;\n        }\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index, success)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number, success: boolean) => {\n        card.source = this.stacks[index].source;\n        card.success = success;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1 - (offset || 0)];\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map((stack, index) => {\n            const s = new TableauStack(stack.source, hand);\n            s.id = index;\n            s.stack = Card.copyAll(stack.stack);\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Waste extends HandHoldingStack {\n    settings: Settings;\n    blinkFor: number;\n    unblink: () => void;\n    clickEmpty: (p: any) => (s: any) => void;\n    constructor(settings: Settings, hand: Hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        this.clickEmpty = () => () => {};\n    }\n\n    //@todo include hand content for proper canClick\n    setOnClick = (onClick: (c: any, p: XY, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: XY) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card: Card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards: Card[]) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card: Card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    accepts = (card: Card | null) => this.canAdd(card) || false;\n\n    canAdd = (card: Card | null) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card: Card) => (card && card.equals(this.getTop()) && this.stack.pop()) || null;\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig: Waste, hand: Hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Card from \"./Deck/Card\";\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport { IStack } from \"./Game/IStack\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n    token: number;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n        this.token = obj.token;\n    }\n\n    setToken = (token: number) => {\n        this.token = token;\n    };\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    _hasSuggestion = (obj: any) => {\n        return obj.suggestion || (obj.stack && obj.stack.some(this._hasSuggestion)) || (obj.stacks && obj.stacks.some(this._hasSuggestion));\n    };\n\n    hasSuggestions = () => {\n        return (\n            this._hasSuggestion(this.waste) ||\n            this._hasSuggestion(this.stock) ||\n            this._hasSuggestion(this.tableau) ||\n            this._hasSuggestion(this.foundation)\n        );\n    };\n\n    canAutoSolve = () => {\n        return (\n            this.waste.stack.length == 0 &&\n            this.stock.stack.length == 0 &&\n            this.tableau.stacks.every((s) => s.stack.every((c) => !c.isHidden))\n        );\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    clearSuccess = (card: Card) => {\n        const clear = (c: Card, s: IStack) => {\n            s.stack.forEach((_c) => {\n                if (_c.equals(c)) {\n                    _c.success = false;\n                }\n            });\n        };\n        clear(card, this.stock);\n        clear(card, this.waste);\n        this.foundation.stacks.forEach((s) => clear(card, s));\n        this.tableau.stacks.forEach((s) => clear(card, s));\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()), this.hand);\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings),\n            token: 0,\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n            token: state.token,\n        });\n    };\n}\n","import { ToastContentProps, ToastOptions, toast } from \"react-toastify\";\n\nimport { AppliedRating } from \"../../Model/Game/Rating\";\nimport GlobalContext from \"../Context\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\n\nconst Judge = () => {\n    //@todo split in three components\n    //- one checks a context from outside for final status\n    //  - check if other player won\n    //  - check if other player gave up\n    //- the other analyses the game and reports to context\n    //  - check if current player won\n    //  - check if there are no more valid options and offer to give up\n    //- auto-resolver\n    //  - check if the board can auto-resolve and offer to complete automatically\n    //  - auto-complete becomes button in header and option in menu\n\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n\n    return (\n        <>\n            <Evaluator token={state.token} />\n            <RatingNotifier />\n            <AutoSolve canAutosolve={state.canAutoSolve()} />\n        </>\n    );\n};\n\nconst AutoSolve = (props: { canAutosolve: boolean }) => {\n    const [solving, setSolving] = React.useState(false);\n    React.useEffect(() => {\n        if (props.canAutosolve) {\n            setSolving(true);\n        }\n    }, [props.canAutosolve]);\n    return !solving ? null : <Solver />;\n};\n\n//@todo auto-uncover as feature, in which case action is not undoable\n//@todo when auto-solving until the end, disable all visible hints!\n//@todo also start general confetti firework elements when autosolving\n\nconst Solver = () => {\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            const copy = Model.copy(state).withHandlers();\n            if (copy.hand.currentCard()) {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.foundation)) {\n                    const suggestedFoundations = copy.foundation.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedFoundations.length) {\n                        const suggestedFoundation = suggestedFoundations[0];\n                        updateGameContext(suggestedFoundation.clickEmpty({ isKeyboard: false }));\n                    }\n                }\n            } else {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.tableau)) {\n                    const suggestedTableaus = copy.tableau.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedTableaus.length) {\n                        const suggestedTableau = suggestedTableaus[0];\n                        const suggestedCards = suggestedTableau.stack.filter((c) => c.suggestion);\n                        if (suggestedCards.length) {\n                            const suggestedCard = suggestedCards[0];\n                            updateGameContext(suggestedCard.onClick({ isKeyboard: false }));\n                        }\n                    }\n                }\n            }\n        }, 150);\n\n        return () => clearTimeout(timeout);\n    });\n    return null;\n};\n\nconst useEvaluation: (mode: string, token: number) => [number, () => void] = (mode, token) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return [0, () => {}];\n    const [falseResults, setFalseResults] = React.useState<number>(0);\n    const reset = () => setFalseResults(0);\n    React.useEffect(() => {\n        const copy = Model.copy(state);\n        copy.settings.suggestionMode = SuggestionModes.get(mode);\n        copy.suggestor.evaluateOptions(copy);\n        if (copy.hasSuggestions()) {\n            if (falseResults !== 0) {\n                setFalseResults(0);\n            }\n        } else {\n            setFalseResults(falseResults + 1);\n        }\n    }, [token]);\n    return [falseResults, reset];\n};\n\nconst Evaluator = (props: { token: number }) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const [full, resetFull] = useEvaluation(SuggestionModes.FULL, props.token);\n    const [regular, resetRegular] = useEvaluation(SuggestionModes.REGULAR, props.token);\n    const [noRegularSince, setNoRegularSince] = React.useState<number>(0);\n    const [noFullSince, setNoFullSince] = React.useState<number>(0);\n    React.useEffect(() => {\n        if (!state.hand.currentCard()) {\n            console.log(full, regular);\n\n            if (full > 0 && regular > 0) {\n                if (noFullSince >= 0) {\n                    //@todo we need full blown menu here, not just a toast.\n                    toast.error(\n                        (props: ToastContentProps) => (\n                            <div>\n                                <div>😢 looks like the game is over</div>\n                                <div></div>\n                                <div>\n                                    <button\n                                        onClick={() => {\n                                            setNoFullSince(-3);\n                                            props.closeToast && props.closeToast();\n                                        }}\n                                    >\n                                        Keep trying\n                                    </button>\n                                    <button onClick={() => alert(\"@todo\")}>Restart</button>\n                                    <button onClick={() => alert(\"@todo\")}>Give up</button>\n                                </div>\n                            </div>\n                        ),\n                        { autoClose: false, closeButton: false }\n                    );\n                }\n                setNoFullSince(noFullSince + 1);\n                resetFull();\n            } else if (regular > 0 && full == 0) {\n                if (state.settings.suggestionMode.key !== SuggestionModes.FULL && noRegularSince >= 0) {\n                    // toast.warn((props: ToastContentProps) => (\n                    //     <div>\n                    //         <div>😢 looks like youre stuck here. Have you tried enabling full suggestions?</div>\n                    //         <div></div>\n                    //         <div>\n                    //             <button>Enable</button>\n                    //             <button\n                    //                 onClick={() => {\n                    //                     setNoRegularSince(-2);\n                    //                     props.closeToast && props.closeToast();\n                    //                 }}\n                    //             >\n                    //                 Maybe Later\n                    //             </button>\n                    //             <button>Dont ask again</button>\n                    //         </div>\n                    //     </div>\n                    // ));\n                }\n                resetRegular();\n\n                setNoRegularSince(noRegularSince + 1);\n            }\n        }\n    }, [full, regular, state.hand.currentCard()]);\n    return null;\n};\nconst RatingToast = (props: { rating: AppliedRating }) => {\n    return (\n        <div>\n            <div>Rating</div>\n            <div>{props.rating.text}</div>\n        </div>\n    );\n};\nconst RatingToastProps: ToastOptions = { autoClose: 2000, hideProgressBar: true, position: \"bottom-center\" };\nconst RatingNotifier = () => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    React.useEffect(() => {\n        if (state?.game.rating && state?.game.rating.hasNotifications()) {\n            const notification = state?.game.rating.getNextNotification();\n            if (notification) {\n                const setNotified = () => {\n                    updateContext((ctx) => {\n                        ctx.game.rating.setNotified(notification.id);\n                    });\n                };\n\n                if (notification.points > 0) {\n                    toast.success(<RatingToast rating={notification} />, RatingToastProps);\n                    setNotified();\n                } else {\n                    toast.warn(<RatingToast rating={notification} />, RatingToastProps);\n                    setNotified();\n                }\n            }\n        }\n    }, [state?.token]);\n    return null;\n};\n\nexport default Judge;\n","import \"../Style/Menu.scss\";\n\nimport { NavigationContext, NavigationProvider, NavigationState } from \"./StartScreen/Context\";\nimport { Universal, getKeyboardLayout } from \"../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../Game/BoardWrap\";\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\n\nconst _Menu = () => {\n    const [navigation, setNavigation] = React.useState<NavigationState>({\n        menu: {\n            x: 0,\n            y: 0,\n        },\n        screen: {\n            x: 0,\n            y: 0,\n        },\n        focus: \"menu\",\n        mainMenu: \"\",\n        screeen: \"\",\n    });\n    const navigationContext = {\n        navigation,\n        setNavigation,\n    };\n    return (\n        <NavigationProvider value={navigationContext}>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too if consented and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = React.useContext(NavigationContext);\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n    if (!state) {\n        return null;\n    }\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining == 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining == 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) [(announcement = \"The game is not paused.\")];\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle label=\"😴\" />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle label=\"😴\" />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon=\"▶️\"\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                        />\n                        <MenuButton\n                            icon=\"🌪️\"\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            toggled={navigation.mainMenu == \"entropy\"}\n                        >\n                            <MenuButton\n                                icon=\"🌪️\"\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                            />\n                            <MenuButton\n                                icon=\"🌬️\"\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon=\"♻️\"\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon=\"🗑️\" title=\"Quit Game\" onClick={() => restart()} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import React from \"react\";\n\nconst usePrevious = <T>(value: T) => {\n    const ref = React.useRef<T>();\n    React.useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n","import Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport usePrevious from \"./usePrevious\";\n\nconst Renderer = (props: { length: number; paused: boolean; started: number }) => {\n    const context = React.useContext(GlobalContext);\n\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout: any = null;\n        if (\n            context &&\n            context.state &&\n            context.state.settings.launchSettings.speed &&\n            started &&\n            !paused &&\n            previous &&\n            (previous?.length != length || previous?.started != started || previous?.paused != paused)\n        ) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (\n                        length == state.stock.stack.length &&\n                        state.stock.passes > 0 &&\n                        (state.stock.stack.length || state.waste.stack.length)\n                    ) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => clearTimeout(timeout);\n    }, [length, paused, started]);\n\n    if (!context || !context.state) return null;\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            <Card\n                index={0} \n                key={0}\n                models={context.state.stock.stack}\n                offsetTop={(index) => (index / 2) * -1}\n                zIndex={0}\n                blink={context?.state?.stock.blinkFor}\n                isSuggested={(index) => context?.state?.stock.suggestion && index == context.state.stock.stack.length - 1}\n            />\n        </div>\n    );\n};\n\nconst Stock = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    useBlinkEffect((model) => model.stock);\n    const pause = React.useContext(PauseContext);\n    const { paused, started } = pause.state;\n    return <Renderer length={state.stock.stack.length} paused={paused} started={started} />;\n};\n\nexport default Stock;\n","import TableauModel, { TableauStack } from \"../../Model/Game/Tableau\";\n\nimport Card from \"./Card\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\ntype TableauProps = { index: number; model: TableauStack; parent: TableauModel };\n\nconst TableauStacks = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    return (\n        <>\n            {state.tableau.stacks.map((tableau, index) => (\n                <Tableau key={index} index={index} model={tableau} parent={state.tableau} />\n            ))}\n        </>\n    );\n};\nexport default TableauStacks;\n\nconst Tableau = (props: TableauProps) => {\n    useBlinkEffect((s) => s.tableau.stacks[props.index]);\n    const [accepting, setAccepting] = React.useState<boolean>(false);\n    const { updateGameContext } = React.useContext(GlobalContext);\n    const [, drop] = useDrop({\n        accept: \"card\",\n        canDrop: (item: any) => {\n            const accepts = props.model.accepts(item.model);\n            setAccepting(accepts);\n            return accepts;\n        },\n        drop: () => {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n\n    const { state } = React.useContext(GlobalContext);\n    const cards = state?.hand.source == props.model.source ? [...props.model.stack, ...state.hand.stack] : [...props.model.stack];\n\n    let offset = 1;\n    const getOffset = (index: number, cards: CardModel[]) => {\n        for (let i = 0; i <= index; i++) {\n            if (cards[i] && !cards[i].isHidden) {\n                offset = i * 12 + (index - i) * 24;\n                return offset;\n            }\n        }\n        offset = index * 12;\n        return offset;\n    };\n\n    return (\n        <div className=\"board-field\" ref={drop}>\n            <StackBase model={props.model} />\n            <Card\n                index={0}\n                key={0}\n                accepting={accepting}\n                models={cards}\n                blink={props.model.blinkFor}\n                isSuggested={(index) => props.model.suggestion && props.model.stack.length - 1 == index}\n                offsetTop={(index, models) => getOffset(index, models)}\n                isSelected={(index) => index > props.model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\nconst Waste = () => {\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    useBlinkEffect((model) => model.waste);\n    const getOffset = (index: number) => {\n        if (state.settings.launchSettings.drawMode == \"single\") {\n            return 0;\n        }\n        const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n        let additionalOffset = 2;\n        if (length == 2) {\n            additionalOffset = 1;\n        }\n\n        if (length == 1) {\n            additionalOffset = 0;\n        }\n\n        return ((index - length - 2) % 3) + additionalOffset;\n    };\n\n    const [, _drop] = useDrop({\n        accept: \"card\",\n        // eslint-disable-next-line no-unused-vars\n        canDrop: () => {\n            const accepts = state.hand.isFromWaste();\n            //setAccepting(accepts);\n            return accepts;\n        },\n        drop: () => {\n            updateGameContext(state.waste.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n\n    const cards = state?.hand.source == state.waste.source ? [...state.waste.stack, ...state.hand.stack] : [...state.waste.stack];\n\n    return (\n        <div className=\"board-field\" ref={_drop}>\n            <StackBase model={state.waste} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                offsetTop={(index) => (index / 2) * -1}\n                offsetLeft={(index) => getOffset(index)}\n                blink={state.waste.blinkFor}\n                isSuggested={(index) => state.waste.suggestion && index == state.waste.stack.length - 1}\n                isSelected={(index) => index > state.waste.stack.length - 1}\n            />\n        </div>\n    );\n};\nexport default Waste;\n","import \"../Style/Board.scss\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nimport { Slide, ToastContainer } from \"react-toastify\";\n\nimport BoardNavigator from \"./Navigation/BoardNavigator\";\nimport Dealer from \"./Dealer\";\nimport { DndProvider } from \"react-dnd-multi-backend\";\nimport FoundationStacks from \"./Foundation\";\nimport HTML5toTouch from \"react-dnd-multi-backend/dist/esm/HTML5toTouch\";\nimport Header from \"../UI/Header/Header\";\nimport Judge from \"./Judge\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport TableauStacks from \"./Tableau\";\nimport Waste from \"./Waste\";\nimport { usePreview } from \"react-dnd-preview\";\n\nconst Preview = (props: { reff: any }) => {\n    // eslint-disable-next-line no-unused-vars\n    const { display, _itemType, item, style } = usePreview();\n    if (!display) {\n        return null;\n    }\n    const rect = props.reff.getBoundingClientRect();\n    return (\n        <div\n            style={{\n                ...style,\n                position: \"relative\",\n                width: \"100%\",\n                left: rect.left * -1,\n                top: rect.top * -1,\n                zIndex: 2000,\n                opacity: 1,\n            }}\n        >\n            {item.render}\n        </div>\n    );\n};\ntype BoardProps = { mode: string };\nconst Board = (props: BoardProps) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n    //@todo when board lives too long, restart game will lead to duplicate dndprovider error\n    //@todo use different IDs for draggable/droppable elements per user\n    //then have central provider that lives forever\n    return (\n        <DndProvider options={HTML5toTouch}>\n            <Menu />\n            <Header mode={props.mode} />\n            <ToastContainer\n                style={{ zIndex: 8888 }}\n                position=\"top-center\"\n                closeOnClick={false}\n                newestOnTop={true}\n                limit={1}\n                pauseOnFocusLoss={false}\n                draggable={false}\n                transition={Slide}\n            />\n            <div className={\"board-jail \" + props.mode}>\n                <div className={\"board-grid-container \" + props.mode}>\n                    <Stock />\n                    <Waste />\n                    <div className=\"board-field spacer\" ref={ref}>\n                        {ref.current && <Preview reff={ref.current} />}\n                    </div>\n                    <FoundationStacks />\n                    <TableauStacks />\n                </div>\n            </div>\n            <Dealer />\n            <BoardNavigator />\n            <Judge />\n        </DndProvider>\n    );\n};\n\nexport default Board;\n","import \"../Style/Screens.scss\";\n\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\n\nconst EndScreen = () => {\n    const { state, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    //@todo show launch settings (draw mode, recycling mode)\n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../Context\";\nimport React from \"react\";\n\nexport const BoardContext = React.createContext({\n    player: 0,\n});\n\nconst BoardProvider = BoardContext.Provider;\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\n//We use class component here because setState allows partial updates \nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                state.setToken(Math.random());\n                return state;\n            }\n\n            return null;\n        });\n\n    //on every render, we refresh the click handlers in the model and the suggestions\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider value={{ player: this.props.player }}>\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n"],"sourceRoot":""}