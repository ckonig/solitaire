{"version":3,"file":"static/js/561.5b959357.chunk.js","mappings":"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","sources":["Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/Stack.ts","Model/Game/HandHoldingStack.ts","Model/Game/FoundationStack.tsx","Model/Game/MultiStack.ts","Model/Game/Foundation.ts","Model/Business/Foundation.ts","Model/Game/Rating.ts","Model/Game/TimeMachine.ts","Model/Game/Game.ts","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.ts","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/TableauStack.tsx","Model/Game/Tableau.ts","Model/Game/Waste.ts","Model/Model.ts","View/GlobalContext.ts","View/Game/Actors/AutoSolver.tsx","View/Context/GameContext.tsx","View/useGlobalTokenEffect.ts","View/Game/Actors/AutoUncoverer.tsx","View/Context/BoardContext.ts","View/Game/Navigation/BoardGamePad.tsx","View/Game/Navigation/BoardKeyboard.tsx","View/Context/PauseContext.tsx","View/Game/Navigation/BoardNavigator.tsx","View/Game/Actors/Dealer.tsx","common/DndPreview.tsx","View/UI/PossibleFailScreen.tsx","View/Game/Actors/FailDetector.tsx","View/Game/Firework.tsx","View/Game/CardFirework.tsx","View/Game/Card.tsx","View/Game/StackBase.tsx","View/Game/Hooks/useBlinkEffect.ts","View/Game/Hooks/useStackDrop.ts","View/Game/Foundation.tsx","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","View/UI/Menu.tsx","View/Game/Stock.tsx","View/Game/Tableau.tsx","View/Game/Waste.tsx","View/Game/Actors/WinDetector.tsx","View/Game/Board.tsx","View/UI/EndScreen.js","View/Game/BoardWrap.tsx","View/Game/Game.tsx"],"sourcesContent":["import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src, state.tableau.getTop(index));\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover(state.tableau.getTop(index));\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: (n: number) => void) => (state: Model) => {\n        if (dealt !== state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt !== state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                if (newCard) {\n                    newCard.source = tableau.stacks[i].source;\n                    if (stack.length === tableau.stacks.length - 1 - i) {\n                        newCard.isHidden = false;\n                    }\n                    tableau.deal(newCard, i);\n                    this.dealt++;\n                    this.dealingAt++;\n                    if (this.dealingAt === tableau.stacks.length) {\n                        this.dealingAt = 0;\n                    }\n                    this.isDealt = false;\n                }\n                return;\n            } else {\n                const isFirst = this.dealingAt === 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    player: number;\n    constructor(settings: Settings, player: number) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n        this.player = player;\n    }\n\n    validSettings = () => this.settings.launchSettings.players[this.player].inputMethod !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack === stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack === stack;\n}\n","import Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport interface IStack {\n    source: string;\n    stack: Card[];\n    getTop: () => Card | null;\n    getClickable: () => Card[];\n    clickEmpty: (p: any) => (s: Model) => void;\n    blinkFor: number;\n    unblink: (model: Model) => void;\n    suggestion: boolean;\n    accepts: (card: Card | null) => boolean;\n}\n\nabstract class BasicStack implements IStack {\n    source: string;\n    constructor(source: string) {\n        this.source = source;\n    }\n    suggestion = false;\n    stack: Card[] = [];\n    getTop: () => Card | null = () => (this.stack && this.stack.length && this.stack[this.stack.length - 1]) || null;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n    blinkFor = 0;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick = (a: any) => (s: Model) => {};\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    clickEmpty = (a: any) => (s: Model) => {};\n    unblink: (model: Model) => void = () => {};\n    abstract accepts: (card: Card | null) => boolean;\n}\nexport default BasicStack;\n","import BasicStack from \"./Stack\";\nimport Hand from \"./Hand\";\n\nabstract class HandHoldingStack extends BasicStack {\n    hand: Hand;\n    constructor(source: string, hand: Hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source === this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n}\n\nexport default HandHoldingStack;\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Model from \"../Model\";\nimport { Suit } from \"../Deck/Suits\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nexport default class FoundationStack extends HandHoldingStack {\n    constructor(source: string, hand: Hand, suit: Suit) {\n        super(source, hand);\n        this.acceptedCards = [...getFoundationOrder()];\n        this.usedCards = [];\n        this.icon = suit.icon;\n        this.color = suit.color;\n    }\n    acceptedCards: string[] = [];\n    usedCards: any[] = [];\n    icon = \"\";\n    color = \"\";\n    getCurrentAccepted = () => {\n        return this.acceptedCards[this.acceptedCards.length - 1];\n    };\n    accepts = (card: Card | null) => {\n        if (!card) return false;\n        const currentAccepted = this.getCurrentAccepted();\n        return this.icon === card.type.icon && currentAccepted === card.denomination;\n    };\n    setOnClick = (onClick: (c: any, p: any) => (s: Model) => void, hand: Hand) => {\n        this.clickEmpty = (p) => onClick(null, p);\n        const cards = this.source === hand.source ? [...this.stack, ...hand.stack] : this.stack;\n        cards.forEach((card, sindex) => {\n            card.onClick = (p: any) => onClick({ ...card }, p);\n            card.canClick = () => sindex === cards.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n}\n","import Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\n\nexport default class MultiStack<T extends HandHoldingStack> {\n    stacks: T[];\n    settings: Settings;\n    hand: Hand;\n    constructor(settings: Settings, hand: Hand, stacks: T[]) {\n        this.stacks = stacks;\n        this.settings = settings;\n        this.hand = hand;\n    }\n}\n","import Card from \"../Deck/Card\";\nimport FoundationStack from \"./FoundationStack\";\nimport Hand from \"./Hand\";\nimport Model from \"../Model\";\nimport MultiStack from \"./MultiStack\";\nimport Settings from \"./Settings\";\nimport Suits from \"../Deck/Suits\";\n\nexport default class Foundation extends MultiStack<FoundationStack> {\n    constructor(settings: Settings, hand: Hand) {\n        super(settings, hand, [\n            ...Object.keys(Suits)\n                .map((key: string) => Suits[key])\n                .map((suit, index) => new FoundationStack(\"foundation-\" + index, hand, suit)),\n        ]);\n    }\n\n    setOnClick = (onClick: (c: Card, p: any, index: number) => (s: Model) => void) => {\n        this.stacks.forEach((stack, index) => {\n            stack.setOnClick((c: Card, p: any) => onClick(c, p, index), this.hand);\n        });\n    };\n\n    getCurrentAccepted = (index: number) => {\n        return this.stacks[index].getCurrentAccepted();\n    };\n\n    wouldAcceptHand = (index: number) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    accepts = (index: number, card: Card | null) => {\n        return this.stacks[index].accepts(card);\n    };\n\n    add = (index: number, cards: Card[]) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index: number, card: Card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return (card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop()) || null;\n    };\n\n    getPreviousUsed = (index: number) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => f.stack.length).reduce((a, b) => a + b, 0);\n\n    getTop = (index: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig: Foundation, hand: Hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new FoundationStack(origStack.source, hand, origStack);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src, state.foundation.getTop(index));\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card | null, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.denomination) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport interface AppliedRating {\n    points: number;\n    text: string;\n}\n\nexport interface AppliedRatingWithId extends AppliedRating {\n    id: number;\n}\n\nexport default class Rating {\n    settings: Settings;\n    points: number;\n    multiplicator: number;\n    ratings: AppliedRating[];\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n        this.ratings = [];\n    }\n\n    applyRating = (points: number, text: string) => {\n        console.debug(\"RATING:\", text);\n        this.ratings.push({ points, text });\n    };\n\n    registerMove = (target: string, source: string, card: Card | null) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove, card);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode === \"single\" && this.settings.launchSettings.recyclingMode === \"infinite\") {\n            if (this.points > 0) {\n                let diff = 0;\n                if (this.points < 100) {\n                    diff = this.points * -1;\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                    diff = -100;\n                }\n                this.applyRating(diff, `subtract ${diff} (max 100 points) for RECYCLE`);\n            }\n        }\n    };\n\n    registerUncover = (card: Card | null) => {\n        this.registerHint(this.settings.disableHint());\n        card && card.setSuccess(5);\n        this.points += 5;\n        this.applyRating(5, \"add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on: boolean) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, \"subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other: Rating) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            this.applyRating(penalty * -1, `applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done: boolean) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, `applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move: { source: string; target: string }, card: Card | null) {\n        const isTableau = (obj: string) => obj.substr(0, 7) === \"tableau\";\n        const isFoundation = (obj: string) => obj.substr(0, 10) === \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE tableau -> foundation\");\n                card && card.setSuccess(10);\n                return 10;\n            }\n        } else if (move.source === \"waste\") {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE waste -> foundation\");\n                card && card.setSuccess(10);\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                this.applyRating(5, \"add 5 points for MOVE waste -> tableau\");\n                card && card.setSuccess(5);\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                this.applyRating(-15, \"subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start: number, end: number) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    };\n\n    static copy = (orig: Rating) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        copy.ratings = [...orig.ratings];\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./Stack\";\nimport Model from \"../Model\";\n\nexport default class TimeMachine {\n    previousStates: Model[];\n    memorable: boolean;\n    modified: boolean;\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source === target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state: Model) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id: number, current: Model) => {\n        const isRequested = this.previousStates.length - 1 === id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        if (on) {\n            this.modified = true;\n            this.memorable = false;\n        }\n    }\n\n    stackEquals = (a: IStack, b: IStack) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden === b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a: { stacks: IStack[] }, b: { stacks: IStack[] }) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a: Model, b: Model) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig: TimeMachine) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Rating from \"./Rating\";\nimport Settings from \"./Settings\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    settings: Settings;\n    rating: Rating;\n    timemachine: TimeMachine;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n    }\n\n    registerMove = (target: string, source: string, card: Card | null) => {\n        this.rating.registerMove(target, source, card);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = (card: Card | null) => {\n        this.rating.registerUncover(card);\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig: Game) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./Stack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    filter: (stack: any[]) => Card[] = (stack) => {\n        return stack.filter((c) => c);\n    };\n\n    pickUp = (stack: (Card | null)[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = this.filter(stack).map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source === model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.denomination === \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source === this.source) || null;\n\n    isFromWaste = () => (this.source && this.source === \"waste\") || false;\n\n    isFromFoundation = (index: number) => this.source && this.source === `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source === `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) === \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/Stack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: (IStack | undefined)[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source === pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x === -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x === 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        const current = this.current();\n        if (!current) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = current.getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y === 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const current = this.current();\n        const last: number = current ? current.getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (!current) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current()?.source || \"\");\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = (before: { card: Card | null; stack: string }) => {\n        const clickable = this.current()?.getClickable();\n        if (\n            this.model.focus.card &&\n            this.model.focus.card.canClick() &&\n            clickable &&\n            clickable[this.currentIndex.z] &&\n            clickable[this.currentIndex.z].denomination === this.model.focus.card.denomination &&\n            clickable[this.currentIndex.z].type.icon === this.model.focus.card.type.icon\n        ) {\n            return (ctx: Model) => {\n                if (this.model.focus.card && this.model.focus.card.equals(before.card)) {\n                    this.model.focus.card.onClick({ isKeyboard: true })(ctx);\n                }\n            };\n        } else if (this.model.focus.stack && this.model.focus.stack === before.stack) {\n            return (ctx: Model) => {\n                this.current()?.clickEmpty({ isKeyboard: true })(ctx);\n            };\n        } else {\n            //this is the entry point in case user starts keyboard nav with action button\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./Stack\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Settings from \"./Settings\";\n\nexport default class Stock extends BasicStack {\n    settings: Settings;\n    recyclings: number;\n    passes: number;\n    constructor(stack: Card[], settings: Settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        if (this.settings.launchSettings.recyclingMode === \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode === \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick: (c: any, p: any, i: any) => (s: Model) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: any) => onClick({ ...card }, p, null);\n            card.canClick = () => index === this.stack.length - 1;\n        });\n    };\n    accepts = () => false;\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode === \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode === \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste: Card[]) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card: Card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card: Card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result: Card[] = [];\n        if (this.settings.launchSettings.drawMode === \"single\") {\n            const top = this.stack.pop();\n            if (top) result = [top];\n        }\n        if (this.settings.launchSettings.drawMode === \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length === 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig: Stock) => {\n        const copy = new Stock([], orig.settings);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\", state.waste.getTop());\n    };\n\n    recycleWaste = (state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\", state.waste.getTop())) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key === SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key === SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length === 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length === 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].denomination ===\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].denomination &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key === SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (\n                            this.getPutdownSuggestions(tableauState, true) >\n                            (state.settings.suggestionMode.key === SuggestionModes.FULL ? 1 : 0)\n                        ) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Model from \"../Model\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nexport default class TableauStack extends HandHoldingStack {\n    id = 0;\n    accepts = (current: Card | null) => {\n        const top = this.getTop();\n        if (!top) {\n            return (current && current.denomination === \"K\") || false;\n        }\n        if (this.source === current?.source) return true;\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = current ? range.indexOf(current.denomination) : 0;\n        const topIndex = range.indexOf(top.denomination);\n        return currentIndex + 1 === topIndex && current?.type.color !== top.type.color && top.denomination !== \"A\";\n    };\n    getTop = (offset?: number) => this.stack[this.stack.length - 1 - (offset || 0)];\n    canUncover = (card: Card) => {\n        const top = this.getTop();\n        return top.isHidden && card && card.equals(this.getTop());\n    };\n    setOnClick = (onClick: (a: any, b: any) => (s: Model) => void, onClickhidden: (a: any, b: any) => (s: Model) => void) => {\n        this.clickEmpty = (p: any) => onClick(null, p);\n        const cards = this.source === this.hand.source ? [...this.stack, ...this.hand.stack] : this.stack;\n        cards.forEach((card, sindex) => {\n            const click = card.isHidden && sindex === cards.length - 1 ? onClickhidden : onClick;\n            card.onClick = (p: any) => click({ ...card }, p);\n            card.canClick = () => !card.isHidden || (this.canUncover(card) && !this.hand.currentCard()) || false;\n        });\n        this.hand.setOnClick(this);\n    };\n    static copy = (orig: TableauStack) => {\n        const s = new TableauStack(orig.source, orig.hand);\n        s.id = orig.id;\n        s.stack = Card.copyAll(orig.stack);\n        return s;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport Model from \"../Model\";\nimport MultiStack from \"./MultiStack\";\nimport Settings from \"./Settings\";\nimport TableauStack from \"./TableauStack\";\n\nexport default class Tableau extends MultiStack<TableauStack> {\n    constructor(settings: Settings, hand: Hand) {\n        super(\n            settings,\n            hand,\n            [0, 1, 2, 3, 4, 5, 6].map((id) => {\n                const s = new TableauStack(\"tableau-\" + id, hand);\n                s.id = id;\n                return s;\n            })\n        );\n    }\n\n    setOnClick = (\n        onClick: (a: any, b: any, index: number) => (s: Model) => void,\n        onClickhidden: (a: any, b: any, index: number) => (s: Model) => void\n    ) => {\n        this.stacks.forEach((stack, index) => {\n            stack.setOnClick(\n                (a: any, b: any) => onClick(a, b, index),\n                (a: any, b: any) => onClickhidden(a, b, index)\n            );\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    putDownHand = (index: number) => this.add(index, this.hand.source, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        if (!current) return false;\n        return this.stacks[index].accepts(current);\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        return this.stacks[index].canUncover(card);\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    //@todo entropy as animated effect, triggered after rendering gamestate like blink\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy !== 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, source: string, cards: Card[]) => {\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number) => {\n        card.source = this.stacks[index].source;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].getTop(offset);\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map(TableauStack.copy);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Model from \"../Model\";\nimport Settings from \"./Settings\";\n\nexport default class Waste extends HandHoldingStack {\n    settings: Settings;\n    constructor(settings: Settings, hand: Hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n    }\n\n    setOnClick = (onClick: (c: any, p: any, i: any) => (s: Model) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        const cards = this.source === this.hand.source ? [...this.stack, ...this.hand.stack] : this.stack;\n        cards.forEach((card, index) => {\n            card.onClick = (p: any) => onClick({ ...card }, p, null);\n            card.canClick = () => index === cards.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card: Card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards: Card[]) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card: Card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    accepts = (card: Card | null) => this.canAdd(card) || false;\n\n    canAdd = (card: Card | null) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card: Card) => (card && card.equals(this.getTop()) && this.stack.pop()) || null;\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig: Waste, hand: Hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Card from \"./Deck/Card\";\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport { IStack } from \"./Game/Stack\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n    token: number;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n        this.token = obj.token;\n    }\n\n    setToken = (token: number) => {\n        this.token = token;\n    };\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    _hasSuggestion = (obj: any) => {\n        return obj.suggestion || (obj.stack && obj.stack.some(this._hasSuggestion)) || (obj.stacks && obj.stacks.some(this._hasSuggestion));\n    };\n\n    hasNonStockSuggestions = () => {\n        return (\n            this._hasSuggestion(this.waste) ||\n            this._hasSuggestion(this.tableau) ||\n            this._hasSuggestion(this.foundation)\n        );\n    }\n\n    hasSuggestions = () => {\n        return (\n            this._hasSuggestion(this.waste) ||\n            this._hasSuggestion(this.stock) ||\n            this._hasSuggestion(this.tableau) ||\n            this._hasSuggestion(this.foundation)\n        );\n    };\n\n    canAutoSolve = () => {\n        return (\n            this.waste.stack.length === 0 &&\n            this.stock.stack.length === 0 &&\n            this.tableau.stacks.every((s) => s.stack.every((c) => !c.isHidden))\n        );\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    clearSuccess = (card: Card) => {\n        const clear = (c: Card, s: IStack) => {\n            s.stack.forEach((_c) => {\n                if (_c.equals(c)) {\n                    _c.success = 0;\n                }\n            });\n        };\n        clear(card, this.stock);\n        clear(card, this.waste);\n        this.foundation.stacks.forEach((s) => clear(card, s));\n        this.tableau.stacks.forEach((s) => clear(card, s));\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()));\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck, player: number) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings, player),\n            token: 0,\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n            token: state.token,\n        });\n    };\n}\n","import { StateReplaceFunction, StateUpdateFunction } from \"../Common\";\n\nimport Model from \"../Model/Model\";\nimport React from \"react\";\n\ninterface IGlobalContext {\n    state: Model | null;\n    replaceContext: StateReplaceFunction;\n    updateContext: StateUpdateFunction;\n    updateGameContext: StateUpdateFunction;\n    restart: () => void;\n}\n\ninterface XGlobalContext {\n    state: Model;\n    replaceContext: StateReplaceFunction;\n    updateContext: StateUpdateFunction;\n    updateGameContext: StateUpdateFunction;\n    restart: () => void;\n}\n\nconst useGlobalContext: () => XGlobalContext = () => {\n    const ctx = React.useContext(GlobalContext);\n    if (!ctx.state) {\n        throw new Error(\"no state present\");\n    }\n    return { ...ctx, state: ctx.state };\n};\n\nconst defaultValue = {\n    state: null,\n    replaceContext: () => {},\n    updateContext: () => {},\n    updateGameContext: () => {},\n    restart: () => {},\n};\n\nconst GlobalContext = React.createContext<IGlobalContext>(defaultValue);\n\nexport const Provider = GlobalContext.Provider;\n\nexport default useGlobalContext;\n","//- auto-resolver\n//  - check if the board can auto-resolve and offer to complete automatically\n//  - auto-complete becomes button in header and option in menu\n\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport SuggestionModes from \"../../../Model/Game/Settings/SuggestionModes\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst RenderAutoSolve = (props: { canAutosolve: boolean }) => {\n    const [solving, setSolving] = React.useState(false);\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        if (props.canAutosolve) {\n            updateGameContext((ctx) => (ctx.settings.suggestionMode = SuggestionModes.get(SuggestionModes.NONE)));\n            setSolving(true);\n        }\n    }, [props.canAutosolve, updateGameContext]);\n    const canSolve = solving && state.settings.suggestionMode.key === SuggestionModes.NONE;\n    return !canSolve ? null : <Solver />;\n};\n\nexport const AutoSolver = () => {\n    const { state } = useGlobalContext();\n    return <RenderAutoSolve canAutosolve={state.canAutoSolve()} />;\n};\n\nexport default AutoSolver;\n\n//@todo also start general confetti firework elements when autosolving\n//@todo autosolve looks and feels slow: disable individual fireworks & reduce timeout duration\n\nconst Solver = () => {\n    const { state, updateGameContext } = useGlobalContext();\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            const copy = Model.copy(state).withHandlers();\n            if (copy.hand.currentCard()) {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.foundation)) {\n                    const suggestedFoundations = copy.foundation.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedFoundations.length) {\n                        const suggestedFoundation = suggestedFoundations[0];\n                        updateGameContext(suggestedFoundation.clickEmpty({ isKeyboard: false }));\n                    }\n                }\n            } else {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.tableau)) {\n                    const suggestedTableaus = copy.tableau.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedTableaus.length) {\n                        const suggestedCards = suggestedTableaus[0].stack.filter((c) => c.suggestion);\n                        if (suggestedCards.length) {\n                            const suggestedCard = suggestedCards[0];\n                            updateGameContext(suggestedCard.onClick({ isKeyboard: false }));\n                        }\n                    }\n                }\n            }\n        }, 150);\n\n        return () => clearTimeout(timeout);\n    });\n    return null;\n};\n","import React from \"react\";\n\nexport interface IGameState {\n    started: number;\n    isEnded: boolean;\n    end: number;\n    winner: number;\n    loser: number;\n}\n\nexport interface IGameContext {\n    gameState: IGameState;\n    win: (player: number) => void;\n    giveUp: (player: number) => void;\n    start: () => void;\n}\n\nexport const defaultGameState = {\n    started: 0,\n    isEnded: false,\n    end: 0,\n    winner: -1,\n    loser: -1,\n};\n\nconst GameContext = React.createContext<IGameContext>({\n    gameState: defaultGameState,\n    win: () => {},\n    start: () => {},\n    giveUp: () => {},\n});\n\nconst useGameContext = () => React.useContext(GameContext);\n\nexport default useGameContext;\n\nexport const GameContextProvider = (props: { children: React.ReactNode }) => {\n    const [gameState, setGameState] = React.useState<IGameState>(defaultGameState);\n    const context = {\n        gameState,\n        win: (player: number) => setGameState({ ...gameState, end: Date.now(), isEnded: true, winner: player }),\n        start: () => setGameState({ ...gameState, started: Date.now() }),\n        giveUp: (player: number) => {\n            // @todo if one user gives up, the other should be allowed to continue to increase points\n            // - this motivates users to employ the undo function to keep trying\n            // @todo show dialog informaing that other user gave up as well\n            // - options: give up + continue\n            // @todo track \"givenUp\" status per player\n            // - winner is always the player with more points\n            setGameState({ ...gameState, end: Date.now(), isEnded: true, loser: player });\n        },\n    };\n    return <GameContext.Provider value={context}>{props.children}</GameContext.Provider>;\n};\n","import React from \"react\";\nimport useGlobalContext from \"./GlobalContext\";\n\nconst useTokenEffect = (f: React.EffectCallback) => {\n    const { state } = useGlobalContext();\n    // this hook only runs when the token changes. intentionally.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return React.useEffect(f, [state.token]);\n};\n\nexport default useTokenEffect;\n","import React from \"react\";\nimport useGameContext from \"../../Context/GameContext\";\nimport useGlobalContext from \"../../GlobalContext\";\nimport useTokenEffect from \"../../useGlobalTokenEffect\";\n\nconst Uncoverer = () => {\n    const { state, updateGameContext } = useGlobalContext();\n    useTokenEffect(() => {\n        if (!state.hand.currentCard()) {\n            state.tableau.stacks.forEach((stack) => {\n                if (stack.getTop() && stack.getTop().isHidden && stack.getTop().canClick()) {\n                    updateGameContext(stack.getTop().onClick({ isKeyboard: true }));\n                }\n            });\n        }\n    });\n    return null;\n};\n\nconst AutoUncoverer = () => {\n    const { state } = useGlobalContext();\n    const { gameState } = useGameContext();\n    return !!state.settings.launchSettings.autoUncover && !!gameState.started ? <Uncoverer /> : null;\n};\n\nexport default AutoUncoverer;\n","import React from \"react\";\n\nconst BoardContext = React.createContext({\n    player: 0,\n});\n\nexport const useBoardContext = () => React.useContext(BoardContext);\n\nexport const BoardProvider = BoardContext.Provider;\n","import { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GamePad from \"../../../common/GamePad\";\nimport GamepadLayout from \"../../../common/GamepadLayout\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport { useBoardContext } from \"../../Context/BoardContext\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst BoardGamePad = (props: CustomInputProps) => {\n    const { state } = useGlobalContext();\n    const { player } = useBoardContext();\n    const isGamePadDriven = state.settings.launchSettings.players[player].inputMethod === \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n\n    const switchToGamePad = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.players[player].inputMethod = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            layout={GamepadLayout}\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight(switchToGamePad)}\n            onUp={() => props.onUp(switchToGamePad)}\n            onDown={() => props.onDown(switchToGamePad)}\n            onAction={() => props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToGamePad)}\n            onMenu={() => props.onMenu(switchToGamePad)}\n        />\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"../../../common/KeyboardLayouts\";\n\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport Keyboard from \"../../../common/Keyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport { useBoardContext } from \"../../Context/BoardContext\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst BoardKeyboard = (props: CustomInputProps) => {\n    const { state } = useGlobalContext();\n    const { player } = useBoardContext();\n    const isKeyboardDriven = state.settings.launchSettings.players[player].inputMethod === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.players[player].inputMethod = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import React from \"react\";\nimport useGameContext from \"./GameContext\";\n\nexport interface IPauseState {\n    //started: number;\n    end: number;\n    paused: boolean;\n    pauses: number[];\n    pauseStartedAt: number;\n    allowed: number;\n    isSilent?: boolean;\n    pausedBy: number;\n    showMenu: boolean;\n    showCards: boolean;\n}\nexport interface IPauseContext {\n    state: IPauseState;\n    togglePause: (isPaused: boolean, pausedBy: number) => void;\n    toggleMenu: (show: boolean) => void;\n    getElapsed: () => string;\n}\nexport const defaultPauseState: IPauseState = {\n    end: 0,\n    paused: false,\n    pauses: [],\n    pauseStartedAt: 0,\n    allowed: 5,\n    pausedBy: -1,\n    showMenu: false,\n    showCards: true,\n};\nexport const defaultPauseContext = {\n    state: defaultPauseState,\n    togglePause: () => {},\n    toggleMenu: () => {},\n    getElapsed: () => \"\",\n};\n\nconst PauseContext = React.createContext<IPauseContext>(defaultPauseContext);\n\nexport const PauseProvider = (props: { children: React.ReactNode }) => {\n    const { gameState } = useGameContext();\n    const [paused, setPaused] = React.useState<IPauseState>({ ...defaultPauseState });\n    const getElapsedMs = () => {\n        const pauses = paused.pauses.reduce((a, b) => a + b, 0);\n        return (paused.end || paused.pauseStartedAt || Date.now()) - gameState.started - pauses;\n    };\n\n    const getElapsed = () => {\n        const padleft = (i: number) => ((i + \"\").length === 1 ? \"0\" + i : i);\n        let msec = getElapsedMs();\n        const hh = Math.floor(msec / 1000 / 60 / 60);\n        msec -= hh * 1000 * 60 * 60;\n        const mm = Math.floor(msec / 1000 / 60);\n        msec -= mm * 1000 * 60;\n        const ss = Math.floor(msec / 1000);\n        msec -= ss * 1000;\n        return hh ? hh + \":\" + padleft(mm) + \":\" + padleft(ss) : padleft(mm) + \":\" + padleft(ss);\n    };\n    const togglePause = (isPaused: boolean, pausedBy: number) => {\n        if (paused.showMenu) {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauses: [...paused.pauses, Date.now() - paused.pauseStartedAt],\n                pauseStartedAt: 0,\n                paused: false,\n                showMenu: false,\n                showCards: true,\n            });\n        } else if (paused.pauses.length < paused.allowed) {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauseStartedAt: Date.now(),\n                paused: true,\n                showMenu: true,\n                showCards: false,\n            });\n        } else {\n            setPaused({\n                ...paused,\n                pausedBy: pausedBy,\n                pauseStartedAt: 0,\n                paused: false,\n                showMenu: true,\n                showCards: false,\n            });\n        }\n    };\n    const toggleMenu = (show: boolean) => {\n        setPaused({\n            ...paused,\n            showMenu: show,\n            showCards: true,\n        });\n    };\n    const context = {\n        state: { ...paused, started: gameState.started },\n        togglePause,\n        toggleMenu,\n        getElapsed,\n    };\n\n    return <PauseContext.Provider value={context}>{props.children}</PauseContext.Provider>;\n};\n\nconst usePauseContext = () => React.useContext(PauseContext);\n\nexport default usePauseContext;\n","import BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport { useBoardContext } from \"../../Context/BoardContext\";\nimport useGlobalContext from \"../../GlobalContext\";\nimport usePauseContext from \"../../Context/PauseContext\";\n\ntype _mod = (state: Model) => void;\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = useGlobalContext();\n    const paused = usePauseContext();\n    const { player } = useBoardContext();\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const beforeFocused = { card: state.focus.card, stack: state.focus.stack };\n    const isPaused = !!paused.state.paused;\n\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const handlers = {\n        onLeft: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveLeft(before);\n            }),\n\n        onRight: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveRight(before);\n            }),\n\n        onUp: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveUp(before);\n            }),\n\n        onDown: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveDown(before);\n            }),\n\n        onAction: (modifier: _mod) =>\n            updateGameContext((ctx) => {\n                modifier(ctx);\n                const handler = state?.navigator?.pressCurrent(beforeFocused);\n                handler && handler(ctx);\n                ctx.navigator.finishNav();\n            }),\n\n        onCancel: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n            }),\n\n        onPause: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n\n        onHint: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n                if (isVisible(state) && !isDisabled(state)) {\n                    state.settings.enableHint();\n                }\n            });\n        },\n\n        onUndo: () => {\n            //@todo use GlobalState token to avoid double processing (pass in token via props to always have updated version)\n            replaceContext((_state) => {\n                const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n                if (previous) {\n                    previous.game.rating.penalize(_state.game.rating);\n                    return previous;\n                }\n\n                return null;\n            });\n        },\n        onMenu: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n    };\n\n    return paused.state.showMenu ? null : (\n        <>\n            <BoardKeyboard {...handlers} />\n            <BoardGamePad {...handlers} />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import { useEffectOnce } from \"react-use\";\nimport useGameContext from \"../../Context/GameContext\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Dealer = () => {\n    const { state, replaceContext } = useGlobalContext();\n    const { gameState, start } = useGameContext();\n    useEffectOnce(() => {\n        if (!gameState.started) {\n            const timeouts: NodeJS.Timeout[] = [];\n            if (state.settings.launchSettings.quickDeal) {\n                if (!state.dealer.isDealt) {\n                    start();\n                    replaceContext(state.dealer.dealAll());\n                }\n            } else {\n                const deal = (dealt: number) =>\n                    timeouts.push(\n                        setTimeout(() => {\n                            if (!state.dealer.isDealt) {\n                                replaceContext(state.dealer.dealOne(dealt, deal));\n                            } else {\n                                start();\n                            }\n                        }, 35)\n                    );\n\n                deal(state.dealer.dealt);\n                return () => timeouts.forEach((timeout) => clearTimeout(timeout));\n            }\n        }\n    });\n    return null;\n};\nexport default Dealer;\n","import React from \"react\";\nimport { WindowDimensionContext } from \"./AspectRatio/AspectRatio\";\nimport { usePreview } from \"react-dnd-preview\";\n\nconst DndPreview = (props: { reff: HTMLElement }) => {\n    const [rect, setRect] = React.useState<{ left: number; top: number }>();\n    const { width, height } = React.useContext(WindowDimensionContext);\n    React.useEffect(() => {\n        const domRect = props.reff.getBoundingClientRect();\n        setRect({\n            left: domRect.left * -1,\n            top: domRect.top * -1,\n        });\n        //@todo introduce resizeContext that we can subscribe to, so we only recalculate the BoundingClientRect of the container when window was resized\n    }, [props.reff, width, height]);\n    const { display, item, style } = usePreview();\n    if (!display || !rect || !item) {\n        return null;\n    }\n    return (\n        <div\n            style={{\n                ...style,\n                position: \"relative\",\n                width: \"100%\",\n                left: rect.left,\n                top: rect.top,\n                zIndex: 2000,\n                opacity: 1,\n            }}\n        >\n            {item.render}\n        </div>\n    );\n};\n\nexport default DndPreview;\n","import { mdiFlagOutline, mdiHandBackLeft, mdiPlay } from \"@mdi/js\";\n\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport { NavigationProvider } from \"./StartScreen/Navigation/NavigationContext\";\nimport React from \"react\";\nimport { Universal } from \"../../common/KeyboardLayouts\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePauseContext from \"../Context/PauseContext\";\nimport useTokenEffect from \"../useGlobalTokenEffect\";\n\nconst PossibleFailScreen = () => {\n    const { state } = useGlobalContext();\n    const [refused, setRefused] = React.useState<{ refused: boolean; since: number }>({ refused: false, since: 0 });\n    const refuse = (val: boolean) => {\n        setRefused({\n            refused: refused.since >= 3 ? false : val,\n            since: refused.since >= 3 ? 0 : refused.since + 1,\n        });\n    };\n    useTokenEffect(() => {\n        if (!state.hand.currentCard() && refused.refused) {\n            refuse(true);\n        }\n    });\n    const pause = usePauseContext();\n    //@todo\n    //instead of immediate quit, use gamestate.giveUp, then allow quitting via EndScreen\n    //in versus this lets the other player gloat and confirm before exiting game\n    const { restart } = useGlobalContext();\n    React.useEffect(() => {\n        if (!pause.state.showMenu) {\n            pause.toggleMenu(true);\n        }\n        return () => pause.toggleMenu(false);\n        //@todo antipattern?\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [refused.refused]);\n    return !refused.refused ? (\n        <NavigationProvider>\n            <div className=\"gamemenu menu dialog\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle icon={mdiHandBackLeft} />\n                        <div className=\"announcement\">The game might be over</div>\n                        <MenuTree keyboardLayout={Universal}>\n                            <MenuButton\n                                icon={mdiPlay}\n                                title=\"Keep trying\"\n                                onClick={() => {\n                                    refuse(true);\n                                }}\n                            />\n                            <MenuButton icon={mdiFlagOutline} title=\"Give up\" onClick={() => restart()} />\n                        </MenuTree>\n                    </div>\n                </div>\n            </div>\n        </NavigationProvider>\n    ) : null;\n};\nexport default PossibleFailScreen;\n","import Card from \"../../../Model/Deck/Card\";\nimport Model from \"../../../Model/Model\";\nimport PossibleFailScreen from \"../../UI/PossibleFailScreen\";\nimport React from \"react\";\nimport SuggestionModes from \"../../../Model/Game/Settings/SuggestionModes\";\nimport useGameContext from \"../../Context/GameContext\";\nimport useGlobalContext from \"../../GlobalContext\";\nimport useTokenEffect from \"../../useGlobalTokenEffect\";\n\nconst FailDetector = () => {\n    const { state } = useGlobalContext();\n    const { gameState } = useGameContext();\n\n    const [suggestions, setSuggestions] = React.useState<{ any: boolean; stock: boolean; nonStock: boolean }>({\n        any: false,\n        stock: false,\n        nonStock: false,\n    });\n    useTokenEffect(() => {\n        if (gameState.started) {\n            const copy = Model.copy(state);\n            copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.FULL);\n            copy.suggestor.evaluateOptions(copy);\n            setSuggestions({\n                any: copy.hasSuggestions(),\n                stock: copy._hasSuggestion(copy.stock),\n                nonStock: copy.hasNonStockSuggestions(),\n            });\n        }\n    });\n\n    const [stockSuggestionCards, setStockSuggestionCards] = React.useState<Card[]>([]);\n    const [isPossibleFail, setPossibleFail] = React.useState<boolean>(false);\n    React.useEffect(() => {\n        if (!state.hand.currentCard() && gameState.started) {\n            //fail detection never ends the game, merely offers to quit or keep trying\n            //it also aquaints the user with the possibiltiy of undoing or restarting to be helpful\n            if (suggestions.nonStock) {\n                setStockSuggestionCards([]);\n                setPossibleFail(false);\n            } else if (suggestions.stock && !suggestions.nonStock) {\n                //@todo CYCLING FAIL DETECTION\n                //even with a full suggestion available, the situation may be hopeless\n                //that is true if the suggestion concerns the stock\n                //to find out if it's really hopeless, we need to track full cycles through the deck\n                //if a full cycle through the stack was performed and only stock suggestions came up\n                //it's basically a loss, same as above\n                //to achieve this we can store all cards that produced stock suggestions in a list\n                //as long as stock suggestions come up we add to the list\n                //once list has same length as stock + waste + hand(waste) we know it's over\n                //once we find a non-stock suggestion we empty out the list\n                const top = state.stock.getTop();\n                if (top) {\n                    setStockSuggestionCards([...stockSuggestionCards, top]);\n                }\n                if (state.stock.stack.length + state.waste.stack.length <= stockSuggestionCards.length) {\n                    setPossibleFail(true);\n                }\n                //however this whole fancy thing doesn't work if there are useless \"full\" suggestions.\n                //if the user is in full mode, and ignores these, it's a sign it's over\n                //if the user is in regular mode or lesser, we could recommend switching to full suggestions\n                //but that's not really the job of a faildetector\n            } else if (!suggestions.any) {\n                //@todo SIMPLE FAIL DETECTION\n                //no full suggestions = no moves possible mean fail unless all cards are in foundation\n                setPossibleFail(true);\n                //@todo implement menu clone that suggests to stop since there is nothing to do anymore\n            }\n        }\n        //@todo anti pattern?\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [suggestions]);\n\n    return isPossibleFail ? <PossibleFailScreen /> : null;\n};\n\nexport default FailDetector;\n","import React from \"react\";\nimport confetti from \"canvas-confetti\";\n\nconst Firework = (props: { intensity: number }) => {\n    const canvasRef = React.createRef<HTMLCanvasElement>();\n    React.useEffect(() => {\n        if (canvasRef && canvasRef.current && props.intensity) {\n            const count = 15 * props.intensity;\n            const origin = {\n                x: 0.5,\n                y: 0.33,\n            };\n\n            const scalar = window.innerWidth / (1080 / 100) / 100;\n            const defaults = {\n                ticks: 50,\n                origin,\n                particleCount: 40,\n                startVelocity: scalar * 20,\n                decay: 0.8,\n                spread: 360,\n                scalar: scalar,\n            };\n            const localConfetti = confetti.create(canvasRef.current, { resize: true });\n\n            const fire = (particleRatio: number, opts: confetti.Options) => {\n                localConfetti(\n                    Object.assign({}, defaults, opts, {\n                        particleCount: Math.floor(count * particleRatio),\n                    })\n                );\n            };\n\n            fire(0.25, {\n                startVelocity: scalar * 55,\n            });\n            fire(0.2, {\n                decay: 1.2,\n            });\n            fire(0.35, {\n                decay: 0.91,\n                scalar: scalar - 0.2,\n            });\n            fire(0.1, {\n                startVelocity: scalar * 25,\n                decay: 0.92,\n                scalar: scalar + 0.2,\n            });\n            fire(0.1, {});\n            fire(0.1, {\n                startVelocity: scalar * 45,\n            });\n        }\n    }, [canvasRef, props.intensity]);\n\n    return <canvas ref={canvasRef}></canvas>;\n};\n\nexport default Firework;\n","import CardModel from \"../../Model/Deck/Card\";\nimport Firework from \"./Firework\";\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst CardFirework = (props: { model: CardModel }) => {\n    const { state, updateContext } = useGlobalContext();\n\n    React.useEffect(() => {\n        if (props.model.success) {\n            const timeout = setTimeout(() => updateContext((ctx) => ctx.clearSuccess(props.model)));\n            return () => clearTimeout(timeout);\n        }\n    }, [state?.token, props.model, updateContext, props.model.success]);\n    return <Firework intensity={props.model.success} />;\n};\n\nexport default CardFirework;\n","import React, { MouseEventHandler, useCallback } from \"react\";\n\nimport CardFirework from \"./CardFirework\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport GameModes from \"../../GameModes\";\nimport Icon from \"@mdi/react\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport { useBoardContext } from \"../Context/BoardContext\";\nimport { useDrag } from \"react-dnd\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePauseContext from \"../Context/PauseContext\";\n\nconst useCardStyle = (model: CardModel | null, props: CardProps, _isDrag: () => boolean, opacity: any) => {\n    const getCardStyle = useCallback(() => {\n        if (!model) {\n            return {};\n        }\n        const style = {\n            opacity: _isDrag() ? 0 : opacity,\n            zIndex: (props.zIndex ? props.zIndex : (props.offsetTop && props.offsetTop(props.index, props.models) > 0 ? 1 : 0) * 20) + 1,\n            top: props.offsetTop ? props.offsetTop(props.index, props.models) / 15 + \"em\" : 0,\n            ...model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft(props.index) * 2 + \"em\";\n        }\n\n        if (!model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    }, [model, props, _isDrag, opacity]);\n\n    const [cardStyle, setCardStyle] = React.useState<any>(getCardStyle());\n\n    React.useEffect(() => {\n        setCardStyle(getCardStyle);\n    }, [getCardStyle]);\n    return cardStyle;\n};\n\n//@todo this makes the card flash when placing on green table. class is first assigned empty\nconst useClassName = (model: CardModel | null, props: CardProps, _isDrag: () => boolean, isFocused: () => boolean) => {\n    const getClassName = useCallback(() => {\n        if (!model) {\n            return \"card card-base\";\n        }\n        const hasSuggestion = (props.isSuggested && props.isSuggested(props.index)) || model.suggestion;\n        let className = `card card-base card-${model.type.color}`;\n        className +=\n            (!props.isSelected || !props.isSelected(props.index)) && !isFocused() && !hasSuggestion ? ` card-stack-${model.source}` : \"\";\n        className += !_isDrag() && props.isSelected && props.isSelected(props.index) && !_isDrag() ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += model.canClick() ? \" clickable\" : \"\";\n        className += hasSuggestion && !isFocused() ? \" card-suggested\" : \"\";\n        className += isFocused() ? \" card-focused\" : \"\";\n        return className;\n    }, [_isDrag, isFocused, model, props]);\n\n    const [className, setClassName] = React.useState<string>(getClassName());\n\n    React.useEffect(() => {\n        setClassName(getClassName());\n    }, [getClassName]);\n\n    return className;\n};\n\nconst useStackBaseStyle = (model: CardModel | null) => {\n    const getStackbaseStyle: () => React.CSSProperties = useCallback(() => {\n        if (!model || !model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    }, [model]);\n\n    const [stackbaseStyle, setStackbaseStyle] = React.useState<any>(getStackbaseStyle());\n\n    React.useEffect(() => {\n        setStackbaseStyle(getStackbaseStyle());\n    }, [getStackbaseStyle]);\n    return stackbaseStyle;\n};\n\ntype CardProps = {\n    index: number;\n    models: CardModel[];\n    isSuggested?: (index: number) => boolean | undefined;\n    isSelected?: (index: number) => boolean;\n    blink?: number;\n    zIndex?: number;\n    offsetTop?: (index: number, models: CardModel[]) => number;\n    offsetLeft?: (index: number) => number;\n    isDrag?: boolean;\n};\n\nconst ReRender = (props: CardProps) => (\n    <Card\n        {...{\n            ...props,\n            models: props.models.slice(props.index, props.models.length),\n            offsetLeft: () => 0,\n            isSelected: () => false,\n            index: 0,\n        }}\n    />\n);\nReRender.displayName = \"ReRender\";\n\nconst Card = (props: CardProps) => {\n    const { player } = useBoardContext();\n    const { state, updateGameContext } = useGlobalContext();\n    const pause = usePauseContext();\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const [isDrag, setDrag] = React.useState<boolean>(!!props.isDrag);\n    const model: CardModel = props.models[props.index];\n    const isFocused = useCallback(() => (!!model && state.focus.hasCard(model)) || false, [model, state.focus]);\n    const _isDrag = useCallback(() => props.isDrag || isDrag, [props.isDrag, isDrag]);\n    const [{ opacity }, dragRef, preview] = useDrag({\n        type: \"card\",\n        item: (_monitor) => {\n            setDrag(true);\n            if (model.onClick && (!props.isSelected || !props.isSelected(props.index))) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n            return { type: \"card\", model: model, render: ReRender(props) };\n        },\n        collect: (monitor) => {\n            return { opacity: monitor.isDragging() ? 1 : 1 };\n        },\n        canDrag: () => model.canClick() && !model.isHidden && (state.hand.currentCard() === null || model.equals(state.hand.currentCard())),\n\n        end: (_item, monitor) => {\n            setDrag(false);\n            if (!monitor.didDrop()) {\n                setTimeout(\n                    () =>\n                        updateGameContext((context) => {\n                            model.onClick({ isKeyboard: false })(context);\n                        }),\n                    1\n                );\n            }\n        },\n    });\n\n    //Deactivate native dnd preview - it's fast but it's not working on mobile.\n    React.useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, [preview]);\n\n    const getRef = useCallback(() => (model.canClick() ? dragRef : inputEl), [inputEl, model, dragRef]);\n\n    const onClick: MouseEventHandler<HTMLButtonElement> = (e) => {\n        e.preventDefault();\n        //@todo catch all focuses in hidden input element on board\n        //then remove isKeyboard logic from card\n        //tab nav wont be supported\n        const isKeyBoard = e.clientX === 0 && e.clientY === 0;\n        let ele = e.target as HTMLElement;\n\n        while (ele && !ele.className.includes(\"card-base\") && ele.offsetParent) {\n            ele = ele.offsetParent as HTMLElement;\n        }\n\n        const rect = ele.getBoundingClientRect();\n\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - (ele?.ownerDocument?.defaultView?.pageXOffset || 0),\n                y: e.clientY - (ele?.ownerDocument?.defaultView?.pageYOffset || 0),\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n\n        // When clicking on a card, move the focus (switch from keyboard to mouse nav)\n        // @todo do the same on drag start\n        const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n        if (model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.players[player].inputMethod = \"mouse\";\n                }\n            });\n        }\n    };\n\n    const className = useClassName(model, props, _isDrag, isFocused);\n    const cardStyle = useCardStyle(model, props, _isDrag, opacity);\n    const stackbaseStyle = useStackBaseStyle(model);\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n    //@todo entropy as animated effect, triggered after rendering of action\n\n    if (!props.models.length) {\n        return null;\n    }\n\n    //@todo creating a custom layout was fun, but the users deserve a more professional looking SVG\n    //e.g. https://totalnonsense.com/download/download-vector-playing-cards/\n\n    const SuitIcon = () => (\n        <div className=\"align-center\">\n            <Icon size=\"0.8em\" color={model.type.color} path={model.type.icon} />\n        </div>\n    );\n\n    return (\n        <>\n            <div style={stackbaseStyle} className=\"stack-base\">\n                <button\n                    style={cardStyle}\n                    ref={getRef()}\n                    className={className}\n                    onClick={onClick}\n                    disabled={!model.canClick() || !pause.state.showCards}\n                    tabIndex={model.canClick() ? 0 : -1}\n                >\n                    <CardFirework model={model} />\n                    <div className=\"card-content\">\n                        {model.isHidden || !pause.state.showCards ? (\n                            <div className=\"card-back\">&nbsp;</div>\n                        ) : (\n                            <div className=\"card-grid-container\">\n                                <div>\n                                    <SuitIcon />\n                                </div>\n                                <div>\n                                    <div className=\"align-left\">{model.denomination}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <SuitIcon />\n                                </div>\n                                <div className=\"mainface\">\n                                    <div className=\"align-center\">{model.denomination} </div>\n                                </div>\n                                <div>\n                                    <SuitIcon />\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-right\">{model.denomination}</div>\n                                </div>\n                                <div>\n                                    <SuitIcon />\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </button>\n            </div>\n            {props.models.length - 1 > props.index && <Card {...props} isDrag={_isDrag()} index={props.index + 1} />}\n        </>\n    );\n};\n\nexport default Card;\n","import React, { MouseEventHandler, useCallback } from \"react\";\n\nimport { IStack } from \"../../Model/Game/Stack\";\nimport useGlobalContext from \"../GlobalContext\";\n\nconst StackBase = (props: { model: IStack; children?: React.ReactNode }) => {\n    const { state, updateGameContext } = useGlobalContext();\n    \n    const getClassName = useCallback(() => {\n        let classname = \"card-base socket\";\n        if (!props.model.stack.length) {\n            if (props.model.blinkFor) {\n                classname += \" socket-blink\";\n            } else if (state.focus.hasStack(props.model.source)) {\n                classname += \" socket-focused\";\n            } else {\n                classname += \" socket-empty\";\n            }\n        } else {\n            classname += \" socket-full\";\n        }\n\n        if (props.model.suggestion && !props.model.stack.length) {\n            classname += \" socket-suggested\";\n        }\n        return classname;\n    }, [props.model.stack.length, props.model.suggestion, props.model.blinkFor, props.model.source, state.focus]);\n\n    const onClick: MouseEventHandler<HTMLButtonElement> = (e) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX === 0 && e.clientY === 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    return (\n        <button\n            className={getClassName()}\n            onClick={onClick}\n            disabled={!!props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import { IStack } from \"../../../Model/Game/Stack\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\ntype _selector = (model: Model) => IStack;\n\nconst useBlinkEffect = (selector: _selector) => {\n    const { updateContext, state } = useGlobalContext();\n    const model = selector(state);\n    React.useEffect(() => {\n        let timeout: NodeJS.Timeout | null = null;\n        if (state && selector(state).blinkFor) {\n            timeout = setTimeout(\n                () =>\n                    updateContext((state: Model) => {\n                        selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n        return () => {\n            timeout && clearTimeout(timeout);\n        };\n    }, [state, model.blinkFor, updateContext, selector]);\n};\n\nexport default useBlinkEffect;\n","import { IStack } from \"../../../Model/Game/Stack\";\nimport { useDrop } from \"react-dnd\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nexport const useStackDrop = (model: IStack, accepts?: (c: any) => boolean) => {\n    const { updateGameContext } = useGlobalContext();\n    return useDrop({\n        accept: \"card\",\n        canDrop: (item: any) => {\n            return (accepts && accepts(item.model)) || model.accepts(item.model);\n        },\n        drop: () => {\n            updateGameContext(model.clickEmpty({ isKeyBoard: false }));\n        },\n    })[1];\n};\n","import Card from \"./Card\";\nimport FoundationStackModel from \"../../Model/Game/FoundationStack\";\nimport Icon from \"@mdi/react\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./Hooks/useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\nimport { useStackDrop } from \"./Hooks/useStackDrop\";\n\ntype FoundationProps = { index: number; model: FoundationStackModel };\n\nconst Foundation = () => {\n    const { state } = useGlobalContext();\n    return (\n        <>\n            {state.foundation.stacks.map((foundation, index) => (\n                <FoundationStack key={index} model={foundation} index={index} />\n            ))}\n        </>\n    );\n};\n\nexport default Foundation;\n\nconst FoundationStack = (props: FoundationProps) => {\n    useBlinkEffect((model) => model.foundation.stacks[props.index]);\n    const { state } = useGlobalContext();\n    const model = props.model;\n    const drop = useStackDrop(props.model);\n    const cards = state.hand.source === model.source ? [...model.stack, ...state.hand.stack] : [...model.stack];\n    return (\n        <div className=\"board-field\" key={props.index} ref={drop}>\n            <StackBase model={model}>\n                <div className={\"align-center foundation-base suit-\" + model.icon}>\n                    <Icon path={model.icon} size={4} horizontal  color={model.color} />\n                </div>\n            </StackBase>\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={model.blinkFor}\n                isSuggested={(index) => model.suggestion && model.stack.length - 1 === index}\n                isSelected={(index) => index > model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import React from \"react\";\nimport useGameContext from \"../../Context/GameContext\";\nimport usePauseContext from \"../../Context/PauseContext\";\n\nconst Clock = () => {\n    const { state, getElapsed } = usePauseContext();\n    const { gameState } = useGameContext();\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (gameState.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [gameState.started, state.paused, getElapsed]);\n\n    return !gameState.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Hearts = () => {\n    const { state } = useGlobalContext();\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode === \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode === \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode === \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import Model from \"../../../Model/Model\";\nimport React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Hint = () => {\n    const { state, updateContext } = useGlobalContext();\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import React from \"react\";\nimport { toast } from \"react-toastify\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Points = () => {\n    const { state } = useGlobalContext();\n    const showToast = () => {\n        toast.info(\n            <ul>\n                {state.game.rating.ratings.reverse().map((rating, index) => (\n                    <li key={index}>\n                        {rating.points} - {rating.text}\n                    </li>\n                ))}\n            </ul>,\n            { autoClose: false }\n        );\n    };\n    return (\n        <div>\n            <button title=\"Points\" onClick={showToast}>\n                <span className=\"icon\">🏆</span>\n            </button>\n            {state?.game.rating.points}\n        </div>\n    );\n};\n\nexport default Points;\n","import React from \"react\";\nimport { useBoardContext } from \"../../Context/BoardContext\";\nimport usePauseContext from \"../../Context/PauseContext\";\n\nconst ToggleMenu = () => {\n    const paused = usePauseContext();\n    const { player } = useBoardContext();\n\n    return paused.state.showMenu ? null : (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import React from \"react\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Undo = () => {\n    //@todo use GlobalState token to avoid double processing\n    const { state, replaceContext } = useGlobalContext();\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"./Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons header-right\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import \"./StartScreen/Menu.scss\";\n\nimport { Universal, getKeyboardLayout } from \"../../common/KeyboardLayouts\";\nimport { mdiDelete, mdiPlay, mdiRecycle, mdiSleep, mdiWeatherTornado, mdiWeatherWindy } from \"@mdi/js\";\nimport useNavigationContext, { NavigationProvider } from \"./StartScreen/Navigation/NavigationContext\";\n\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GameModes from \"../../GameModes\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\nimport { useBoardContext } from \"../Context/BoardContext\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePauseContext from \"../Context/PauseContext\";\n\nconst _Menu = () => {\n    return (\n        <NavigationProvider>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = useGlobalContext();\n    const pause = usePauseContext();\n    const { player } = useBoardContext();\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too if consented and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = useNavigationContext();\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining === 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining === 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) {\n        announcement = \"The game is not paused.\";\n    }\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle icon={mdiSleep } />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle icon={mdiSleep } />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon={mdiPlay}\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                        />\n                        <MenuButton\n                            icon={mdiWeatherTornado}\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            toggled={navigation.mainMenu === \"entropy\"}\n                        >\n                            <MenuButton\n                                icon={mdiWeatherTornado}\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                            />\n                            <MenuButton\n                                icon={mdiWeatherWindy}\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon={mdiRecycle}\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon={mdiDelete} title=\"Quit Game\" onClick={() => restart()} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import Card from \"./Card\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./Hooks/useBlinkEffect\";\nimport useGameContext from \"../Context/GameContext\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePauseContext from \"../Context/PauseContext\";\nimport { usePrevious } from \"react-use\";\n\nconst Renderer = (props: { length: number; paused: boolean; started: number }) => {\n    const context = useGlobalContext();\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout: NodeJS.Timeout | null = null;\n        if (\n            context.state.settings.launchSettings.speed &&\n            started &&\n            !paused &&\n            previous &&\n            (previous?.length !== length || previous?.started !== started || previous?.paused !== paused)\n        ) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (\n                        length === state.stock.stack.length &&\n                        state.stock.passes > 0 &&\n                        (state.stock.stack.length || state.waste.stack.length)\n                    ) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => {\n            timeout && clearTimeout(timeout);\n        };\n    }, [context, length, paused, previous, started]);\n\n    if (!context || !context.state) return null;\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            <Card\n                index={0}\n                key={0}\n                models={context.state.stock.stack}\n                offsetTop={(index) => (index / 2) * -1}\n                zIndex={0}\n                blink={context?.state?.stock.blinkFor}\n                isSuggested={(index) => context?.state?.stock.suggestion && index === context.state.stock.stack.length - 1}\n            />\n        </div>\n    );\n};\n\nconst Stock = () => {\n    const { state } = useGlobalContext();\n    useBlinkEffect((model) => model.stock);\n    const pause = usePauseContext();\n    const { gameState } = useGameContext();\n    const { paused } = pause.state;\n    return <Renderer length={state.stock.stack.length} paused={paused} started={gameState.started} />;\n};\n\nexport default Stock;\n","import Card from \"./Card\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport TableauModel from \"../../Model/Game/Tableau\";\nimport TableauStackModel from \"../../Model/Game/TableauStack\";\nimport useBlinkEffect from \"./Hooks/useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\nimport { useStackDrop } from \"./Hooks/useStackDrop\";\n\ntype TableauProps = { index: number; model: TableauStackModel; parent: TableauModel };\n\nconst Tableau = () => {\n    const { state } = useGlobalContext();\n    return (\n        <>\n            {state.tableau.stacks.map((tableau, index) => (\n                <TableauStack key={index} index={index} model={tableau} parent={state.tableau} />\n            ))}\n        </>\n    );\n};\nexport default Tableau;\n\nconst TableauStack = (props: TableauProps) => {\n    useBlinkEffect((s) => s.tableau.stacks[props.index]);\n    const { state } = useGlobalContext();\n    const drop = useStackDrop(props.model);\n    const cards = state.hand.source === props.model.source ? [...props.model.stack, ...state.hand.stack] : [...props.model.stack];\n    let offset = 1;\n    const getOffset = (index: number, cards: CardModel[]) => {\n        for (let i = 0; i <= index; i++) {\n            if (cards[i] && !cards[i].isHidden) {\n                offset = i * 12 + (index - i) * 24;\n                return offset;\n            }\n        }\n        offset = index * 12;\n        return offset;\n    };\n\n    return (\n        <div className=\"board-field\" ref={drop}>\n            <StackBase model={props.model} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={props.model.blinkFor}\n                isSuggested={(index) => props.model.suggestion && props.model.stack.length - 1 === index}\n                offsetTop={(index, models) => getOffset(index, models)}\n                isSelected={(index) => index > props.model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import Card from \"./Card\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./Hooks/useBlinkEffect\";\nimport useGlobalContext from \"../GlobalContext\";\nimport { useStackDrop } from \"./Hooks/useStackDrop\";\n\nconst Waste = () => {\n    const { state } = useGlobalContext();\n    useBlinkEffect((model) => model.waste);\n    const getOffset = (index: number) => {\n        if (state.settings.launchSettings.drawMode === \"single\") {\n            return 0;\n        }\n        const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n        let additionalOffset = 2;\n        if (length === 2) {\n            additionalOffset = 1;\n        }\n\n        if (length === 1) {\n            additionalOffset = 0;\n        }\n\n        return ((index - length - 2) % 3) + additionalOffset;\n    };\n\n    const drop = useStackDrop(state.waste, () => state.hand.isFromWaste());\n\n    const cards = state?.hand.source === state.waste.source ? [...state.waste.stack, ...state.hand.stack] : [...state.waste.stack];\n\n    return (\n        <div className=\"board-field\" ref={drop}>\n            <StackBase model={state.waste} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                offsetTop={(index) => (index / 2) * -1}\n                offsetLeft={(index) => getOffset(index)}\n                blink={state.waste.blinkFor}\n                isSuggested={(index) => state.waste.suggestion && index === state.waste.stack.length - 1}\n                isSelected={(index) => index > state.waste.stack.length - 1}\n            />\n        </div>\n    );\n};\nexport default Waste;\n","import React from \"react\";\nimport { useBoardContext } from \"../../Context/BoardContext\";\nimport useGameContext from \"../../Context/GameContext\";\nimport useGlobalContext from \"../../GlobalContext\";\n\nconst Detector = () => {\n    const { state } = useGlobalContext();\n    const { win } = useGameContext();\n    const { player } = useBoardContext();\n\n    React.useEffect(() => {\n        if (!state.hand.currentCard() && state.foundation.countCards() === 52) {\n            win(player);\n        }\n    }, [state.token, state.foundation, state.hand, player, win]);\n    return null;\n};\n\nconst WinDetector = () => {\n    const { state } = useGlobalContext();\n    const { gameState } = useGameContext();\n    return (!gameState.isEnded && !!state.settings.launchSettings.autoUncover && !!gameState.started && <Detector />) || null;\n};\n\nexport default WinDetector;\n","import \"./Board.scss\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nimport { Slide, ToastContainer } from \"react-toastify\";\n\nimport AutoSolver from \"./Actors/AutoSolver\";\nimport AutoUncoverer from \"./Actors/AutoUncoverer\";\nimport BoardNavigator from \"./Navigation/BoardNavigator\";\nimport Dealer from \"./Actors/Dealer\";\nimport DndPreview from \"../../common/DndPreview\";\nimport FailDetector from \"./Actors/FailDetector\";\nimport Foundation from \"./Foundation\";\nimport Header from \"../UI/Header/Header\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\nimport WinDetector from \"./Actors/WinDetector\";\n\ntype BoardProps = { mode: string };\nconst Board = (props: BoardProps) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n    return (\n        <>\n            <Menu />\n            <Header mode={props.mode} />\n            <ToastContainer\n                style={{ zIndex: 8888 }}\n                position=\"top-center\"\n                closeOnClick={false}\n                newestOnTop={true}\n                limit={1}\n                pauseOnFocusLoss={false}\n                draggable={false}\n                transition={Slide}\n            />\n            <div className={\"board-jail \" + props.mode}>\n                <div className={\"board-grid-container \" + props.mode}>\n                    <Stock />\n                    <Waste />\n                    <div className=\"board-field spacer\" ref={ref}>\n                        {ref.current && <DndPreview reff={ref.current} />}\n                    </div>\n                    <Foundation />\n                    <Tableau />\n                </div>\n            </div>\n            <Dealer />\n            <BoardNavigator />\n            <AutoSolver />\n            <WinDetector />\n            <FailDetector />\n            \n            <AutoUncoverer />\n        </>\n    );\n};\n\nexport default Board;\n","import \"./Screens.scss\";\n\nimport React from \"react\";\nimport useGlobalContext from \"../GlobalContext\";\nimport usePauseContext from \"../Context/PauseContext\";\n\nconst EndScreen = () => {\n    const { state, restart } = useGlobalContext();\n    const pause = usePauseContext();\n    //@todo show launch settings (draw mode, recycling mode)\n    //@todo show win or lose situation\n    //@todo how to persist the result? from here?\n    // Or track it via context from beginning on?\n\n    //@todo use new ui elements\n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport { BoardProvider } from \"../Context/BoardContext\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../GlobalContext\";\nimport React from \"react\";\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\n//We use class component here because setState allows partial updates\nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck, props.player);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            if (previous.game.timemachine.previousStates.length) {\n                previous.game.timemachine.previousStates = [\n                    //@todo this also assigns non-memorable states\n                    //@todo instead of array, always have single previous state\n                    //@todo this could still grow too big in memory\n                    //@todo implement model.boardEquals and pointsEquals to get rid of 'memorable' states?\n                    previous.game.timemachine.previousStates[previous.game.timemachine.previousStates.length - 1],\n                ];\n            } else {\n                previous.game.timemachine.previousStates = [];\n            }\n\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                state.setToken(Math.random());\n                return state;\n            }\n\n            return null;\n        });\n\n    //on every render, we refresh the click handlers in the model and the suggestions\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider value={{ player: this.props.player }}>\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n","import AspectRatio from \"../../common/AspectRatio/AspectRatio\";\nimport BoardWrap from \"./BoardWrap\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport DelayedSuspense from \"../../common/DelayedSuspense\";\nimport { GameContextProvider } from \"../Context/GameContext\";\nimport GameModes from \"../../GameModes\";\nimport { LaunchSettings } from \"../../Common\";\nimport { PauseProvider } from \"../Context/PauseContext\";\nimport Ratios from \"../../common/AspectRatio/Ratios\";\nimport React from \"react\";\n\ninterface GameProps {\n    launchState: LaunchSettings;\n    deck: Deck;\n    restart: () => void;\n}\n\nconst SinglePlayer = (props: GameProps) => {\n    const { launchState, deck, restart } = props;\n    return (\n        <AspectRatio ratio={Ratios._4to3}>\n            <div className={\"layout-grid-container singleplayer\"}>\n                <BoardWrap player={0} settings={launchState} restart={restart} deck={deck} />\n            </div>\n        </AspectRatio>\n    );\n};\n\nconst SplitScreen = (props: GameProps) => {\n    const { launchState, deck, restart } = props;\n    const Wrap = (i: number) => (\n        <div className={\"layout-grid-container \" + launchState.boardMode}>\n            <BoardWrap player={0} settings={launchState} restart={restart} deck={deck.copy()} />\n        </div>\n    );\n\n    return (\n        <div className=\"game-layout-container splitscreen\">\n            {Wrap(0)}\n            {Wrap(1)}\n        </div>\n    );\n};\n\nconst Game = (props: GameProps) => {\n    return (\n        <GameContextProvider>\n            <PauseProvider>\n                <DelayedSuspense delay={500} fallback={<h3>Loading...</h3>}>\n                    {props.launchState.boardMode === GameModes.SINGLEPLAYER && <SinglePlayer {...props} />}\n                    {props.launchState.boardMode === GameModes.VERSUS && <SplitScreen {...props} />}\n                </DelayedSuspense>\n            </PauseProvider>\n        </GameContextProvider>\n    );\n};\n\nexport default Game;\n"],"names":["Blinker","startBlink","selector","state","blinkFor","game","registerBlink","unblink","s","stopBlink","Tableau","blink","index","tableau","stacks","dispatchPutDown","card","position","wouldAcceptHand","src","hand","source","putDownHand","registerMove","getTop","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","isHoldingCard","isHidden","uncover","registerUncover","Dealer","dealt","dealingAt","isDealt","dealOne","callback","dealer","deal","stock","dealAll","i","length","stack","newCard","popOne","isFirst","this","Dispatcher","clickHandler","getHandler","Focus","settings","player","keyboard","validSettings","launchSettings","players","inputMethod","isKeyBoard","isKeyboard","setCard","unsetCard","Card","unsetStack","setStack","hasCard","hasStack","BasicStack","suggestion","getClickable","filter","canClick","onClick","a","clickEmpty","accepts","HandHoldingStack","getHandContent","FoundationStack","suit","acceptedCards","usedCards","icon","color","getCurrentAccepted","currentAccepted","type","denomination","setOnClick","p","cards","forEach","sindex","getFoundationOrder","MultiStack","Foundation","Object","keys","Suits","map","key","c","hasMoreThanOneCard","currentCard","add","putDown","causeEntropy","Math","min","interactionEntropy","push","pop","remove","equals","getPreviousUsed","countCards","f","reduce","b","setEntropy","lvl","element","copy","orig","origStack","foundation","_card","Rating","points","multiplicator","ratings","applyRating","text","console","debug","target","registerHint","disableHint","currentMove","rateMove","registerRecycle","drawMode","recyclingMode","diff","setSuccess","penalize","other","undoPenalty","penalty","pow","done","hintPenalty","getTimePenalty","start","end","secondsToFinish","trunc","getBonusPoints","round","getTotal","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","previousStates","memorable","modified","pushPreviousState","previous","modelEquals","popPreviousState","id","current","isRequested","popPrevious","timemachine","stackEquals","every","stacksEqual","waste","Game","rating","Hand","splice","model","_onClick","isHoldingKing","isFromCurrentSource","isFromWaste","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","parseInt","Navigator","currentIndex","rows","getZindex","elem","targets","update","pos","row","j","zIndex","x","y","z","finishNav","valid","moveLeft","moveRight","direction","moveUp","clickable","toggleRow","moveDown","pickLast","last","focus","pressCurrent","before","ctx","navigator","undefined","Settings","baseEntropy","suggestionModes","suggestionMode","setSuggestionMode","sm","SuggestionModes","enableHint","isTemporary","next","Stock","recyclings","passes","recycle","reverse","setCardProperties","isOnTop","popTop","result","top","canRecycle","_position","moveToWaste","recycleWaste","addAll","Waste","Suggestions","evaluateOptions","disableAllSuggestions","getUncoverOptions","getPutdownSuggestions","getPickupOptions","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","range","getTableauOrder","indexOf","offset","canUncover","onClickhidden","click","getStack","canPutDown","getCard","stackEntropy","entropy","concat","canAdd","suggestor","token","setToken","withSuggestions","_hasSuggestion","some","hasNonStockSuggestions","hasSuggestions","canAutoSolve","clearSuccess","clear","_c","success","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","defaultValue","replaceContext","updateContext","updateGameContext","restart","GlobalContext","React","Provider","useGlobalContext","Error","RenderAutoSolve","props","solving","setSolving","canAutosolve","Solver","AutoSolver","timeout","setTimeout","suggestedFoundations","suggestedFoundation","suggestedTableaus","suggestedCards","suggestedCard","clearTimeout","defaultGameState","started","isEnded","winner","loser","GameContext","gameState","win","giveUp","useGameContext","GameContextProvider","setGameState","context","Date","now","value","children","useTokenEffect","Uncoverer","AutoUncoverer","autoUncover","BoardContext","useBoardContext","BoardProvider","BoardGamePad","isGamePadDriven","isSinglePlayer","boardMode","GameModes","switchToGamePad","GamePad","layout","GamepadLayout","gamepadIndex","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","defaultPauseState","paused","pauses","pauseStartedAt","allowed","pausedBy","showMenu","showCards","defaultPauseContext","togglePause","toggleMenu","getElapsed","PauseContext","PauseProvider","setPaused","isPaused","show","padleft","msec","getElapsedMs","hh","floor","mm","ss","usePauseContext","BoardNavigator","beforeFocused","handlers","modifier","handler","isVisible","supportsHints","isDisabled","_state","useEffectOnce","timeouts","quickDeal","DndPreview","rect","setRect","WindowDimensionContext","width","height","domRect","reff","getBoundingClientRect","left","usePreview","display","item","style","opacity","render","PossibleFailScreen","refused","since","setRefused","refuse","val","pause","className","MenuTitle","mdiHandBackLeft","MenuTree","keyboardLayout","MenuButton","mdiPlay","title","mdiFlagOutline","FailDetector","any","nonStock","suggestions","setSuggestions","stockSuggestionCards","setStockSuggestionCards","isPossibleFail","setPossibleFail","Firework","canvasRef","intensity","count","scalar","window","innerWidth","defaults","ticks","origin","particleCount","startVelocity","decay","spread","localConfetti","confetti","resize","fire","particleRatio","opts","assign","ref","CardFirework","ReRender","models","slice","offsetLeft","isSelected","displayName","inputEl","isDrag","setDrag","isFocused","useCallback","_isDrag","useDrag","_monitor","collect","monitor","isDragging","canDrag","_item","didDrop","dragRef","preview","getEmptyImage","captureDraggingState","getRef","useClassName","getClassName","hasSuggestion","isSuggested","setClassName","cardStyle","useCardStyle","getCardStyle","offsetTop","entropyStyle","pointerEvents","setCardStyle","stackbaseStyle","useStackBaseStyle","getStackbaseStyle","setStackbaseStyle","SuitIcon","size","path","e","preventDefault","clientX","clientY","ele","includes","offsetParent","ownerDocument","defaultView","pageXOffset","pageYOffset","disabled","tabIndex","StackBase","classname","useBlinkEffect","useStackDrop","useDrop","accept","canDrop","drop","horizontal","Clock","elapsed","setElapsed","interval","setInterval","clearInterval","Hearts","getHearts","createString","Array","from","join","Hint","suggestOnce","Points","showToast","toast","autoClose","ToggleMenu","Undo","undo","Header","mode","Menu","useNavigationContext","navigation","setNavigation","switchToMenu","menu","screeen","mainMenu","remaining","announcement","mdiSleep","label","mdiWeatherTornado","toggleMainMenu","toggled","EntropyLevels","setBaseEntropy","mdiWeatherWindy","setInteractionEntropy","mdiRecycle","reset","skip","mdiDelete","_Menu","Renderer","usePrevious","speed","parent","getOffset","additionalOffset","Detector","WinDetector","Board","closeOnClick","newestOnTop","limit","pauseOnFocusLoss","draggable","transition","Slide","EndScreen","BoardWrap","setState","random","SinglePlayer","launchState","AspectRatio","ratio","Ratios","SplitScreen","Wrap","DelayedSuspense","delay","fallback"],"sourceRoot":""}