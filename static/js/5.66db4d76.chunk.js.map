{"version":3,"sources":["View/Game/BoardContext.ts","View/Game/Navigation/BoardGamePad.tsx","View/Game/Navigation/BoardKeyboard.tsx","View/Game/Navigation/BoardNavigator.tsx","View/Game/Dealer.tsx","common/DndPreview.tsx","View/Game/Firework.tsx","View/Game/CardFirework.tsx","View/Game/StackDescription.ts","View/Game/Card.tsx","View/Game/StackBase.tsx","View/Game/useBlinkEffect.ts","View/Game/Foundation.tsx","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/BasicStack.ts","Model/Game/HandHoldingStack.ts","Model/Game/FoundationStack.tsx","Model/Game/MultiStack.ts","Model/Game/Foundation.ts","Model/Business/Foundation.ts","Model/Game/Rating.ts","Model/Game/TimeMachine.ts","Model/Game/Game.ts","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.ts","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/TableauStack.tsx","Model/Game/Tableau.ts","Model/Game/Waste.ts","Model/Model.ts","View/Game/Judge.tsx","View/UI/Menu.tsx","View/Game/usePrevious.ts","View/Game/Stock.tsx","View/Game/Tableau.tsx","View/Game/Waste.tsx","View/Game/Board.tsx","View/UI/EndScreen.js","View/Game/BoardWrap.tsx"],"names":["BoardContext","React","createContext","player","BoardProvider","Provider","BoardGamePad","props","state","useContext","GlobalContext","isGamePadDriven","settings","launchSettings","inputMode","isSinglePlayer","boardMode","GameModes","SINGLEPLAYER","switchToGamePad","ctx","focus","isKeyBoard","GamePad","gamepadIndex","players","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","layout","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","BoardNavigator","updateContext","updateGameContext","replaceContext","paused","PauseContext","before","x","navigator","currentIndex","y","z","beforeFocused","card","stack","isPaused","handlers","modifier","moveLeft","moveRight","moveUp","moveDown","handler","pressCurrent","finishNav","hand","length","onClick","isKeyboard","togglePause","suggestionMode","supportsHints","isTemporary","isVisible","isDisabled","enableHint","_state","previous","game","timemachine","popPreviousState","previousStates","rating","penalize","Dealer","timeouts","quickDeal","dealer","isDealt","dealAll","deal","dealt","push","setTimeout","dealOne","useEffect","forEach","timeout","clearTimeout","DndPreview","usePreview","display","item","_itemType","style","rect","reff","getBoundingClientRect","position","width","left","top","zIndex","opacity","render","Firework","canvasRef","createRef","current","count","intensity","defaults","ticks","origin","particleCount","startVelocity","decay","spread","localConfetti","confetti","create","resize","fire","particleRatio","opts","Object","assign","Math","floor","scalar","ref","CardFirework","useState","setFire","model","success","clearSuccess","token","getStackLabel","source","names","map","id","label","split","parseInt","Card","ReRender","models","slice","index","offsetLeft","isSelected","isDrag","displayName","pause","inputEl","useRef","isFocused","hasCard","setDrag","_isDrag","useDrag","type","collect","monitor","isDragging","canDrag","canClick","isHidden","currentCard","equals","begin","context","end","_item","didDrop","dragRef","preview","getEmptyImage","captureDraggingState","icon","face","pointerEvents","className","onFocus","onBlur","offsetTop","entropyStyle","getCardStyle","hasSuggestion","isSuggested","suggestion","blink","accepting","getClassName","e","preventDefault","clientX","clientY","ele","target","includes","offsetParent","click","ownerDocument","defaultView","pageXOffset","pageYOffset","element","disabled","tabIndex","aria-label","title","StackBase","classname","hasStack","blinkFor","clickEmpty","children","useBlinkEffect","selector","unblink","FoundationStacks","foundation","stacks","Foundation","useDrop","accept","canDrop","accepts","drop","cards","Clock","getElapsed","elapsed","setElapsed","interval","setInterval","started","clearInterval","Hearts","recyclingMode","stock","passes","createString","Array","from","keys","join","getHearts","Hint","Points","points","ToggleMenu","Undo","pow","multiplicator","Header","mode","Blinker","startBlink","registerBlink","s","stopBlink","Tableau","tableau","dispatchPutDown","wouldAcceptHand","src","putDownHand","registerMove","getTop","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","isHoldingCard","uncover","registerUncover","dealingAt","callback","Date","now","i","newCard","popOne","isFirst","this","Dispatcher","clickHandler","getHandler","Focus","keyboard","validSettings","setCard","unsetCard","unsetStack","setStack","BasicStack","getClickable","filter","a","HandHoldingStack","getHandContent","FoundationStack","suit","acceptedCards","usedCards","color","getCurrentAccepted","currentAccepted","setOnClick","p","sindex","getFoundationOrder","MultiStack","Suits","key","c","hasMoreThanOneCard","add","putDown","causeEntropy","min","interactionEntropy","pop","remove","getPreviousUsed","countCards","f","reduce","b","setEntropy","lvl","copy","orig","origStack","copyAll","tryDetectEnd","_card","isEnded","Rating","ratings","hasNotifications","r","notified","getNextNotification","setNotified","n","applyRating","text","console","debug","registerHint","disableHint","currentMove","rateMove","registerRecycle","drawMode","diff","setSuccess","other","undoPenalty","penalty","done","hintPenalty","getTimePenalty","start","secondsToFinish","trunc","getBonusPoints","round","getTotal","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","memorable","modified","pushPreviousState","modelEquals","isRequested","popPrevious","stackEquals","every","stacksEqual","waste","Game","Hand","splice","_onClick","isHoldingKing","isFromCurrentSource","isFromWaste","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","Navigator","rows","getZindex","elem","targets","update","pos","row","j","valid","direction","undefined","clickable","toggleRow","pickLast","last","Settings","baseEntropy","suggestionModes","setSuggestionMode","sm","SuggestionModes","get","getHintMode","next","allSuggestionModes","Stock","recyclings","recycle","reverse","setCardProperties","isOnTop","popTop","result","_position","moveToWaste","recycleWaste","addAll","canRecycle","Waste","Suggestions","evaluateOptions","disableAllSuggestions","NONE","getUncoverOptions","getPutdownSuggestions","getPickupOptions","FULL","SCORED","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","range","getTableauOrder","indexOf","offset","canUncover","onClickhidden","getStack","canPutDown","getCard","stackEntropy","entropy","concat","canAdd","suggestor","setToken","withSuggestions","_hasSuggestion","some","hasSuggestions","canAutoSolve","clear","_c","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","AutoSolve","solving","setSolving","canAutosolve","Solver","suggestedFoundations","suggestedFoundation","suggestedTableaus","suggestedCards","suggestedCard","useEvaluation","falseResults","setFalseResults","Evaluator","full","resetFull","REGULAR","regular","resetRegular","noRegularSince","setNoRegularSince","noFullSince","setNoFullSince","log","toast","error","closeToast","alert","autoClose","closeButton","Judge","Menu","restart","NavigationContext","navigation","setNavigation","switchToMenu","menu","screeen","mainMenu","showMenu","remaining","allowed","pauses","announcement","keyboardLayout","pausedBy","MenuTitle","MenuTree","MenuButton","val","toggleMainMenu","toggled","EntropyLevels","skip","_Menu","screen","navigationContext","value","usePrevious","Renderer","speed","TableauStacks","parent","setAccepting","getOffset","_drop","additionalOffset","Board","closeOnClick","newestOnTop","limit","pauseOnFocusLoss","draggable","transition","Slide","EndScreen","BoardWrap","setState","random","Component"],"mappings":"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","file":"static/js/5.66db4d76.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const BoardContext = React.createContext({\n    player: 0,\n});\n\nexport const BoardProvider = BoardContext.Provider;\n","import { BoardContext } from \"../BoardContext\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GamePad from \"../../../common/GamePad\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardGamePad = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isGamePadDriven = state.settings.launchSettings.inputMode == \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n\n    const switchToGamePad = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight(switchToGamePad)}\n            onUp={() => props.onUp(switchToGamePad)}\n            onDown={() => props.onDown(switchToGamePad)}\n            onAction={() => props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToGamePad)}\n            onMenu={() => props.onMenu(switchToGamePad)}\n        />\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"../../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../BoardContext\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GlobalContext from \"../../Context\";\nimport Keyboard from \"../../../common/Keyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardKeyboard = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isKeyboardDriven = state.settings.launchSettings.inputMode === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import { BoardContext } from \"../BoardContext\";\nimport BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\ntype _mod = (state: Model) => void;\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const beforeFocused = { card: state.focus.card, stack: state.focus.stack };\n    const isPaused = !!paused.state.paused;\n\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const handlers = {\n        onLeft: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveLeft(before);\n            }),\n\n        onRight: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveRight(before);\n            }),\n\n        onUp: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveUp(before);\n            }),\n\n        onDown: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveDown(before);\n            }),\n\n        onAction: (modifier: _mod) =>\n            updateGameContext((ctx) => {\n                modifier(ctx);\n                const handler = state?.navigator?.pressCurrent(beforeFocused);\n                handler && handler(ctx);\n                ctx.navigator.finishNav();\n            }),\n\n        onCancel: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n            }),\n\n        onPause: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n\n        onHint: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n                if (isVisible(state) && !isDisabled(state)) {\n                    state.settings.enableHint();\n                }\n            });\n        },\n\n        onUndo: () => {\n            //@todo use gamestate token to avoid double processing\n            replaceContext((_state) => {\n                const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n                if (previous) {\n                    previous.game.rating.penalize(_state.game.rating);\n                    return previous;\n                }\n                return null;\n            });\n        },\n        onMenu: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n    };\n\n    return isPaused ? null : (\n        <>\n            <BoardKeyboard {...handlers} />\n            <BoardGamePad {...handlers} />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import GlobalContext from \"../Context\";\nimport React from \"react\";\n\nconst Dealer = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const timeouts: any[] = [];\n\n    if (state.settings.launchSettings.quickDeal) {\n        if (state && state.dealer && !state.dealer.isDealt) {\n            replaceContext(state.dealer.dealAll());\n        }\n    } else {\n        const deal = (dealt: number) => {\n            timeouts.push(\n                setTimeout(() => {\n                    if (state && state.dealer && !state.dealer.isDealt) {\n                        replaceContext(state.dealer.dealOne(dealt, deal));\n                    }\n                }, 35)\n            );\n        };\n\n        React.useEffect(() => {\n            deal(state.dealer.dealt);\n            return () =>\n                timeouts.forEach((timeout) => {\n                    clearTimeout(timeout);\n                });\n        }, []);\n    }\n    return null;\n};\nexport default Dealer;\n","import React from \"react\";\nimport { usePreview } from \"react-dnd-preview\";\n\nconst DndPreview = (props: { reff: any }) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { display, _itemType, item, style } = usePreview();\n    if (!display) {\n        return null;\n    }\n    const rect = props.reff.getBoundingClientRect();\n    return (\n        <div\n            style={{\n                ...style,\n                position: \"relative\",\n                width: \"100%\",\n                left: rect.left * -1,\n                top: rect.top * -1,\n                zIndex: 2000,\n                opacity: 1,\n            }}\n        >\n            {item.render}\n        </div>\n    );\n};\n\nexport default DndPreview;\n","import React from \"react\";\nimport confetti from \"canvas-confetti\";\n\nconst Firework = (props: { intensity: number }) => {\n    const canvasRef = React.createRef<HTMLCanvasElement>();\n    React.useEffect(() => {\n        if (canvasRef && canvasRef.current) {\n            const count = 15 * props.intensity;\n            const origin = {\n                x: 0.5,\n                y: 0.33,\n            };\n            const defaults = {\n                ticks: 50,\n                origin,\n                particleCount: 40,\n                startVelocity: 20,\n                decay: 0.8,\n                spread: 360,\n            };\n            const localConfetti = confetti.create(canvasRef.current, { resize: true });\n\n            const fire = (particleRatio: any, opts: any) => {\n                localConfetti(\n                    Object.assign({}, defaults, opts, {\n                        particleCount: Math.floor(count * particleRatio),\n                    })\n                );\n            };\n\n            fire(0.25, {\n                startVelocity: 55,\n            });\n            fire(0.2, {});\n            fire(0.35, {\n                decay: 0.91,\n                scalar: 0.8,\n            });\n            fire(0.1, {\n                startVelocity: 25,\n                decay: 0.92,\n                scalar: 1.2,\n            });\n            fire(0.1, {\n                startVelocity: 45,\n            });\n            fire(0.1, {\n                startVelocity: 45,\n            });\n        }\n    }, [canvasRef]);\n\n    return <canvas ref={canvasRef}></canvas>;\n};\n\nexport default Firework;\n","import CardModel from \"../../Model/Deck/Card\";\nimport Firework from \"./Firework\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\n\nconst CardFirework = (props: { model: CardModel }) => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    const [fire, setFire] = React.useState<boolean>(false);\n    if (!state) return null;\n\n    React.useEffect(() => {\n        if (props.model.success) {\n            setFire(true);\n            const timeout = setTimeout(() => updateContext((ctx) => ctx.clearSuccess(props.model)), 25);\n            return () => clearTimeout(timeout);\n        }\n    }, [state?.token, props.model.success]);\n    return <>{fire && <Firework intensity={props.model.success} />}</>;\n};\n\nexport default CardFirework;\n","const getStackLabel = (source: string) => {\n    const names = [0, 1, 2, 3, 4, 5, 6].map((id) => \" stack \" + (id + 1));\n    let label = \"\";\n    const split = source.split(\"-\");\n    label += split[0];\n    if (split.length > 1) {\n        label += names[parseInt(split[1])];\n    }\n    return label;\n};\n\nexport default getStackLabel;\n","import CardFirework from \"./CardFirework\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport getStackLabel from \"./StackDescription\";\nimport { useDrag } from \"react-dnd\";\n\ntype CardProps = {\n    index: number;\n    accepting?: boolean;\n    models: CardModel[];\n    isSuggested?: (index: number) => boolean | undefined;\n    isSelected?: (index: number) => boolean;\n    blink?: number;\n    zIndex?: number;\n    offsetTop?: (index: number, models: CardModel[]) => number;\n    offsetLeft?: (index: number) => number;\n    isDrag?: boolean;\n};\n\nconst Card = (props: CardProps) => {\n    const ReRender = () => (\n        <Card\n            {...{\n                ...props,\n                models: props.models.slice(props.index, props.models.length),\n                offsetLeft: () => 0,\n                isSelected: () => false,\n                index: 0,\n                isDrag: isDrag,\n            }}\n        />\n    );\n    if (!props.models.length) {\n        return null;\n    }\n    const model = props.models[props.index];\n    ReRender.displayName = \"ReRender\";\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const pause = React.useContext(PauseContext);\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const isFocused = state.focus.hasCard(model);\n    const [isDrag, setDrag] = React.useState<boolean>(!!props.isDrag);\n    const _isDrag = props.isDrag || isDrag;\n    const [{ opacity }, dragRef, preview] = useDrag({\n        item: { type: \"card\", model: model, render: ReRender() },\n        collect: (monitor) => {\n            return { opacity: monitor.isDragging() ? 1 : 1 };\n        },\n        canDrag: () => model.canClick() && !model.isHidden && (state.hand.currentCard() == null || model.equals(state.hand.currentCard())),\n        begin: () => {\n            setDrag(true);\n            //@todo if other card is still selected, drop it first.\n            if (model.onClick && (!props.isSelected || !props.isSelected(props.index))) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n        end: (_item, monitor) => {\n            setDrag(false);\n            if (!monitor.didDrop()) {\n                updateGameContext((context) => {\n                    model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n    });\n\n    //Deactivate native dnd preview - it's fast but it's not working on mobile.\n    React.useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, []);\n\n    const getRef = () => (model.canClick() ? dragRef : inputEl);\n    React.useEffect(() => {\n        if (isFocused && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n    }, [isFocused, state.focus.card]);\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        let ele = e.target;\n\n        while (ele && !ele.className.includes(\"card-base\")) {\n            ele = ele.offsetParent;\n        }\n\n        const rect = ele.getBoundingClientRect();\n\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - (ele?.ownerDocument?.defaultView?.pageXOffset || 0),\n                y: e.clientY - (ele?.ownerDocument?.defaultView?.pageYOffset || 0),\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n\n        const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n        //@todo A11Y allow keyboard actions in singleplayer\n        if (model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.inputMode = \"mouse\";\n                }\n            });\n        }\n    };\n\n    const getClassName = () => {\n        const hasSuggestion = (props.isSuggested && props.isSuggested(props.index)) || model.suggestion;\n        let className = `card card-base suit-${model.type.icon}`;\n        className +=\n            (!props.isSelected || !props.isSelected(props.index)) && !isFocused && !hasSuggestion ? ` card-stack-${model.source}` : \"\";\n        className += !_isDrag && props.isSelected && props.isSelected(props.index) && !_isDrag ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += model.canClick() ? \" clickable\" : \"\";\n        className += hasSuggestion && !isFocused ? \" card-suggested\" : \"\";\n        className += isFocused ? \" card-focused\" : \"\";\n        className += props.accepting ? \" card-accepts\" : \"\";\n        return className;\n    };\n\n    const getCardStyle = () => {\n        const style = {\n            opacity: _isDrag ? 0 : opacity,\n            zIndex: (props.zIndex ? props.zIndex : (props.offsetTop && props.offsetTop(props.index, props.models) > 0 ? 1 : 0) * 20) + 1,\n            top: props.offsetTop ? props.offsetTop(props.index, props.models) / 15 + \"em\" : 0,\n            ...model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft(props.index) * 2 + \"em\";\n        }\n\n        if (!model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    };\n\n    const getStackbaseStyle: () => React.CSSProperties = () => {\n        if (!model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    };\n\n    let label = getStackLabel(model.source);\n    label += \": \";\n\n    label += model.isHidden ? \"hidden card\" : model.type.icon + model.face;\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n\n    return (\n        <>\n            <div style={getStackbaseStyle()} className=\"stack-base\">\n                <button\n                    onFocus={() => {\n                        // updateContext((ctx) => {\n                        //     ctx.navigator.update(model.source, props.model);\n                        // });\n                    }}\n                    onBlur={() => {\n                        //updateContext((ctx) => ctx.focus.unsetCard(props.model));\n                    }}\n                    style={getCardStyle()}\n                    // ref={inputEl}\n                    ref={getRef()}\n                    className={getClassName()}\n                    onClick={onClick}\n                    disabled={!model.canClick() || pause.state.paused}\n                    tabIndex={model.canClick() ? 0 : -1}\n                    aria-label={label}\n                    title={label}\n                >\n                    <CardFirework model={model} />\n                    <div className=\"card-content\">\n                        {model.isHidden || pause.state.paused ? (\n                            <div className=\"card-back\">&nbsp;</div>\n                        ) : (\n                            <div className=\"card-grid-container\">\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-left\">{model.face}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div className=\"mainface\">\n                                    <div className=\"align-center\">{model.face} </div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div className=\"align-right\">{model.face}</div>\n                                </div>\n                                <div>\n                                    <div className=\"align-center\">{model.type.icon}</div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </button>\n            </div>\n            {props.models.length - 1 > props.index && <Card {...props} isDrag={_isDrag} index={props.index + 1} />}\n        </>\n    );\n};\n\nexport default Card;\n","import GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\n\nconst StackBase = (props: { model: IStack; children?: any | null }) => {\n    let classname = \"card-base socket\";\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    React.useEffect(() => {\n        if (state.focus.hasStack(props.model.source) && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            const current = inputEl && inputEl.current ? inputEl.current : null;\n            current && current.focus();\n        }\n    });\n    if (!props.model.stack.length) {\n        if (props.model.blinkFor) {\n            classname += \" socket-blink\";\n        } else if (state.focus.hasStack(props.model.source)) {\n            classname += \" socket-focused\";\n        } else {\n            classname += \" socket-empty\";\n        }\n    } else {\n        classname += \" socket-full\";\n    }\n\n    if (props.model.suggestion && !props.model.stack.length) {\n        classname += \" socket-suggested\";\n    }\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": empty socket\";\n\n    return (\n        <button\n            onFocus={() => {\n                // updateContext((ctx) => {\n                //     ctx.navigator.update(props.model.parent);\n                // });\n            }}\n            onBlur={() => {\n                // updateContext((ctx) => ctx.focus.unsetStack(props.model.parent));\n            }}\n            ref={inputEl}\n            className={classname}\n            onClick={onClick}\n            disabled={!!props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n            aria-label={label}\n            title={label}\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\n\ntype _selector = (model: Model) => IStack;\n\nconst useBlinkEffect = (selector: _selector) => {\n    const { updateContext, state } = React.useContext(GlobalContext);\n    if (!state) return;\n    const model = selector(state);\n    let timeout: any = null;\n    React.useEffect(() => {\n        if (state && selector(state).blinkFor) {\n            timeout = setTimeout(\n                () =>\n                    updateContext((state: Model) => {\n                        selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [state, model.blinkFor]);\n};\n\nexport default useBlinkEffect;\n","import Card from \"./Card\";\nimport FoundationStack from \"../../Model/Game/FoundationStack\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\ntype FoundationProps = { index: number; model: FoundationStack };\n\nconst FoundationStacks = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    return (\n        <>\n            {state.foundation.stacks.map((foundation, index) => (\n                <Foundation key={index} model={foundation} index={index} />\n            ))}\n        </>\n    );\n};\n\nexport default FoundationStacks;\n\nconst Foundation = (props: FoundationProps) => {\n    useBlinkEffect((model) => model.foundation.stacks[props.index]);\n    const { updateGameContext, state } = React.useContext(GlobalContext);\n    const model = props.model;\n    const [, drop] = useDrop({\n        accept: \"card\",\n        canDrop: (item: any) => {\n            return props.model.accepts(item.model);\n        },\n        drop: () => {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n    const cards = state?.hand.source == model.source ? [...model.stack, ...state.hand.stack] : [...model.stack];\n    return (\n        <div className=\"board-field\" key={props.index} ref={drop}>\n            <StackBase model={model}>\n                <div className={\"align-center foundation-base suit-\" + model.icon}>{model.icon}</div>\n            </StackBase>\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                blink={model.blinkFor}\n                isSuggested={(index) => model.suggestion && model.stack.length - 1 == index}\n                isSelected={(index) => index > model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst Clock = () => {\n    const { state, getElapsed } = React.useContext(PauseContext);\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (state.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [state.started, state.paused]);\n\n    return !state.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Hearts = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode == \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst Hint = () => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Points = () => {\n    const { state } = React.useContext(GlobalContext);\n\n    return (\n        <>\n            <div className=\"icon-container\">🏆</div> {state?.game.rating.points}\n        </>\n    );\n};\n\nexport default Points;\n","import { BoardContext } from \"../../Game/BoardContext\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst ToggleMenu = () => {\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n\n    return (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Undo = () => {\n    //@todo use gamestate token to avoid double processing\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"./Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src, state.tableau.getTop(index));\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover(state.tableau.getTop(index));\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: any) => (state: Model) => {\n        if (dealt != state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n        if (state.dealer.isDealt) {\n            state.game.started = Date.now();\n        }\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt != state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        state.game.started = Date.now();\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                if (newCard) {\n                    newCard.source = tableau.stacks[i].source;\n                    if (stack.length == tableau.stacks.length - 1 - i) {\n                        newCard.isHidden = false;\n                    }\n                    tableau.deal(newCard, i);\n                    this.dealt++;\n                    this.dealingAt++;\n                    if (this.dealingAt == tableau.stacks.length) {\n                        this.dealingAt = 0;\n                    }\n                    this.isDealt = false;\n                }\n                return;\n            } else {\n                const isFirst = this.dealingAt == 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n    }\n\n    validSettings = () => this.settings.launchSettings.inputMode !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack == stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && this.card && card && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack == stack;\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Model from \"../Model\";\n\nabstract class BasicStack implements IStack {\n    source: string;\n    constructor(source: string) {\n        this.source = source;\n    }\n    suggestion = false;\n    stack: Card[] = [];\n    getTop: () => Card | null = () => (this.stack && this.stack.length && this.stack[this.stack.length - 1]) || null;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n    blinkFor = 0;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick = (a: any) => (s: any) => {};\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    clickEmpty = (a: any) => (s: any) => {};\n    unblink: (model: Model) => void = () => {};\n    abstract accepts: (card: Card | null) => boolean;\n}\nexport default BasicStack;\n","import BasicStack from \"./BasicStack\";\nimport Hand from \"./Hand\";\n\nabstract class HandHoldingStack extends BasicStack {\n    hand: Hand;\n    constructor(source: string, hand: Hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source == this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n}\n\nexport default HandHoldingStack;\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { Suit } from \"../Deck/Suits\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nexport default class FoundationStack extends HandHoldingStack {\n    constructor(source: string, hand: Hand, suit: Suit) {\n        super(source, hand);\n        this.acceptedCards = [...getFoundationOrder()];\n        this.usedCards = [];\n        this.icon = suit.icon;\n        this.color = suit.color;\n    }\n    acceptedCards: string[] = [];\n    usedCards: any[] = [];\n    icon = \"\";\n    color = \"\";\n    getCurrentAccepted = () => {\n        return this.acceptedCards[this.acceptedCards.length - 1];\n    };\n    accepts = (card: Card | null) => {\n        if (!card) return false;\n        const currentAccepted = this.getCurrentAccepted();\n        return this.icon == card.type.icon && currentAccepted == card.face;\n    };\n    setOnClick = (onClick: (c: any, p: any) => (s: any) => void, hand: Hand) => {\n        this.clickEmpty = (p) => onClick(null, p);\n        const cards = this.source == hand.source ? [...this.stack, ...hand.stack] : this.stack;\n        cards.forEach((card, sindex) => {\n            card.onClick = (p: any) => onClick({ ...card }, p);\n            card.canClick = () => sindex == cards.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n}\n","import Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\n\nexport default class MultiStack<T extends HandHoldingStack> {\n    stacks: T[];\n    settings: Settings;\n    hand: Hand;\n    constructor(settings: Settings, hand: Hand, stacks: T[]) {\n        this.stacks = stacks;\n        this.settings = settings;\n        this.hand = hand;\n    }\n}\n","import Card from \"../Deck/Card\";\nimport FoundationStack from \"./FoundationStack\";\nimport Hand from \"./Hand\";\nimport MultiStack from \"./MultiStack\";\nimport Settings from \"./Settings\";\nimport Suits from \"../Deck/Suits\";\n\nexport default class Foundation extends MultiStack<FoundationStack> {\n    constructor(settings: Settings, hand: Hand) {\n        super(settings, hand, [\n            ...Object.keys(Suits)\n                .map((key: string) => Suits[key])\n                .map((suit, index) => new FoundationStack(\"foundation-\" + index, hand, suit)),\n        ]);\n    }\n\n    setOnClick = (onClick: (c: any, p: any, index: number) => (s: any) => void) => {\n        this.stacks.forEach((stack, index) => {\n            stack.setOnClick((c: any, p: any) => onClick(c, p, index), this.hand);\n        });\n    };\n\n    getCurrentAccepted = (index: number) => {\n        return this.stacks[index].getCurrentAccepted();\n    };\n\n    wouldAcceptHand = (index: number) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    accepts = (index: number, card: Card | null) => {\n        return this.stacks[index].accepts(card);\n    };\n\n    add = (index: number, cards: Card[]) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index: number, card: Card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return (card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop()) || null;\n    };\n\n    getPreviousUsed = (index: number) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => f.stack.length).reduce((a, b) => a + b, 0);\n\n    getTop = (index: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig: Foundation, hand: Hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new FoundationStack(origStack.source, hand, origStack);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src, state.foundation.getTop(index));\n            this.tryDetectEnd(state);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card | null, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.face) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    //@todo move this to a generic place, also detect failure\n    tryDetectEnd(state: Model) {\n        const nrofCards = state.foundation.countCards();\n        if (nrofCards === 52) {\n            state.game.isEnded = true;\n            state.game.end = Date.now();\n        }\n    }\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport interface AppliedRating {\n    points: number;\n    text: string;\n    notified?: boolean;\n}\n\nexport interface AppliedRatingWithId extends AppliedRating {\n    id: number;\n}\n\nexport default class Rating {\n    settings: Settings;\n    points: number;\n    multiplicator: number;\n    ratings: AppliedRating[];\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n        this.ratings = [];\n    }\n\n    hasNotifications = () => {\n        return this.ratings.filter((r) => !r.notified).length > 0;\n    };\n\n    getNextNotification = () => {\n        return this.ratings.map((r, id) => ({ ...r, id })).filter((r) => !r.notified)[0];\n    };\n\n    setNotified = (n: number) => {\n        this.ratings[n].notified = true;\n    };\n\n    applyRating = (points: number, text: string) => {\n        console.debug(\"RATING:\", text);\n        this.ratings.push({ points, text });\n    };\n\n    registerMove = (target: string, source: string, card: Card | null) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove, card);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode == \"single\" && this.settings.launchSettings.recyclingMode == \"infinite\") {\n            if (this.points > 0) {\n                let diff = 0;\n                if (this.points < 100) {\n                    diff = this.points * -1;\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                    diff = -100;\n                }\n                this.applyRating(diff, `subtract ${diff} (max 100 points) for RECYCLE`);\n            }\n        }\n    };\n\n    registerUncover = (card: Card | null) => {\n        this.registerHint(this.settings.disableHint());\n        card && card.setSuccess(5);\n        this.points += 5;\n        this.applyRating(5, \"add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on: boolean) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, \"subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other: Rating) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            this.applyRating(penalty * -1, `applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done: boolean) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            this.applyRating(-10, `applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move: { source: string; target: string }, card: Card | null) {\n        const isTableau = (obj: string) => obj.substr(0, 7) == \"tableau\";\n        const isFoundation = (obj: string) => obj.substr(0, 10) == \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE tableau -> foundation\");\n                card && card.setSuccess(10);\n                return 10;\n            }\n        } else if (move.source == \"waste\") {\n            if (isFoundation(move.target)) {\n                this.applyRating(10, \"add 10 points for MOVE waste -> foundation\");\n                card && card.setSuccess(10);\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                this.applyRating(5, \"add 5 points for MOVE waste -> tableau\");\n                card && card.setSuccess(5);\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                this.applyRating(-15, \"subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start: number, end: number) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    };\n\n    static copy = (orig: Rating) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        copy.ratings = [...orig.ratings];\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Model from \"../Model\";\n\nexport default class TimeMachine {\n    previousStates: Model[];\n    memorable: boolean;\n    modified: boolean;\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source == target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state: any) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id: number, current: any) => {\n        const isRequested = this.previousStates.length - 1 == id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        if (on) {\n            this.modified = true;\n            this.memorable = false;\n        }\n    }\n\n    stackEquals = (a: IStack, b: IStack) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden == b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a: { stacks: IStack[] }, b: { stacks: IStack[] }) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a: Model, b: Model) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig: TimeMachine) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Rating from \"./Rating\";\nimport Settings from \"./Settings\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    settings: Settings;\n    rating: Rating;\n    timemachine: TimeMachine;\n    started: number;\n    isEnded: boolean;\n    end: number;\n    paused: any;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n        //@todo move to context:\n        this.started = 0;\n        this.isEnded = false;\n        this.end = 0;\n    }\n\n    registerMove = (target: string, source: string, card: Card | null) => {\n        this.rating.registerMove(target, source, card);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = (card: Card | null) => {\n        this.rating.registerUncover(card);\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig: Game) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        copy.paused = orig.paused;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    filter: (stack: any[]) => Card[] = (stack) => {\n        return stack.filter((c) => c);\n    };\n\n    pickUp = (stack: (Card | null)[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = this.filter(stack).map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source == model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.face == \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source == this.source) || null;\n\n    isFromWaste = () => this.source && this.source == \"waste\" || false;\n\n    isFromFoundation = (index: number) => this.source && this.source == `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source == `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) == \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/IStack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: (IStack | undefined)[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source == pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x == -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x == 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        const current = this.current();\n        if (current == undefined) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = current.getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y == 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const current = this.current();\n        const last: number = current ? current.getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (!current) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current()?.source || \"\");\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = (before: { card: Card | null; stack: string }) => {\n        const clickable = this.current()?.getClickable();\n        if (\n            this.model.focus.card &&\n            this.model.focus.card.canClick() &&\n            clickable &&\n            clickable[this.currentIndex.z] &&\n            clickable[this.currentIndex.z].face == this.model.focus.card.face &&\n            clickable[this.currentIndex.z].type.icon == this.model.focus.card.type.icon\n        ) {\n            return (ctx: Model) => {\n                if (this.model.focus.card && this.model.focus.card.equals(before.card)) {\n                    this.model.focus.card.onClick({ isKeyboard: true })(ctx);\n                }\n            };\n        } else if (this.model.focus.stack && this.model.focus.stack == before.stack) {\n            return (ctx: Model) => {\n                this.current()?.clickEmpty({ isKeyboard: true })(ctx);\n            };\n        } else {\n            //this is the entry point in case user starts keyboard nav with action button\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./BasicStack\";\nimport Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Stock extends BasicStack {\n    settings: Settings;\n    recyclings: number;\n    passes: number;\n    constructor(stack: Card[], settings: Settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        if (this.settings.launchSettings.recyclingMode == \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode == \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick: (c: any, p: any, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: any) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n    };\n    accepts = () => false;\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode == \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode == \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste: Card[]) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card: Card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card: Card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result: Card[] = [];\n        if (this.settings.launchSettings.drawMode == \"single\") {\n            const top = this.stack.pop();\n            if (top) result = [top];\n        }\n        if (this.settings.launchSettings.drawMode == \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length == 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig: Stock) => {\n        const copy = new Stock([], orig.settings);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\", state.waste.getTop());\n    };\n\n    recycleWaste = (state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\", state.waste.getTop())) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key == SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key == SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length == 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length == 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].face ==\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].face &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move, null) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (\n                            this.getPutdownSuggestions(tableauState, true) >\n                            (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)\n                        ) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nexport default class TableauStack extends HandHoldingStack {\n    id = 0;\n    accepts = (current: Card | null) => {\n        const top = this.getTop();\n        if (!top) {\n            return (current && current.face === \"K\") || false;\n        }\n        if (this.source == current?.source) return true;\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = current ? range.indexOf(current.face) : 0;\n        const topIndex = range.indexOf(top.face);\n        return currentIndex + 1 == topIndex && current?.type.color !== top.type.color && top.face !== \"A\";\n    };\n    getTop = (offset?: number) => this.stack[this.stack.length - 1 - (offset || 0)];\n    canUncover = (card: Card) => {\n        const top = this.getTop();\n        return top.isHidden && card && card.equals(this.getTop());\n    };\n    setOnClick = (onClick: (a: any, b: any) => (s: any) => void, onClickhidden: (a: any, b: any) => (s: any) => void) => {\n        this.clickEmpty = (p: any) => onClick(null, p);\n        const cards = this.source == this.hand.source ? [...this.stack, ...this.hand.stack] : this.stack;\n        cards.forEach((card, sindex) => {\n            const click = card.isHidden && sindex == cards.length - 1 ? onClickhidden : onClick;\n            card.onClick = (p: any) => click({ ...card }, p);\n            card.canClick = () => !card.isHidden || (this.canUncover(card) && !this.hand.currentCard()) || false;\n        });\n        this.hand.setOnClick(this);\n    };\n    static copy = (orig: TableauStack) => {\n        const s = new TableauStack(orig.source, orig.hand);\n        s.id = orig.id;\n        s.stack = Card.copyAll(orig.stack);\n        return s;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport MultiStack from \"./MultiStack\";\nimport Settings from \"./Settings\";\nimport TableauStack from \"./TableauStack\";\n\nexport default class Tableau extends MultiStack<TableauStack> {\n    constructor(settings: Settings, hand: Hand) {\n        super(\n            settings,\n            hand,\n            [0, 1, 2, 3, 4, 5, 6].map((id) => {\n                const s = new TableauStack(\"tableau-\" + id, hand);\n                s.id = id;\n                return s;\n            })\n        );\n    }\n\n    setOnClick = (\n        onClick: (a: any, b: any, index: number) => (s: any) => void,\n        onClickhidden: (a: any, b: any, index: number) => (s: any) => void\n    ) => {\n        this.stacks.forEach((stack, index) => {\n            stack.setOnClick(\n                (a: any, b: any) => onClick(a, b, index),\n                (a: any, b: any) => onClickhidden(a, b, index)\n            );\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    //@todo when putting back hand, no entropy is observed\n\n    putDownHand = (index: number) => this.add(index, this.hand.source, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        if (!current) return false;\n        return this.stacks[index].accepts(current);\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        return this.stacks[index].canUncover(card);\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy != 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, source: string, cards: Card[]) => {\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number) => {\n        card.source = this.stacks[index].source;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].getTop(offset);\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map(TableauStack.copy);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\n\nexport default class Waste extends HandHoldingStack {\n    settings: Settings;\n    constructor(settings: Settings, hand: Hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n    }\n\n    setOnClick = (onClick: (c: any, p: any, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        const cards = this.source == this.hand.source ? [...this.stack, ...this.hand.stack] : this.stack;\n        cards.forEach((card, index) => {\n            card.onClick = (p: any) => onClick({ ...card }, p, null);\n            card.canClick = () => index == cards.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card: Card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards: Card[]) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card: Card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    accepts = (card: Card | null) => this.canAdd(card) || false;\n\n    canAdd = (card: Card | null) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card: Card) => (card && card.equals(this.getTop()) && this.stack.pop()) || null;\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig: Waste, hand: Hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Card from \"./Deck/Card\";\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport { IStack } from \"./Game/IStack\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n    token: number;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n        this.token = obj.token;\n    }\n\n    setToken = (token: number) => {\n        this.token = token;\n    };\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    _hasSuggestion = (obj: any) => {\n        return obj.suggestion || (obj.stack && obj.stack.some(this._hasSuggestion)) || (obj.stacks && obj.stacks.some(this._hasSuggestion));\n    };\n\n    hasSuggestions = () => {\n        return (\n            this._hasSuggestion(this.waste) ||\n            this._hasSuggestion(this.stock) ||\n            this._hasSuggestion(this.tableau) ||\n            this._hasSuggestion(this.foundation)\n        );\n    };\n\n    canAutoSolve = () => {\n        return (\n            this.waste.stack.length == 0 &&\n            this.stock.stack.length == 0 &&\n            this.tableau.stacks.every((s) => s.stack.every((c) => !c.isHidden))\n        );\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    clearSuccess = (card: Card) => {\n        const clear = (c: Card, s: IStack) => {\n            s.stack.forEach((_c) => {\n                if (_c.equals(c)) {\n                    _c.success = 0;\n                }\n            });\n        };\n        clear(card, this.stock);\n        clear(card, this.waste);\n        this.foundation.stacks.forEach((s) => clear(card, s));\n        this.tableau.stacks.forEach((s) => clear(card, s));\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()));\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings),\n            token: 0,\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n            token: state.token,\n        });\n    };\n}\n","import { ToastContentProps, ToastOptions, toast } from \"react-toastify\";\n\nimport { AppliedRating } from \"../../Model/Game/Rating\";\nimport GlobalContext from \"../Context\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\n\nconst Judge = () => {\n    //- one checks a context from outside for final status\n    //  - check if other player won\n    //  - check if other player gave up\n    //- the other analyses the game and reports to context\n    //  - check if current player won\n    //  - check if there are no more valid options and offer to give up\n\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n\n    return (\n        <>\n            <Evaluator token={state.token} />\n            {false && <RatingNotifier />}\n            <AutoSolve canAutosolve={state.canAutoSolve()} />\n        </>\n    );\n};\n\n//- auto-resolver\n//  - check if the board can auto-resolve and offer to complete automatically\n//  - auto-complete becomes button in header and option in menu\n\nconst AutoSolve = (props: { canAutosolve: boolean }) => {\n    const [solving, setSolving] = React.useState(false);\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    React.useEffect(() => {\n        if (props.canAutosolve) {\n            updateGameContext((ctx) => (ctx.settings.suggestionMode = SuggestionModes.get(SuggestionModes.NONE)));\n            setSolving(true);\n        }\n    }, [props.canAutosolve]);\n    const canSolve = solving && state?.settings.suggestionMode.key == SuggestionModes.NONE;\n    return !canSolve ? null : <Solver />;\n};\n\n//@todo auto-uncover as feature, in which case action is not undoable\n//@todo also start general confetti firework elements when autosolving\n\nconst Solver = () => {\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            const copy = Model.copy(state).withHandlers();\n            if (copy.hand.currentCard()) {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.foundation)) {\n                    const suggestedFoundations = copy.foundation.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedFoundations.length) {\n                        const suggestedFoundation = suggestedFoundations[0];\n                        updateGameContext(suggestedFoundation.clickEmpty({ isKeyboard: false }));\n                    }\n                }\n            } else {\n                copy.settings.suggestionMode = SuggestionModes.get(SuggestionModes.SCORED);\n                copy.suggestor.evaluateOptions(copy);\n                if (copy._hasSuggestion(copy.tableau)) {\n                    const suggestedTableaus = copy.tableau.stacks.filter((s) => copy._hasSuggestion(s));\n                    if (suggestedTableaus.length) {\n                        const suggestedTableau = suggestedTableaus[0];\n                        const suggestedCards = suggestedTableau.stack.filter((c) => c.suggestion);\n                        if (suggestedCards.length) {\n                            const suggestedCard = suggestedCards[0];\n                            updateGameContext(suggestedCard.onClick({ isKeyboard: false }));\n                        }\n                    }\n                }\n            }\n        }, 150);\n\n        return () => clearTimeout(timeout);\n    });\n    return null;\n};\n\nconst useEvaluation: (mode: string, token: number) => [number, () => void] = (mode, token) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state)\n        return [\n            0,\n            () => {\n                throw \"no state\";\n            },\n        ];\n    const [falseResults, setFalseResults] = React.useState<number>(0);\n    const reset = () => setFalseResults(0);\n    React.useEffect(() => {\n        const copy = Model.copy(state);\n        copy.settings.suggestionMode = SuggestionModes.get(mode);\n        copy.suggestor.evaluateOptions(copy);\n        if (copy.hasSuggestions()) {\n            if (falseResults !== 0) {\n                setFalseResults(0);\n            }\n        } else {\n            setFalseResults(falseResults + 1);\n        }\n    }, [token]);\n    return [falseResults, reset];\n};\n\nconst Evaluator = (props: { token: number }) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const [full, resetFull] = useEvaluation(SuggestionModes.FULL, props.token);\n    const [regular, resetRegular] = useEvaluation(SuggestionModes.REGULAR, props.token);\n    const [noRegularSince, setNoRegularSince] = React.useState<number>(0);\n    const [noFullSince, setNoFullSince] = React.useState<number>(0);\n    React.useEffect(() => {\n        if (!state.hand.currentCard()) {\n            console.log(full, regular);\n\n            if (full > 0 && regular > 0) {\n                if (noFullSince >= 0) {\n                    //@todo we need full blown menu here, not just a toast.\n                    toast.error(\n                        (props: ToastContentProps) => (\n                            <div>\n                                <div>😢 looks like the game is over</div>\n                                <div></div>\n                                <div>\n                                    <button\n                                        onClick={() => {\n                                            setNoFullSince(-3);\n                                            props.closeToast && props.closeToast();\n                                        }}\n                                    >\n                                        Keep trying\n                                    </button>\n                                    <button onClick={() => alert(\"@todo\")}>Restart</button>\n                                    <button onClick={() => alert(\"@todo\")}>Give up</button>\n                                </div>\n                            </div>\n                        ),\n                        { autoClose: false, closeButton: false }\n                    );\n                }\n                setNoFullSince(noFullSince + 1);\n                resetFull();\n            } else if (regular > 0 && full == 0) {\n                if (state.settings.suggestionMode.key !== SuggestionModes.FULL && noRegularSince >= 0) {\n                    // toast.warn((props: ToastContentProps) => (\n                    //     <div>\n                    //         <div>😢 looks like youre stuck here. Have you tried enabling full suggestions?</div>\n                    //         <div></div>\n                    //         <div>\n                    //             <button>Enable</button>\n                    //             <button\n                    //                 onClick={() => {\n                    //                     setNoRegularSince(-2);\n                    //                     props.closeToast && props.closeToast();\n                    //                 }}\n                    //             >\n                    //                 Maybe Later\n                    //             </button>\n                    //             <button>Dont ask again</button>\n                    //         </div>\n                    //     </div>\n                    // ));\n                }\n                resetRegular();\n\n                setNoRegularSince(noRegularSince + 1);\n            }\n        }\n    }, [full, regular, state.hand.currentCard()]);\n    return null;\n};\nconst RatingToast = (props: { rating: AppliedRating }) => {\n    return (\n        <div>\n            <div>Rating</div>\n            <div>{props.rating.text}</div>\n        </div>\n    );\n};\nconst RatingToastProps: ToastOptions = { autoClose: 2000, hideProgressBar: true, position: \"bottom-center\" };\n//todo allow opt out\n//showing this all the time is too much\n//use toasts for badges/achievements instead\nconst RatingNotifier = () => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    React.useEffect(() => {\n        if (state?.game.rating && state?.game.rating.hasNotifications()) {\n            const notification = state?.game.rating.getNextNotification();\n            if (notification) {\n                const setNotified = () => {\n                    updateContext((ctx) => {\n                        ctx.game.rating.setNotified(notification.id);\n                    });\n                };\n\n                if (notification.points > 0) {\n                    toast.success(<RatingToast rating={notification} />, RatingToastProps);\n                    setNotified();\n                } else {\n                    toast.warn(<RatingToast rating={notification} />, RatingToastProps);\n                    setNotified();\n                }\n            }\n        }\n    }, [state?.token]);\n    return null;\n};\n\nexport default Judge;\n","import \"./StartScreen/Menu.scss\";\n\nimport { NavigationContext, NavigationProvider, NavigationState } from \"./StartScreen/Context\";\nimport { Universal, getKeyboardLayout } from \"../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../Game/BoardContext\";\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\n\nconst _Menu = () => {\n    const [navigation, setNavigation] = React.useState<NavigationState>({\n        menu: {\n            x: 0,\n            y: 0,\n        },\n        screen: {\n            x: 0,\n            y: 0,\n        },\n        focus: \"menu\",\n        mainMenu: \"\",\n        screeen: \"\",\n    });\n    const navigationContext = {\n        navigation,\n        setNavigation,\n    };\n    return (\n        <NavigationProvider value={navigationContext}>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too if consented and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = React.useContext(NavigationContext);\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n    if (!state) {\n        return null;\n    }\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining == 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining == 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) [(announcement = \"The game is not paused.\")];\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle label=\"😴\" />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle label=\"😴\" />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon=\"▶️\"\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                        />\n                        <MenuButton\n                            icon=\"🌪️\"\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            toggled={navigation.mainMenu == \"entropy\"}\n                        >\n                            <MenuButton\n                                icon=\"🌪️\"\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                            />\n                            <MenuButton\n                                icon=\"🌬️\"\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon=\"♻️\"\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon=\"🗑️\" title=\"Quit Game\" onClick={() => restart()} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import React from \"react\";\n\nconst usePrevious = <T>(value: T) => {\n    const ref = React.useRef<T>();\n    React.useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n","import Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport usePrevious from \"./usePrevious\";\n\nconst Renderer = (props: { length: number; paused: boolean; started: number }) => {\n    const context = React.useContext(GlobalContext);\n\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout: any = null;\n        if (\n            context &&\n            context.state &&\n            context.state.settings.launchSettings.speed &&\n            started &&\n            !paused &&\n            previous &&\n            (previous?.length != length || previous?.started != started || previous?.paused != paused)\n        ) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (\n                        length == state.stock.stack.length &&\n                        state.stock.passes > 0 &&\n                        (state.stock.stack.length || state.waste.stack.length)\n                    ) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => clearTimeout(timeout);\n    }, [length, paused, started]);\n\n    if (!context || !context.state) return null;\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            <Card\n                index={0}\n                key={0}\n                models={context.state.stock.stack}\n                offsetTop={(index) => (index / 2) * -1}\n                zIndex={0}\n                blink={context?.state?.stock.blinkFor}\n                isSuggested={(index) => context?.state?.stock.suggestion && index == context.state.stock.stack.length - 1}\n            />\n        </div>\n    );\n};\n\nconst Stock = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    useBlinkEffect((model) => model.stock);\n    const pause = React.useContext(PauseContext);\n    const { paused, started } = pause.state;\n    return <Renderer length={state.stock.stack.length} paused={paused} started={started} />;\n};\n\nexport default Stock;\n","import Card from \"./Card\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport TableauModel from \"../../Model/Game/Tableau\";\nimport TableauStack from \"../../Model/Game/TableauStack\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\ntype TableauProps = { index: number; model: TableauStack; parent: TableauModel };\n\nconst TableauStacks = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    return (\n        <>\n            {state.tableau.stacks.map((tableau, index) => (\n                <Tableau key={index} index={index} model={tableau} parent={state.tableau} />\n            ))}\n        </>\n    );\n};\nexport default TableauStacks;\n\nconst Tableau = (props: TableauProps) => {\n    useBlinkEffect((s) => s.tableau.stacks[props.index]);\n    const [accepting, setAccepting] = React.useState<boolean>(false);\n    const { updateGameContext, state } = React.useContext(GlobalContext);\n    const [, drop] = useDrop({\n        accept: \"card\",\n        canDrop: (item: any) => {\n            const accepts = props.model.accepts(item.model);\n            setAccepting(accepts);\n            return accepts;\n        },\n        drop: () => {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n\n    const cards = state?.hand.source == props.model.source ? [...props.model.stack, ...state.hand.stack] : [...props.model.stack];\n\n    let offset = 1;\n    const getOffset = (index: number, cards: CardModel[]) => {\n        for (let i = 0; i <= index; i++) {\n            if (cards[i] && !cards[i].isHidden) {\n                offset = i * 12 + (index - i) * 24;\n                return offset;\n            }\n        }\n        offset = index * 12;\n        return offset;\n    };\n\n    return (\n        <div className=\"board-field\" ref={drop}>\n            <StackBase model={props.model} />\n            <Card\n                index={0}\n                key={0}\n                accepting={accepting}\n                models={cards}\n                blink={props.model.blinkFor}\n                isSuggested={(index) => props.model.suggestion && props.model.stack.length - 1 == index}\n                offsetTop={(index, models) => getOffset(index, models)}\n                isSelected={(index) => index > props.model.stack.length - 1}\n            />\n        </div>\n    );\n};\n","import Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\nconst Waste = () => {\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    useBlinkEffect((model) => model.waste);\n    const getOffset = (index: number) => {\n        if (state.settings.launchSettings.drawMode == \"single\") {\n            return 0;\n        }\n        const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n        let additionalOffset = 2;\n        if (length == 2) {\n            additionalOffset = 1;\n        }\n\n        if (length == 1) {\n            additionalOffset = 0;\n        }\n\n        return ((index - length - 2) % 3) + additionalOffset;\n    };\n\n    const [, _drop] = useDrop({\n        accept: \"card\",\n        // eslint-disable-next-line no-unused-vars\n        canDrop: () => {\n            const accepts = state.hand.isFromWaste();\n            //setAccepting(accepts);\n            return accepts;\n        },\n        drop: () => {\n            updateGameContext(state.waste.clickEmpty({ isKeyBoard: false }));\n        },\n    });\n\n    const cards = state?.hand.source == state.waste.source ? [...state.waste.stack, ...state.hand.stack] : [...state.waste.stack];\n\n    return (\n        <div className=\"board-field\" ref={_drop}>\n            <StackBase model={state.waste} />\n            <Card\n                index={0}\n                key={0}\n                models={cards}\n                offsetTop={(index) => (index / 2) * -1}\n                offsetLeft={(index) => getOffset(index)}\n                blink={state.waste.blinkFor}\n                isSuggested={(index) => state.waste.suggestion && index == state.waste.stack.length - 1}\n                isSelected={(index) => index > state.waste.stack.length - 1}\n            />\n        </div>\n    );\n};\nexport default Waste;\n","import \"./Board.scss\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nimport { Slide, ToastContainer } from \"react-toastify\";\n\nimport BoardNavigator from \"./Navigation/BoardNavigator\";\nimport Dealer from \"./Dealer\";\nimport DndPreview from \"../../common/DndPreview\";\nimport FoundationStacks from \"./Foundation\";\nimport Header from \"../UI/Header/Header\";\nimport Judge from \"./Judge\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport TableauStacks from \"./Tableau\";\nimport Waste from \"./Waste\";\n\ntype BoardProps = { mode: string };\nconst Board = (props: BoardProps) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n    return (\n        <>\n            <Menu />\n            <Header mode={props.mode} />\n            <ToastContainer\n                style={{ zIndex: 8888 }}\n                position=\"top-center\"\n                closeOnClick={false}\n                newestOnTop={true}\n                limit={1}\n                pauseOnFocusLoss={false}\n                draggable={false}\n                transition={Slide}\n            />\n            <div className={\"board-jail \" + props.mode}>\n                <div className={\"board-grid-container \" + props.mode}>\n                    <Stock />\n                    <Waste />\n                    <div className=\"board-field spacer\" ref={ref}>\n                        {ref.current && <DndPreview reff={ref.current} />}\n                    </div>\n                    <FoundationStacks />\n                    <TableauStacks />\n                </div>\n            </div>\n            <Dealer />\n            <BoardNavigator />\n            <Judge />\n        </>\n    );\n};\n\nexport default Board;\n","import \"./Screens.scss\";\n\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\n\nconst EndScreen = () => {\n    const { state, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    //@todo show launch settings (draw mode, recycling mode)\n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport {BoardProvider} from \"./BoardContext\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../Context\";\nimport React from \"react\";\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\n//We use class component here because setState allows partial updates\nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                state.setToken(Math.random());\n                return state;\n            }\n\n            return null;\n        });\n\n    //on every render, we refresh the click handlers in the model and the suggestions\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider value={{ player: this.props.player }}>\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n"],"sourceRoot":""}