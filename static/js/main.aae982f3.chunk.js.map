{"version":3,"sources":["View/Context.ts","View/Game/Dealer.js","View/UI/EndScreen.js","View/Game/BlinkingComponent.js","View/Game/Card.js","View/Game/MouseHand.js","View/Game/TouchHand.js","View/Game/Hand.js","View/Game/StackBase.js","View/Game/Foundation.js","View/UI/Clock.js","View/UI/EndGame.js","View/UI/Hearts.js","View/UI/Hint.js","View/UI/Points.js","View/UI/RestartGame.js","View/UI/ToggleMenu.js","View/UI/Undo.js","View/UI/Header.js","View/UI/Menu.js","View/Game/Stock.js","View/Game/Tableau.js","View/Game/Waste.js","View/Game/Board.js","Business/Blinker.ts","Business/Dealer.ts","Business/Dispatcher.ts","Business/Foundation.ts","Model/Deck/Card.js","Model/Deck/DeckSize.js","Model/Deck/Suits.js","Model/Deck/Deck.js","Model/Game/Foundation.js","Model/Game/Rating.js","Model/Game/TimeMachine.js","Model/Game/Game.js","Model/Game/Hand.js","Model/Game/Settings.js","Model/Game/Stock.js","Model/Game/Tableau.ts","Model/Game/Waste.js","Model/Model.ts","Business/Stock.ts","Business/Tableau.ts","Business/Waste.ts","Business/Suggestions.js","Business/BusinessModel.ts","View/Game/BoardWrap.tsx","View/UI/StartScreen.js","App.tsx","index.tsx"],"names":["defaultValue","state","replaceContext","updateContext","restart","GlobalContext","React","createContext","Provider","Dealer","useContext","timeouts","settings","launchSettings","quickDeal","dealer","isDealt","dealAll","deal","dealt","push","setTimeout","dealOne","useEffect","forEach","timeout","clearTimeout","EndScreen","game","isEnded","className","points","getElapsed","onClick","BlinkingComponent","selector","this","context","blinkFor","unblink","Component","contextType","Card","props","e","ele","target","includes","offsetParent","rect","getBoundingClientRect","position","click","x","clientX","y","clientY","element","model","style","pointerEvents","zIndex","offsetTop","top","entropyStyle","offsetLeft","left","getCardStyle","hasSuggestion","isSuggested","suggestion","type","icon","isSelected","source","blink","getClassName","isHidden","face","MouseHand","onMouseMove","positionFixed","setState","updateDisplay","myRef","createRef","bind","onKeyDown","document","addEventListener","putBack","removeEventListener","node","current","hand","parent","window","event","keyCode","getOffsetTop","index","ref","stack","map","card","TouchHand","c","Hand","p","length","mouseMode","StackBase","classname","visible","suggested","children","Foundation","s","foundation","stacks","Stacks","Clock","useState","elapsed","setElapsed","interval","setInterval","started","clearInterval","EndGame","title","Hearts","recyclingMode","passes","createString","Array","from","keys","join","stock","getHearts","Hint","suggestOnce","previous","suggestionMode","suggest","listenForH","Points","rating","RestartGame","disabled","timemachine","previousStates","ToggleMenu","menu","showMenu","Undo","undo","_state","popPreviousState","penalize","ctrlZ","evtobj","ctrlKey","Math","pow","multiplicator","Header","Menu","onChange","sm","value","suggestionModes","mm","mouseModes","lvl","setEntropy","baseEntropy","entropyLevels","entropyLevel","interactionEntropy","rel","href","Stock","Tableau","tableau","getOffset","i","Waste","waste","drawMode","isHoldingCard","isFromWaste","additionalOffset","Board","Blinker","updateGameContext","startBlink","registerBlink","stopBlink","dealingAt","callback","Date","now","newCard","pop","isFirst","Dispatcher","clickHandler","getHandler","dispatchPutDown","dispatchPickup","blinker","wouldAccept","src","add","putDown","registerMove","tryDetectEnd","_card","getTop","getPreviousUsed","pickUp","remove","registerPickup","countCards","end","causeEntropy","level","random","randomInt","min","max","equals","other","otherCard","copy","orig","copyAll","cards","DeckSize","Suits","heart","color","club","diamond","spade","Deck","Object","deckSize","key","flat","reverse","shuffleArray","array","j","floor","getStacks","getCurrentAccepted","currentFoundation","acceptedCards","hasMoreThanOneCard","accepts","currentCard","currentAccepted","usedCards","f","parseInt","reduce","a","b","suit","slice","origStack","Rating","currentMove","rateMove","registerRecycle","console","debug","registerUncover","penalty","move","isTableau","obj","substr","isFoundation","TimeMachine","memorable","modified","pushPreviousState","modelEquals","id","isRequested","popPrevious","stackEquals","every","stacksEqual","Game","padleft","msec","hh","ss","splice","isHoldingKing","isFromCurrentSource","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","Settings","isTouch","is_touch_device","prefixes","split","DocumentTouch","query","matchMedia","matches","error","recycle","setCardProperties","recyclings","isOnTop","popTop","result","getStack","canPutDown","range","indexOf","getCard","popWithFollowing","stackEntropy","uncover","entropy","next","concat","offset","tryPutDown","canAdd","addAll","_a","_b","_c","Model","getInitialState","deck","shuffle","moveToWaste","recycleWaste","canRecycle","tryUncover","Suggestions","evaluateOptions","disableAllSuggestions","getUncoverOptions","getPutdownSuggestions","getPickupOptions","onlyUseful","accepted","foundAny","wasteState","BusinessModel","cardIndex","tableauState","options","stackindex","disableSuggestion","nullBlinker","suggestor","assignHandlers","BoardWrap","modifier","render","StartScreen","start","App","defaultState","initialized","appState","setAppState","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.aae982f3.chunk.js","sourcesContent":["import { StateReplaceFunction, StateUpdateFunction } from \"../Common\";\r\n\r\nimport BusinessModel from \"../Business/BusinessModel\";\r\nimport React from \"react\";\r\n\r\ninterface IGlobalContext {\r\n    state: BusinessModel | null;\r\n    replaceContext: StateReplaceFunction;\r\n    updateContext: StateUpdateFunction;\r\n    restart: () => void;\r\n}\r\n\r\nconst defaultValue = {\r\n    state: null,\r\n    replaceContext: () => {},\r\n    updateContext: () => {},\r\n    restart: () => {},\r\n};\r\n\r\nconst GlobalContext = React.createContext<IGlobalContext>(defaultValue);\r\n\r\nexport const Provider = GlobalContext.Provider;\r\n\r\nexport default GlobalContext;\r\n","import GlobalContext from \"../Context\";\r\nimport React from \"react\";\r\n\r\nconst Dealer = () => {\r\n    const { state, replaceContext } = React.useContext(GlobalContext);\r\n    const timeouts = [];\r\n    //@todo implement launch setting UI for quick dealing\r\n    if (state.settings.launchSettings.quickDeal) {\r\n        if (state && state.dealer && !state.dealer.isDealt) {\r\n            replaceContext(state.dealer.dealAll(state));\r\n        }\r\n    } else {\r\n        const deal = (dealt) => {\r\n            timeouts.push(\r\n                setTimeout(() => {\r\n                    if (state && state.dealer && !state.dealer.isDealt) {\r\n                        replaceContext(state.dealer.dealOne(dealt, deal));\r\n                    }\r\n                }, 35)\r\n            );\r\n        };\r\n\r\n        React.useEffect(() => {\r\n            deal(state.dealer.dealt);\r\n            return () => timeouts.forEach((timeout) => clearTimeout(timeout));\r\n        }, []);\r\n    }\r\n    return null;\r\n};\r\nexport default Dealer;\r\n","import \"../Style/Screens.css\";\r\n\r\nimport GlobalContext from \"../Context\";\r\nimport React from \"react\";\r\n\r\nconst EndScreen = () => {\r\n    const { state, restart } = React.useContext(GlobalContext);\r\n    //@todo show launch settings (draw mode, recycling mode)\r\n    return !state.game.isEnded ? null : (\r\n        <div className=\"endscreen\">\r\n            <div className=\"title\">🥳</div>\r\n            <div>Points: {state.game.points}</div>\r\n            <div>Time: {state.game.getElapsed()}</div>\r\n            <div>\r\n                <button onClick={restart}>\r\n                    ♻️<div>new game</div>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EndScreen;\r\n","import { Component } from \"react\";\r\nimport GlobalContext from \"../Context\";\r\n\r\nexport default class BlinkingComponent extends Component {\r\n    constructor(selector) {\r\n        super();\r\n        this.timeout = null;\r\n        this.selector = selector;\r\n    }\r\n\r\n    static contextType = GlobalContext;\r\n\r\n    componentDidUpdate() {\r\n        if (this.selector(this.context.state).blinkFor) {\r\n            this.timeout = setTimeout(() => this.selector(this.context.state).unblink(), 200);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timeout);\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n    const onClick = (e) => {\r\n        let ele = e.target;\r\n        while (ele && !ele.className.includes(\"card-base\")) {\r\n            ele = ele.offsetParent;\r\n        }\r\n\r\n        //@todo use scroll difference instead\r\n        const rect = ele.getBoundingClientRect();\r\n        const position = {\r\n            click: {\r\n                x: e.clientX,\r\n                y: e.clientY,\r\n            },\r\n            element: {\r\n                x: rect.x,\r\n                y: rect.y,\r\n            },\r\n        };\r\n\r\n        props.onClick({ ...props.model }, position);\r\n    };\r\n\r\n    const getClassName = () => {\r\n        const hasSuggestion = props.isSuggested || props.model.suggestion;\r\n        let className = `card card-base suit-${props.model.type.icon}`;\r\n        className += !props.isSelected && !hasSuggestion ? ` card-stack-${props.model.source}` : \"\";\r\n        className += props.isSelected ? \" card-selected\" : \"\";\r\n        className += props.blink ? \" blink\" : \"\";\r\n        //@todo onhover, trigger highlight of suggested target card/stack (preview what happens if picked up)\r\n        className += hasSuggestion ? \" card-suggested\" : \"\";\r\n\r\n        return className;\r\n    };\r\n\r\n    const getCardStyle = () => {\r\n        const style = {\r\n            zIndex: props.zIndex ? props.zIndex : !!props.offsetTop + 2,\r\n            top: props.offsetTop ? props.offsetTop / 10 + \"vw\" : 0,\r\n            ...props.model.entropyStyle,\r\n        };\r\n\r\n        //move to left on waste (triple draw)\r\n        if (props.offsetLeft) {\r\n            style.left = props.offsetLeft * 4 + \"vw\";\r\n        }\r\n\r\n        if (!props.onClick) {\r\n            style.pointerEvents = \"none\";\r\n        }\r\n\r\n        return style;\r\n    };\r\n\r\n    const getStackbaseStyle = () => {\r\n        if (!props.onClick) {\r\n            return { pointerEvents: \"none\" };\r\n        }\r\n\r\n        return {};\r\n    };\r\n\r\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\r\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\r\n\r\n    return (\r\n        <div style={getStackbaseStyle()} className=\"stack-base\">\r\n            <div style={getCardStyle()} className={getClassName()} onClick={onClick ? onClick : null}>\r\n                {props.model.isHidden ? (\r\n                    <div className=\"card-back\">&nbsp;</div>\r\n                ) : (\r\n                    <div className=\"card-grid-container\">\r\n                        <div>\r\n                            <div className=\"align-center\">{props.model.type.icon}</div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"align-left\">{props.model.face}</div>\r\n                        </div>\r\n                        <div>&nbsp;</div>\r\n                        <div>\r\n                            <div className=\"align-center\">{props.model.type.icon}</div>\r\n                        </div>\r\n                        <div className=\"mainface\">\r\n                            <div className=\"align-center\">{props.model.face}</div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"align-center\">{props.model.type.icon}</div>\r\n                        </div>\r\n                        <div>&nbsp;</div>\r\n                        <div>\r\n                            <div className=\"align-right\">{props.model.face}</div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"align-center\">{props.model.type.icon}</div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import Card from \"./Card\";\r\nimport React from \"react\";\r\n\r\nexport default class MouseHand extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n\r\n        this.state = {\r\n            positionFixed: true,\r\n        };\r\n        this.onMouseMove = this.onMouseMove.bind(this);\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"mousemove\", this.onMouseMove, false);\r\n        if (this.props.putBack) {\r\n            document.addEventListener(\"keydown\", this.onKeyDown, false);\r\n        }\r\n        this.setState(() => ({\r\n            positionFixed: true,\r\n        }));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"mousemove\", this.onMouseMove, false);\r\n        document.addEventListener(\"keydown\", this.onKeyDown, false);\r\n    }\r\n\r\n    onMouseMove = (e) => {\r\n        if (this.state.positionFixed) {\r\n            this.setState((state) => {\r\n                state.positionFixed = false;\r\n                return { ...state };\r\n            });\r\n        }\r\n        this.updateDisplay(e);\r\n    };\r\n\r\n    updateDisplay(e) {\r\n        if (!this.state.positionFixed) {\r\n            const node = this.myRef.current;\r\n            if (this.props.hand && this.props.parent == this.props.hand.source) {\r\n                if (e) {\r\n                    const x = e.clientX - this.props.hand.position.click.x + this.props.hand.position.element.x,\r\n                        y = e.clientY - this.props.hand.position.click.y + this.props.hand.position.element.y;\r\n                    node.style.top = y + \"px\";\r\n                    node.style.left = x + \"px\";\r\n                    node.style.position = \"absolute\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onKeyDown(e) {\r\n        const evtobj = window.event ? event : e;\r\n        if (evtobj.keyCode == 27 && this.props.hand && this.props.parent == this.props.hand.source) this.props.putBack();\r\n    }\r\n\r\n    render() {\r\n        const getOffsetTop = (index) => {\r\n            if (this.state.positionFixed) {\r\n                return this.props.offsetTop + index * 24;\r\n            }\r\n            return index * 24;\r\n        };\r\n        if (!this.props.hand || this.props.parent !== this.props.hand.source) {\r\n            return null;\r\n        }\r\n        return (\r\n            <div ref={this.myRef}>\r\n                {this.props.hand &&\r\n                    this.props.hand.stack &&\r\n                    this.props.hand.stack.map((card, index) => (\r\n                        <Card key={index} model={card} offsetTop={getOffsetTop(index)} zIndex={1000 + index * 20} isSelected={true} />\r\n                    ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import Card from \"./Card\";\r\nimport React from \"react\";\r\n\r\nexport default class TouchHand extends React.Component {\r\n    //@todo merge with mousehand\r\n    render() {\r\n        if (!this.props.hand || this.props.parent !== this.props.hand.source) {\r\n            return null;\r\n        }\r\n        return [\r\n            this.props.hand &&\r\n                this.props.hand.stack &&\r\n                this.props.hand.stack.map((card, index) => (\r\n                    <Card\r\n                        key={index}\r\n                        model={card}\r\n                        offsetTop={this.props.offsetTop + index * 24}\r\n                        offsetLeft={this.props.offsetLeft}\r\n                        zIndex={1000 + index * 20}\r\n                        isSelected={true}\r\n                        onClick={(c) => this.props.onClick(c)}\r\n                    />\r\n                )),\r\n        ];\r\n    }\r\n}\r\n","import GlobalContext from \"../Context\";\r\nimport MouseHand from \"./MouseHand\";\r\nimport React from \"react\";\r\nimport TouchHand from \"./TouchHand\";\r\n\r\nconst Hand = (props) => {\r\n    const { state } = React.useContext(GlobalContext);\r\n    if (!state.hand || props.parent !== state.hand.source) {\r\n        return null;\r\n    }\r\n    const putBack = (c, p) => props.onClick(props.stack[props.stack.length - 1], p, props.stack.length - 1);\r\n    if (state.settings.mouseMode == \"follow-cursor\") {\r\n        return <MouseHand parent={props.parent} hand={state.hand} offsetTop={props.offsetTop} putBack={putBack} />;\r\n    }\r\n    if (state.settings.mouseMode == \"remain-on-stack\") {\r\n        return (\r\n            <TouchHand\r\n                parent={props.parent}\r\n                hand={state.hand}\r\n                offsetTop={props.offsetTop}\r\n                offsetLeft={props.offsetLeft}\r\n                onClick={putBack}\r\n            />\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nexport default Hand;\r\n","import React from \"react\";\r\n\r\nconst StackBase = (props) => {\r\n    let classname = \"card-base\";\r\n\r\n    if (props.visible) {\r\n        if (props.blink) {\r\n            classname += \" socket-blink\";\r\n        } else {\r\n            classname += \" socket-empty\";\r\n        }\r\n    } else {\r\n        classname += \" socket-full\";\r\n    }\r\n\r\n    if (props.suggested) {\r\n        classname += \" socket-suggested\";\r\n    }\r\n\r\n    return (\r\n        <div className={classname} onClick={() => props.onClick()}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\nexport default StackBase;\r\n","import BlinkingComponent from \"./BlinkingComponent\";\r\nimport Card from \"./Card\";\r\nimport GlobalContext from \"../Context\";\r\nimport Hand from \"./Hand\";\r\nimport React from \"react\";\r\nimport StackBase from \"./StackBase\";\r\n\r\nexport default class Foundation extends BlinkingComponent {\r\n    constructor(props) {\r\n        super((s) => s.foundation.stacks[props.index]);\r\n    }\r\n\r\n    static Stacks = () => {\r\n        const { state } = React.useContext(GlobalContext);\r\n        return state.foundation.stacks.map((foundation, index) => (\r\n            <Foundation key={index} model={foundation} index={index} onClick={state.foundation.onClick} />\r\n        ));\r\n    };\r\n\r\n    render() {\r\n        const model = this.props.model;\r\n        return (\r\n            <div key={this.props.index}>\r\n                <StackBase\r\n                    suggested={model.suggestion && !model.stack.length}\r\n                    blink={model.blinkFor}\r\n                    onClick={() => this.props.onClick(null, null, this.props.index)}\r\n                    visible={!model.stack.length}\r\n                >\r\n                    <div className={\"align-center foundation-base suit-\" + model.icon}>{model.icon}</div>\r\n                </StackBase>\r\n                {model.stack.map((card, index) => (\r\n                    <Card\r\n                        key={index}\r\n                        model={card}\r\n                        blink={model.blinkFor}\r\n                        isSuggested={model.suggestion && model.stack.length - 1 == index}\r\n                        onClick={(c, p) => this.props.onClick(c, p, this.props.index)}\r\n                    />\r\n                ))}\r\n                <Hand\r\n                    parent={\"foundation-\" + this.props.index}\r\n                    onClick={(c, p) => this.props.onClick(model.stack[model.stack.length - 1], p, this.props.index)}\r\n                    stack={model.stack}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import GlobalContext from \"../Context\";\r\nimport React from \"react\";\r\n\r\nconst Clock = () => {\r\n    const { state } = React.useContext(GlobalContext);\r\n    const [elapsed, setElapsed] = React.useState(0);\r\n    React.useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (state.game.started) {\r\n                setElapsed(state.game.getElapsed());\r\n            }\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    return !state.game.started || !elapsed ? null : (\r\n        <div className=\"header-clock\">\r\n            <div className=\"icon-container\">🕒</div>\r\n            {elapsed}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Clock;\r\n","import GlobalContext from \"../Context\";\r\nimport React from \"react\";\r\n\r\nconst EndGame = () => {\r\n    const { restart } = React.useContext(GlobalContext);\r\n\r\n    return (\r\n        <div>\r\n            <button title=\"End Game\" onClick={restart}>\r\n                🗑️\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\nexport default EndGame;\r\n","import GlobalContext from \"../Context\";\r\nimport React from \"react\";\r\n\r\nconst Hearts = () => {\r\n    const { state } = React.useContext(GlobalContext);\r\n    const getHearts = () => {\r\n        if (state.settings.launchSettings.recyclingMode == \"infinite\") {\r\n            return \"🖤\";\r\n        }\r\n\r\n        if (state.settings.launchSettings.recyclingMode == \"1-pass\") {\r\n            return state.game.passes > 0 ? \"❤️\" : \"💔\";\r\n        }\r\n\r\n        if (state.settings.launchSettings.recyclingMode == \"3-pass\") {\r\n            const createString = (length, icon) =>\r\n                Array.from(new Array(length).keys())\r\n                    .map(() => icon)\r\n                    .join(\"\");\r\n\r\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\r\n        }\r\n        return null;\r\n    };\r\n    return <div className=\"heart-container\">{getHearts()}</div>;\r\n};\r\nexport default Hearts;\r\n","import GlobalContext from \"../Context\";\r\nimport React from \"react\";\r\n\r\nconst Hint = () => {\r\n    const { state, updateContext } = React.useContext(GlobalContext);\r\n    const suggestOnce = () => {\r\n        updateContext((state) => {\r\n            const previous = state.settings.suggestionMode;\r\n            //@todo : keep hint active for a whole move\r\n            //only change suggestionMode, then change afterwards \r\n            //let central render function trigger suggest() \r\n            //@todo penalize hint based on settings\r\n            state.settings.suggestionMode = \"regular\";\r\n            state.suggest();\r\n            state.settings.suggestionMode = previous;\r\n        });\r\n    };\r\n    const listenForH = (e) => {\r\n        const evtobj = window.event ? event : e;\r\n        if (evtobj.keyCode == 72) {\r\n            suggestOnce();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        document.addEventListener(\"keydown\", listenForH);\r\n        return () => document.removeEventListener(\"keydown\", listenForH);\r\n    }, []);\r\n\r\n    return state.settings.suggestionMode !== \"none\" ? null : (\r\n        <div>\r\n            <button title=\"Hint\" onClick={() => suggestOnce()}>\r\n                💡\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\nexport default Hint;\r\n","import GlobalContext from \"../Context\";\r\nimport React from \"react\";\r\n\r\nconst Points = () => {\r\n    const { state } = React.useContext(GlobalContext);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"icon-container\">🏆</div> {state.game.rating.points}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Points;\r\n","import GlobalContext from \"../Context\";\r\nimport React from \"react\";\r\n\r\nconst RestartGame = () => {\r\n    const { state, replaceContext } = React.useContext(GlobalContext);\r\n\r\n    const reset = () =>\r\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\r\n\r\n    return (\r\n        <div>\r\n            <button title=\"Restart\" disabled={!state.game.timemachine.previousStates.length} onClick={reset}>\r\n                ♻️\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RestartGame;\r\n","import GlobalContext from \"../Context\";\r\nimport React from \"react\";\r\n\r\nconst ToggleMenu = () => {\r\n    const { state, updateContext } = React.useContext(GlobalContext);\r\n\r\n    const toggleMenu = (menu) => {\r\n        updateContext((state) => {\r\n            if (state.settings.showMenu == menu) {\r\n                state.settings.showMenu = !state.settings.showMenu;\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button title=\"Settings\" onClick={() => toggleMenu(state.settings.showMenu)}>\r\n                ⚙️\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToggleMenu;\r\n","import GlobalContext from \"../Context\";\r\nimport React from \"react\";\r\n\r\nconst Undo = () => {\r\n    const { state, replaceContext } = React.useContext(GlobalContext);\r\n    const undo = () =>\r\n        replaceContext((_state) => {\r\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\r\n            if (previous) {\r\n                previous.game.rating.penalize(_state.game.rating);\r\n                previous.suggest();\r\n                return previous;\r\n            }\r\n            return null;\r\n        });\r\n\r\n    const ctrlZ = (e) => {\r\n        const evtobj = window.event ? event : e;\r\n        if (evtobj.keyCode == 90 && evtobj.ctrlKey) {\r\n            undo();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        document.addEventListener(\"keydown\", ctrlZ);\r\n        return () => document.removeEventListener(\"keydown\", ctrlZ);\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                disabled={!state.game.timemachine.previousStates.length}\r\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\r\n                onClick={undo}\r\n            >\r\n                ⏪\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Undo;\r\n","import \"../Style/Header.css\";\r\n\r\nimport Clock from \"./Clock\";\r\nimport EndGame from \"./EndGame\";\r\nimport Hearts from \"./Hearts\";\r\nimport Hint from \"./Hint\";\r\nimport Points from \"./Points\";\r\nimport React from \"react\";\r\nimport RestartGame from \"./RestartGame\";\r\nimport ToggleMenu from \"./ToggleMenu\";\r\nimport Undo from \"./Undo\";\r\n\r\nconst Header = () => (\r\n    <div className=\"header\">\r\n        <div className=\"header-title\">\r\n            <Hearts />\r\n            <Points />\r\n        </div>\r\n        <Clock />\r\n        <div className=\"header-buttons\">\r\n            <Hint />\r\n            <Undo />\r\n            <RestartGame />\r\n            <EndGame />\r\n            <ToggleMenu />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Header;\r\n","import \"../Style/Menu.css\";\r\n\r\nimport GlobalContext from \"../Context\";\r\nimport React from \"react\";\r\n\r\nconst Menu = () => {\r\n    //@todo persist game settings in local storage\r\n\r\n    const { state, updateContext } = React.useContext(GlobalContext);\r\n\r\n    const setSuggestionMode = (sm) => {\r\n        updateContext((state) => {\r\n            if (state.settings.suggestionMode !== sm) {\r\n                state.settings.suggestionMode = sm;\r\n                state.suggest();\r\n            }\r\n        });\r\n    };\r\n\r\n    const setBaseEntropy = (lvl) =>\r\n        updateContext((state) => {\r\n            state.setEntropy(lvl);\r\n        });\r\n\r\n    const setInteractionEntropy = (lvl) =>\r\n        updateContext((state) => {\r\n            state.settings.interactionEntropy = lvl;\r\n        });\r\n\r\n    const setMouseMode = (mm) =>\r\n        updateContext((state) => {\r\n            state.settings.mouseMode = mm;\r\n            state.suggest();\r\n        });\r\n\r\n    if (!state.settings.showMenu) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"menu\">\r\n            <div className=\"title\">Settings</div>\r\n            <div className=\"section\">\r\n                <div className=\"title\">Suggestions</div>\r\n                <div className=\"row\">\r\n                    <div className=\"label\">How much help - if any - should the game offer by displaying suggestions?</div>\r\n                    <select onChange={(e) => setSuggestionMode(e.target.value)} value={state.settings.suggestionMode}>\r\n                        {state.settings.suggestionModes.map((suggestionMode) => (\r\n                            <option key={suggestionMode} value={suggestionMode}>\r\n                                {suggestionMode}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className=\"section\">\r\n                <div className=\"title\">Active Card</div>\r\n                <div className=\"row\">\r\n                    <div className=\"label\">Should the selected card follow the cursor or remain on the stack?</div>\r\n                    <select onChange={(e) => setMouseMode(e.target.value)} value={state.settings.mouseMode}>\r\n                        {state.settings.mouseModes.map((mouseMode) => (\r\n                            <option key={mouseMode} value={mouseMode}>\r\n                                {mouseMode}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className=\"section\">\r\n                <div className=\"title\">Base Entropy</div>\r\n                <div className=\"row\">\r\n                    <div className=\"label\">How much chaos will the stacks on the board contain by themselves?</div>\r\n                    <select onChange={(e) => setBaseEntropy(e.target.value)} value={state.settings.baseEntropy}>\r\n                        {state.settings.entropyLevels.map((entropyLevel, index) => (\r\n                            <option key={entropyLevel} value={index}>\r\n                                {entropyLevel}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className=\"section\">\r\n                <div className=\"title\">Interaction Entropy</div>\r\n                <div className=\"row\">\r\n                    <div className=\"label\">How much chaos will each interaction add to a stack on the board?</div>\r\n                    <select onChange={(e) => setInteractionEntropy(e.target.value)} value={state.settings.interactionEntropy}>\r\n                        {state.settings.entropyLevels.map((entropyLevel, index) => (\r\n                            <option key={entropyLevel} value={index}>\r\n                                {entropyLevel}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/ckonig/solitaire/issues\">\r\n                Report Issues here\r\n            </a>\r\n        </div>\r\n    );\r\n};\r\nexport default Menu;\r\n","import BlinkingComponent from \"./BlinkingComponent\";\r\nimport Card from \"./Card\";\r\nimport React from \"react\";\r\nimport StackBase from \"./StackBase\";\r\n\r\nexport default class Stock extends BlinkingComponent {\r\n    constructor() {\r\n        super((s) => s.stock);\r\n    }\r\n\r\n    render() {\r\n        const { state } = this.context;\r\n        return (\r\n            <div>\r\n                <StackBase\r\n                    blink={state.stock.blinkFor}\r\n                    onClick={state.stock.onClick}\r\n                    suggested={state.stock.suggestion && !state.stock.stack.length}\r\n                    visible={!state.stock.stack.length}\r\n                />\r\n                {state.stock.stack.map((card, index) => (\r\n                    <Card\r\n                        key={index}\r\n                        model={card}\r\n                        offsetTop={(index / 2) * -1}\r\n                        blink={state.stock.blinkFor}\r\n                        isSuggested={state.stock.suggestion && index == state.stock.stack.length - 1}\r\n                        onClick={state.stock.onClick}\r\n                    />\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import BlinkingComponent from \"./BlinkingComponent\";\r\nimport Card from \"./Card\";\r\nimport GlobalContext from \"../Context\";\r\nimport Hand from \"./Hand\";\r\nimport React from \"react\";\r\nimport StackBase from \"./StackBase\";\r\n\r\nexport default class Tableau extends BlinkingComponent {\r\n    constructor(props) {\r\n        super((s) => s.tableau.stacks[props.index]);\r\n    }\r\n\r\n    static Stacks = () => {\r\n        const { state } = React.useContext(GlobalContext);\r\n        return state.tableau.stacks.map((tableau, index) => (\r\n            <Tableau key={index} index={index} model={tableau} onClick={state.tableau.onClick} />\r\n        ));\r\n    };\r\n\r\n    render() {\r\n        const props = this.props;\r\n        let offset = 0;\r\n        const getOffset = (index) => {\r\n            for (let i = 0; i <= index; i++) {\r\n                if (props.model.stack[i] && !props.model.stack[i].isHidden) {\r\n                    offset = i * 12 + (index - i) * 24;\r\n                    return offset;\r\n                }\r\n            }\r\n            offset = index * 12;\r\n            return offset;\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <StackBase\r\n                    suggested={props.model.suggestion && !props.model.stack.length}\r\n                    blink={props.model.blinkFor}\r\n                    onClick={() => props.onClick(null, null, props.index)}\r\n                    visible={!props.model.stack.length}\r\n                />\r\n                {props.model.stack.map((card, index) => (\r\n                    <Card\r\n                        key={index}\r\n                        model={card}\r\n                        blink={props.model.blinkFor}\r\n                        isSuggested={props.model.suggestion && props.model.stack.length - 1 == index}\r\n                        offsetTop={getOffset(index)}\r\n                        onClick={(card, p) => props.onClick(card, p, props.index)}\r\n                    />\r\n                ))}\r\n                <Hand\r\n                    parent={\"tableau-\" + props.index}\r\n                    onClick={(card, p) => props.onClick(card, p, props.index)}\r\n                    stack={props.model.stack}\r\n                    offsetTop={getOffset(props.model.stack.length)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import BlinkingComponent from \"./BlinkingComponent\";\r\nimport Card from \"./Card\";\r\nimport Hand from \"./Hand\";\r\nimport React from \"react\";\r\nimport StackBase from \"./StackBase\";\r\n\r\nexport default class Waste extends BlinkingComponent {\r\n    constructor() {\r\n        super((s) => s.waste);\r\n    }\r\n\r\n    render() {\r\n        const { state } = this.context;\r\n        const getOffset = (index) => {\r\n            if (state.settings.launchSettings.drawMode == \"single\") {\r\n                return 0;\r\n            }\r\n            const length =\r\n                state.waste.settings.mouseMode == \"remain-on-stack\" && state.hand.isHoldingCard() && state.hand.isFromWaste()\r\n                    ? state.waste.stack.length + 1\r\n                    : state.waste.stack.length;\r\n            let additionalOffset = 2;\r\n            if (length == 2) {\r\n                additionalOffset = 1;\r\n            }\r\n\r\n            if (length == 1) {\r\n                additionalOffset = 0;\r\n            }\r\n\r\n            return ((index - length - 2) % 3) + additionalOffset;\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <StackBase\r\n                    blink={state.waste.blinkFor}\r\n                    onClick={() => state.waste.onClick(null, null)}\r\n                    suggested={state.waste.suggestion && !state.waste.stack.length}\r\n                    visible={!state.waste.stack.length}\r\n                />\r\n                {state.waste.stack.map((card, index) => (\r\n                    <Card\r\n                        key={index}\r\n                        model={card}\r\n                        offsetTop={(index / 2) * -1}\r\n                        offsetLeft={getOffset(index)}\r\n                        blink={state.waste.blinkFor}\r\n                        isSuggested={state.waste.suggestion && index == state.waste.stack.length - 1}\r\n                        onClick={(c, p) => state.waste.onClick(c, p)}\r\n                    />\r\n                ))}\r\n                <Hand\r\n                    offsetTop={(state.waste.stack.length / 2) * -1}\r\n                    offsetLeft={getOffset(state.waste.stack.length)}\r\n                    parent=\"waste\"\r\n                    onClick={state.waste.onClick}\r\n                    stack={state.waste.stack}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import \"../Style/Board.scss\";\r\n\r\nimport Dealer from \"./Dealer\";\r\nimport EndScreen from \"../UI/EndScreen\";\r\nimport Foundation from \"./Foundation\";\r\nimport Header from \"../UI/Header\";\r\nimport Menu from \"../UI/Menu\";\r\nimport React from \"react\";\r\nimport Stock from \"./Stock\";\r\nimport Tableau from \"./Tableau\";\r\nimport Waste from \"./Waste\";\r\n\r\nconst Board = () => (\r\n    <>\r\n        <div className=\"layout-grid-container\">\r\n            <Header />\r\n            <div className=\"board-grid-container\">\r\n                <Stock />\r\n                <Waste />\r\n                <div className=\"spacer\">&nbsp;</div>\r\n                <Foundation.Stacks />\r\n                <Tableau.Stacks />\r\n            </div>\r\n        </div>\r\n        <Menu />\r\n        <EndScreen />\r\n        <Dealer />\r\n    </>\r\n);\r\n\r\nexport default Board;\r\n","import BusinessModel from \"./BusinessModel\";\r\nimport { StateUpdateFunction } from \"../Common\";\r\nimport Stock from \"../Model/Game/Stock\";\r\nimport Waste from \"../Model/Game/Waste\";\r\n\r\n//@todo specify types of single tableau and foundation to avoid any\r\n\r\nexport type BlinkSelector = (state: BusinessModel) => Waste | Stock | any;\r\n\r\nexport default class Blinker {\r\n    updateGameContext: StateUpdateFunction;\r\n\r\n    constructor(updateGameContext: StateUpdateFunction) {\r\n        this.updateGameContext = updateGameContext;\r\n    }\r\n\r\n    startBlink = (selector: BlinkSelector, state: BusinessModel) => {\r\n        selector(state).blinkFor = 10;\r\n        state.game.registerBlink();\r\n        selector(state).unblink = () => this.stopBlink(selector);\r\n    };\r\n\r\n    stopBlink = (selector: BlinkSelector) =>\r\n        this.updateGameContext((state) => {\r\n            selector(state).blinkFor = 0;\r\n            state.game.registerBlink();\r\n        });\r\n}\r\n","import BusinessModel from \"./BusinessModel\";\r\nimport Stock from \"../Model/Game/Stock\";\r\nimport Tableau from \"../Model/Game/Tableau\";\r\n\r\nexport default class Dealer {\r\n    dealt: number;\r\n    dealingAt: number;\r\n    isDealt: boolean;\r\n\r\n    constructor() {\r\n        this.dealt = 0;\r\n        this.dealingAt = 0;\r\n        this.isDealt = false;\r\n    }\r\n\r\n    dealOne = (dealt: number, callback: any) => (state: BusinessModel) => {\r\n        if (dealt != state.dealer.dealt) {\r\n            return null;\r\n        }\r\n\r\n        state.dealer.deal(state.stock, state.tableau);\r\n        if (state.dealer.isDealt) {\r\n            state.game.started = Date.now();\r\n        }\r\n\r\n        if (state.dealer.isDealt) {\r\n            state.suggest();\r\n        } else {\r\n            callback(state.dealer.dealt);\r\n        }\r\n\r\n        return state;\r\n    };\r\n\r\n    dealAll = () => (state: BusinessModel) => {\r\n        if (this.dealt != state.dealer.dealt) {\r\n            return null;\r\n        }\r\n        while (!state.dealer.isDealt) {\r\n            state.dealer.deal(state.stock, state.tableau);\r\n        }\r\n        state.game.started = Date.now();\r\n        state.suggest();\r\n        return state;\r\n    };\r\n\r\n    deal = (stock: Stock, tableau: Tableau) => {\r\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\r\n            const stack = tableau.stacks[i].stack;\r\n            if (stack.length <= tableau.stacks.length - i - 1) {\r\n                const newCard = stock.stack.pop();\r\n                newCard.source = \"tableau-\" + i;\r\n                if (stack.length == tableau.stacks.length - 1 - i) {\r\n                    newCard.isHidden = false;\r\n                }\r\n                stack.push(newCard);\r\n                this.dealt++;\r\n                this.dealingAt++;\r\n                if (this.dealingAt == tableau.stacks.length) {\r\n                    this.dealingAt = 0;\r\n                }\r\n                this.isDealt = false;\r\n                return;\r\n            } else {\r\n                const isFirst = this.dealingAt == 0;\r\n                this.dealingAt = 0;\r\n                this.isDealt = isFirst;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.isDealt = true;\r\n    };\r\n}\r\n","import { ClickHandler, StateUpdateFunction } from \"../Common\";\r\n\r\nimport Card from \"../Model/Deck/Card\";\r\nimport Hand from \"../Model/Game/Hand\";\r\n\r\nexport default class Dispatcher {\r\n    clickHandler: ClickHandler;\r\n    updateGameContext: StateUpdateFunction;\r\n\r\n    constructor(clickHandler: ClickHandler, updateGameContext: StateUpdateFunction) {\r\n        this.clickHandler = clickHandler;\r\n        this.updateGameContext = updateGameContext;\r\n    }\r\n\r\n    getHandler = (hand: Hand) => {\r\n        if (hand && hand.isHoldingCard()) {\r\n            return this.dispatchPutDown;\r\n        } else {\r\n            return this.dispatchPickup;\r\n        }\r\n    };\r\n\r\n    dispatchPutDown = (card: Card, position: any, index: number) => {\r\n        this.updateGameContext((state) => {\r\n            if (state.hand.isHoldingCard()) {\r\n                this.clickHandler.dispatchPutDown(card, position, state, index);\r\n            }\r\n        });\r\n    };\r\n\r\n    dispatchPickup = (card: Card, position: any, index: number) => {\r\n        this.updateGameContext((state) => {\r\n            if (!state.hand.isHoldingCard()) {\r\n                this.clickHandler.dispatchPickup(card, position, state, index);\r\n            }\r\n        });\r\n    };\r\n}\r\n","import { BlinkFunction, ClickHandler } from \"../Common\";\r\n\r\nimport Blinker from \"./Blinker\";\r\nimport BusinessModel from \"./BusinessModel\";\r\nimport Card from \"../Model/Deck/Card\";\r\n\r\nexport default class Foundation implements ClickHandler {\r\n    blink: BlinkFunction;\r\n\r\n    constructor(blinker: Blinker) {\r\n        this.blink = (state, index) => blinker.startBlink((s: BusinessModel) => s.foundation.stacks[index], state);\r\n    }\r\n\r\n    dispatchPutDown = (card: Card, position: any, state: BusinessModel, index: number) => {\r\n        if (state.foundation.wouldAccept(index, state.hand)) {\r\n            const src = state.hand.source;\r\n            state.foundation.add(index, state.hand.putDown()) && state.game.registerMove(\"foundation-\" + index, src);\r\n            this.tryDetectEnd(state);\r\n        } else {\r\n            this.blink(state, index);\r\n        }\r\n    };\r\n\r\n    dispatchPickup = (_card: Card, position: any, state: BusinessModel, index: number) => {\r\n        const card = state.foundation.getTop(index);\r\n        if (card && state.foundation.getPreviousUsed(index) === card.face) {\r\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\r\n        } else {\r\n            this.blink(state, index);\r\n        }\r\n    };\r\n\r\n    //@todo move this to a generic place, also detect failure\r\n    tryDetectEnd(state: BusinessModel) {\r\n        const nrofCards = state.foundation.countCards();\r\n        if (nrofCards === 52) {\r\n            state.game.isEnded = true;\r\n            state.game.end = Date.now();\r\n        }\r\n    }\r\n}\r\n","export default class Card {\r\n    constructor(face, type, isHidden) {\r\n        this.face = face;\r\n        this.type = type;\r\n        this.isHidden = isHidden;\r\n        this.entropyStyle = {};\r\n        this.source = \"\";\r\n        //@todo why here? move to stacks\r\n        this.causeEntropy(1);\r\n    }\r\n\r\n    causeEntropy = (lvl) => {\r\n        const level = lvl * 2;\r\n        const random = () => Math.random() < 0.5;\r\n        const randomInt = (min, max) => Math.random() * (max - min) + min;\r\n        //shift\r\n        if (random()) {\r\n            if (random()) {\r\n                this.entropyStyle[\"left\"] = randomInt(0, level / 2);\r\n            } else {\r\n                this.entropyStyle[\"right\"] = randomInt(0, level / 2);\r\n            }\r\n        }\r\n        //rotate\r\n        this.entropyStyle[\"transform\"] = \"rotate(\" + randomInt(level * -1, level) + \"deg)\";\r\n    };\r\n\r\n    equals = (other) => {\r\n        return Card.equals(this, other);\r\n    };\r\n\r\n    static equals(card, otherCard) {\r\n        return (!card && !otherCard) || (card && otherCard && otherCard.face == card.face && otherCard.type.icon == card.type.icon);\r\n    }\r\n\r\n    static copy = (orig) => {\r\n        const copy = new Card(orig.face, orig.type, orig.isHidden);\r\n        copy.source = orig.source;\r\n        copy.entropyStyle = { ...orig.entropyStyle };\r\n        return copy;\r\n    };\r\n\r\n    static copyAll = (cards) => cards.map((card) => Card.copy(card));\r\n}\r\n","export const DeckSize = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"];\r\n\r\nexport const getFoundationOrder = () => {\r\n    return [\"A\", ...DeckSize.slice(0, DeckSize.length - 1)].reverse();\r\n};\r\n\r\nexport const getTableauOrder = () => {\r\n    return [...DeckSize];\r\n};\r\n","const Suits = {\r\n    heart: {\r\n        icon: \"♥\",\r\n        color: \"red\",\r\n    },\r\n    club: {\r\n        icon: \"♣\",\r\n        color: \"black\",\r\n    },\r\n    diamond: {\r\n        icon: \"♦\",\r\n        color: \"red\",\r\n    },\r\n    spade: {\r\n        icon: \"♠\",\r\n        color: \"black\",\r\n    },\r\n};\r\n\r\nexport default Suits;\r\n","import Card from \"./Card\";\r\nimport { DeckSize } from \"./DeckSize\";\r\nimport Suits from \"./Suits\";\r\n\r\nexport default class Deck {\r\n    constructor() {\r\n        const keys = Object.keys(Suits);\r\n        this.cards = DeckSize.map((deckSize) => [...keys.map((key) => new Card(deckSize, Suits[key], true))]).flat().reverse();\r\n    }\r\n\r\n    shuffle() {\r\n        this.shuffleArray(this.cards);\r\n        return this;\r\n    }\r\n\r\n    // credits: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n    shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    }\r\n}\r\n","import Card from \"../Deck/Card\";\r\nimport Suits from \"../Deck/Suits\";\r\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\r\n\r\nexport default class Foundation {\r\n    constructor(settings) {\r\n        this.settings = settings;\r\n        const template = () => ({\r\n            stack: [],\r\n            acceptedCards: [...getFoundationOrder()],\r\n            usedCards: [],\r\n            icon: null,\r\n            color: null,\r\n        });\r\n        const stacks = Object.keys(Suits)\r\n            .map((key) => Suits[key])\r\n            .map((suit) => ({ ...template(), ...suit }));\r\n        this.stacks = [...stacks];\r\n        // eslint-disable-next-line no-unused-vars\r\n        this.onClick = (a,b,c) => {}\r\n        this.blinkFor = 0;\r\n        this.unblink = () => {};\r\n    }\r\n\r\n    getStacks = () => {\r\n        return this.stacks;\r\n    }\r\n\r\n    getCurrentAccepted = (index) => {\r\n        const currentFoundation = this.stacks[index].acceptedCards;\r\n        return currentFoundation[currentFoundation.length - 1];\r\n    };\r\n\r\n    wouldAccept = (index, hand) => !hand.hasMoreThanOneCard() && this.accepts(index, hand.currentCard());\r\n\r\n    accepts = (index, card) => {\r\n        const currentAccepted = this.getCurrentAccepted(index);\r\n        return this.stacks[index].icon == card.type.icon && currentAccepted == card.face;\r\n    };\r\n\r\n    add = (index, cards) => {\r\n        const card = cards[0];\r\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\r\n        card.source = \"foundation-\" + index;\r\n        card.suggestion = false;\r\n        this.stacks[index].stack.push(card);\r\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\r\n    };\r\n\r\n    remove = (index, card) => {\r\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\r\n        return card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop();\r\n    };\r\n\r\n    getPreviousUsed = (index) => {\r\n        return [...this.stacks[index].usedCards].pop();\r\n    };\r\n\r\n    countCards = () => {\r\n        return this.stacks.map((f) => parseInt(f.stack.length)).reduce((a, b) => a + b, 0);\r\n    };\r\n\r\n    getTop(index) {\r\n        return this.stacks[index].stack[this.stacks[index].stack.length - 1];\r\n    }\r\n\r\n    static copy = (orig) => {\r\n        const copy = new Foundation(orig.settings);\r\n        copy.stacks = orig.stacks.map((origStack) => ({\r\n            stack: Card.copyAll(origStack.stack),\r\n            acceptedCards: [...origStack.acceptedCards],\r\n            usedCards: [...origStack.usedCards],\r\n            icon: origStack.icon,\r\n            color: origStack.color,\r\n        }));\r\n        return copy;\r\n    };\r\n\r\n    setEntropy = (lvl) => {\r\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\r\n        return this;\r\n    };\r\n}\r\n","export default class Rating {\r\n    constructor(settings) {\r\n        this.settings = settings;\r\n        this.points = 0;\r\n        this.multiplicator = 1;\r\n    }\r\n\r\n    registerMove = (target, source) => {\r\n        const currentMove = {\r\n            source: source,\r\n            target: target,\r\n        };\r\n        this.points += this.rateMove(currentMove);\r\n    };\r\n\r\n    registerRecycle = () => {\r\n        if (this.settings.launchSettings.drawMode == \"single\" && this.settings.launchSettings.recyclingMode == \"infinite\") {\r\n            if (this.points > 0) {\r\n                if (this.points < 100) {\r\n                    this.points = 0;\r\n                } else {\r\n                    this.points -= 100;\r\n                }\r\n            }\r\n            console.debug(\"RATING: subtract (max) 100 points for RECYCLE\");\r\n        }\r\n    };\r\n\r\n    registerUncover = () => {\r\n        this.points += 5;\r\n        console.debug(\"RATING: add 5 points for UNCOVER\");\r\n    };\r\n\r\n    registerBlink() {\r\n        //@todo support optionally penalizing invalid moves\r\n    }\r\n\r\n    penalize = (other) => {\r\n        const penalty = Math.pow(2, other.multiplicator);\r\n        console.debug(`RATING: applying penalty of ${penalty} points for UNDO`);\r\n        this.points = Math.min(this.points, other.points) - penalty;\r\n        this.multiplicator = other.multiplicator + 1;\r\n    };\r\n\r\n    rateMove(move) {\r\n        const isTableau = (obj) => obj.substr(0, 7) == \"tableau\";\r\n        const isFoundation = (obj) => obj.substr(0, 10) == \"foundation\";\r\n        if (isTableau(move.source)) {\r\n            if (isFoundation(move.target)) {\r\n                console.debug(\"RATING: add 10 points for MOVE tableau -> foundation\");\r\n                return 10;\r\n            }\r\n        } else if (move.source == \"waste\") {\r\n            if (isFoundation(move.target)) {\r\n                console.debug(\"RATING: add 10 points for MOVE waste -> foundation\");\r\n                return 10;\r\n            }\r\n            if (isTableau(move.target)) {\r\n                console.debug(\"RATING: add 5 points for MOVE waste -> tableau\");\r\n                return 5;\r\n            }\r\n        } else if (isFoundation(move.source)) {\r\n            if (isTableau(move.target)) {\r\n                console.debug(\"RATING: subtract 15 points for MOVE foundation -> tableau\");\r\n                return -15;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    static copy = (orig) => {\r\n        const copy = new Rating(orig.settings);\r\n        copy.points = orig.points;\r\n        copy.multiplicator = orig.multiplicator;\r\n        return copy;\r\n    };\r\n}\r\n","import Card from \"../Deck/Card\";\r\n\r\nexport default class TimeMachine {\r\n    constructor() {\r\n        this.previousStates = [];\r\n        this.memorable = true;\r\n        this.modified = false;\r\n    }\r\n\r\n    registerMove = (target, source) => {\r\n        this.memorable = true;\r\n        this.modified = true;\r\n\r\n        if (source == target) {\r\n            this.memorable = false;\r\n        }\r\n    };\r\n\r\n    pushPreviousState = (state) => {\r\n        const previous = this.previousStates[this.previousStates.length - 1];\r\n        if (!previous || !this.modelEquals(state, previous)) {\r\n            this.previousStates.push(state);\r\n        }\r\n    };\r\n\r\n    registerPickup = () => {\r\n        this.modified = true;\r\n        this.memorable = false;\r\n    };\r\n\r\n    popPreviousState = (id, current) => {\r\n        const isRequested = this.previousStates.length - 1 == id;\r\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\r\n        let previous = popPrevious();\r\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\r\n            previous = popPrevious();\r\n        }\r\n        return previous;\r\n    };\r\n\r\n    registerRecycle = () => {\r\n        this.memorable = true;\r\n        this.modified = true;\r\n    };\r\n\r\n    registerUncover = () => {\r\n        this.memorable = true;\r\n        this.modified = true;\r\n        return true;\r\n    };\r\n\r\n    registerBlink() {\r\n        this.modified = true;\r\n        this.memorable = false;\r\n    }\r\n\r\n    stackEquals = (a, b) => {\r\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden == b.stack[i].isHidden);\r\n    };\r\n\r\n    stacksEqual = (a, b) => {\r\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\r\n    };\r\n\r\n    modelEquals = (a, b) => {\r\n        return (\r\n            this.stackEquals(a.stock, b.stock) &&\r\n            this.stackEquals(a.waste, b.waste) &&\r\n            this.stacksEqual(a.tableau, b.tableau) &&\r\n            this.stacksEqual(a.foundation, b.foundation)\r\n        );\r\n    };\r\n\r\n    static copy = (orig) => {\r\n        const copy = new TimeMachine();\r\n        copy.previousStates = [...orig.previousStates];\r\n        copy.memorable = orig.memorable;\r\n        copy.modified = orig.modified;\r\n        return copy;\r\n    };\r\n}\r\n","import Rating from \"./Rating\";\r\nimport TimeMachine from \"./TimeMachine\";\r\n\r\nexport default class Game {\r\n    constructor(settings) {\r\n        this.rating = new Rating(settings);\r\n        this.timemachine = new TimeMachine();\r\n        this.started = 0;\r\n        this.isEnded = false;\r\n        this.end = 0;\r\n    }\r\n\r\n    registerMove = (target, source) => {\r\n        this.rating.registerMove(target, source);\r\n        this.timemachine.registerMove(target, source);\r\n        return true;\r\n    };\r\n\r\n    registerPickup = () => {\r\n        this.timemachine.registerPickup();\r\n        return true;\r\n    };\r\n\r\n    registerRecycle = () => {\r\n        this.rating.registerRecycle();\r\n        this.timemachine.registerRecycle();\r\n        return true;\r\n    };\r\n\r\n    registerUncover = () => {\r\n        this.rating.registerUncover();\r\n        this.timemachine.registerUncover();\r\n        return true;\r\n    };\r\n\r\n    registerBlink() {\r\n        this.rating.registerBlink();\r\n        this.timemachine.registerBlink();\r\n        return true;\r\n    }\r\n\r\n    static copy = (orig) => {\r\n        const copy = new Game(orig.settings);\r\n        copy.started = orig.started;\r\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\r\n        copy.rating = Rating.copy(orig.rating);\r\n        return copy;\r\n    };\r\n\r\n    getElapsed = () => {\r\n        const padleft = (i) => ((i + \"\").length == 1 ? \"0\" + i : i);\r\n        let msec = (this.end || Date.now()) - this.started;\r\n        const hh = Math.floor(msec / 1000 / 60 / 60);\r\n        msec -= hh * 1000 * 60 * 60;\r\n        const mm = Math.floor(msec / 1000 / 60);\r\n        msec -= mm * 1000 * 60;\r\n        const ss = Math.floor(msec / 1000);\r\n        msec -= ss * 1000;\r\n        return hh ? hh + \":\" + padleft(mm) + \":\" + padleft(ss) : padleft(mm) + \":\" + padleft(ss);\r\n    };\r\n}\r\n","import Card from \"../Deck/Card\";\r\n\r\nexport default class Hand {\r\n    constructor() {\r\n        this.stack = [];\r\n        this.source = null;\r\n        this.position = null;\r\n    }\r\n\r\n    pickUp = (stack, source, position) => {\r\n        if (stack && stack[0]) {\r\n            this.stack = stack.map((c) => {\r\n                c.suggestion = false;\r\n                return c;\r\n            });\r\n            this.source = source;\r\n            this.position = position;\r\n        }\r\n\r\n        return stack;\r\n    };\r\n\r\n    putDown = () => {\r\n        this.source = null;\r\n        return this.stack.splice(0, this.stack.length);\r\n    };\r\n\r\n    isHoldingCard = () => !!this.stack.length;\r\n\r\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard().face == 'K';\r\n\r\n    currentCard = () => this.isHoldingCard() && this.stack[0];\r\n\r\n    hasMoreThanOneCard = () => this.stack.length > 1;\r\n\r\n    isFromCurrentSource = (card) => this.source && card.source == this.source;\r\n\r\n    isFromWaste = () => this.source && this.source == \"waste\";\r\n\r\n    isFromFoundation = (index) => this.source && this.source == `foundation-${index}`\r\n\r\n    isFromTableau = (index) => this.source && this.source == `tableau-${index}`\r\n\r\n    isFromAnyTableau = () => this.source && this.source.substring(0,8) == \"tableau-\";\r\n\r\n    getTableauIndex = () => this.source && this.source.substring(8);\r\n\r\n    static copy = (orig) => {\r\n        const copy = new Hand();\r\n        copy.stack = Card.copyAll(orig.stack);\r\n        copy.source = orig.source;\r\n        copy.position = orig.position;\r\n        return copy;\r\n    };\r\n}\r\n","export default class Settings {\r\n    constructor(launchSettings) {\r\n        this.launchSettings = launchSettings;\r\n        const isTouch = this.is_touch_device();\r\n        this.mouseModes = [\"follow-cursor\", \"remain-on-stack\"];\r\n        this.mouseMode = isTouch ? \"remain-on-stack\" : \"follow-cursor\";\r\n\r\n        this.entropyLevels = [\"none\", \"low\", \"regular\", \"high\", \"extreme\"];\r\n        this.baseEntropy = isTouch ? 1 : 2;\r\n        this.interactionEntropy = isTouch ? 1 : 2;\r\n\r\n        this.suggestionModes = [\"none\", \"scored\", \"regular\", \"full\"];\r\n        this.suggestionMode = \"regular\";\r\n    }\r\n\r\n    is_touch_device() {\r\n        try {\r\n            const prefixes = \" -webkit- -moz- -o- -ms- \".split(\" \");\r\n\r\n            const mq = (query) => window.matchMedia(query).matches;\r\n\r\n            if (\"ontouchstart\" in window || (typeof window.DocumentTouch !== \"undefined\" && document instanceof window.DocumentTouch)) {\r\n                return true;\r\n            }\r\n\r\n            return mq([\"(\", prefixes.join(\"touch-enabled),(\"), \"heartz\", \")\"].join(\"\"));\r\n        } catch (e) {\r\n            console.error(\"(Touch detect failed)\", e);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static copy = (orig) => {\r\n        const copy = new Settings(orig.launchSettings);\r\n        copy.suggestionMode = orig.suggestionMode;\r\n        copy.mouseMode = orig.mouseMode;\r\n        copy.baseEntropy = orig.baseEntropy;\r\n        copy.interactionEntropy = orig.interactionEntropy;\r\n        return copy;\r\n    };\r\n}\r\n","import Card from \"../Deck/Card\";\r\n\r\nexport default class Stock {\r\n    constructor(stack, settings) {\r\n        this.settings = settings;\r\n        this.stack = stack.map(this.setCardProperties);\r\n        this.recyclings = 0;\r\n        this.passes = -1;\r\n        // eslint-disable-next-line no-unused-vars\r\n        this.onClick = (a, b, c) => {};\r\n        this.blinkFor = 0;\r\n        this.unblink = () => {};\r\n        if (this.settings.launchSettings.recyclingMode == \"1-pass\") {\r\n            this.passes = 1;\r\n        }\r\n        if (this.settings.launchSettings.recyclingMode == \"3-pass\") {\r\n            this.passes = 3;\r\n        }\r\n    }\r\n\r\n    canRecycle() {\r\n        return (\r\n            this.settings.launchSettings.recyclingMode == \"infinite\" ||\r\n            (this.settings.launchSettings.recyclingMode == \"3-pass\" && this.recyclings < 2)\r\n        );\r\n    }\r\n\r\n    recycle = (waste) => {\r\n        if (waste.length) {\r\n            this.stack = waste.reverse().map(this.setCardProperties);\r\n            this.recyclings++;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    setCardProperties = (card) => {\r\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\r\n        card.isHidden = true;\r\n        card.source = \"stock\";\r\n        return card;\r\n    };\r\n\r\n    isOnTop = (card) => card && card.equals(this.getTop());\r\n\r\n    getTop = () => this.stack[this.stack.length - 1];\r\n\r\n    popTop = () => {\r\n        let result = [];\r\n        if (this.settings.launchSettings.drawMode == \"single\") {\r\n            result = [this.stack.pop()];\r\n        }\r\n        if (this.settings.launchSettings.drawMode == \"triple\") {\r\n            result = this.stack.splice(this.stack.length - 3);\r\n        }\r\n        if (this.stack.length == 0) {\r\n            this.passes--;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    static copy = (orig) => {\r\n        const copy = new Stock([], orig.settings);\r\n        copy.stack = Card.copyAll(orig.stack);\r\n        copy.dealt = orig.dealt;\r\n        copy.dealingAt = orig.dealingAt;\r\n        copy.isDealt = orig.isDealt;\r\n        copy.passes = orig.passes;\r\n        copy.recyclings = orig.recyclings;\r\n        return copy;\r\n    };\r\n\r\n    setEntropy = (lvl) => {\r\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\r\n        return this;\r\n    };\r\n}\r\n","import Card from \"../Deck/Card\";\r\nimport Hand from \"./Hand\";\r\nimport Settings from \"./Settings\";\r\nimport { getTableauOrder } from \"../Deck/DeckSize\";\r\n\r\nexport default class Tableau {\r\n    stacks: { stack: Card[]; id: number }[];\r\n    settings: Settings;\r\n    onClick: (a: any, b: any, c: any) => void;\r\n    blinkFor: number;\r\n    unblink: () => void;\r\n    \r\n    constructor(settings: Settings) {\r\n        const ids = [0, 1, 2, 3, 4, 5, 6];\r\n        this.stacks = ids.map((id) => ({\r\n            stack: [],\r\n            id,\r\n        }));\r\n        this.settings = settings;\r\n        this.onClick = () => {};\r\n        this.blinkFor = 0;\r\n        this.unblink = () => {};\r\n    }\r\n\r\n    getStack = (index: number) => {\r\n        return this.stacks[index];\r\n    };\r\n\r\n    wouldAccept = (index: number, hand: Hand) => this.canPutDown(this.getTop(index), hand, index);\r\n\r\n    canPutDown = (card: Card, hand: Hand, index: number) =>\r\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\r\n        this.accepts(index, hand.currentCard()) ||\r\n        (!card && hand.isFromTableau(index));\r\n\r\n    accepts = (index: number, current: Card) => {\r\n        const top = this.getTop(index);\r\n        if (!top) {\r\n            return current && current.face === \"K\";\r\n        }\r\n        if (top.isHidden) {\r\n            return false;\r\n        }\r\n        const range = [...getTableauOrder()];\r\n        const currentIndex = range.indexOf(current.face);\r\n        const topIndex = range.indexOf(top.face);\r\n        return currentIndex + 1 == topIndex && current.type.color !== top.type.color && top.face !== \"A\";\r\n    };\r\n\r\n    getCard = (index: number, card: Card) => {\r\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\r\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\r\n                return this.stacks[index].stack[j];\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    popWithFollowing = (card: Card, i: number) => {\r\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\r\n            if (card && card.equals(this.stacks[i].stack[j])) {\r\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\r\n                this.stackEntropy(i);\r\n                return result;\r\n            }\r\n        }\r\n\r\n        return [];\r\n    };\r\n\r\n    uncover = (index: number, card: Card) => {\r\n        const top = this.getTop(index);\r\n        if (top.isHidden && card && card.equals(this.getTop(index))) {\r\n            top.isHidden = false;\r\n            this.stackEntropy(index);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    stackEntropy = (index: number) => {\r\n        let entropy = this.settings.interactionEntropy;\r\n        let next = 1;\r\n        let top = this.getTop(index);\r\n        while (entropy && entropy != 0 && top) {\r\n            top.causeEntropy(entropy);\r\n            entropy--;\r\n            top = this.getTop(index, next);\r\n            next++;\r\n        }\r\n    };\r\n\r\n    add = (index: number, cards: Card[]) => {\r\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\r\n        this.stackEntropy(index);\r\n        return cards;\r\n    };\r\n\r\n    setCardProperties = (card: Card, index: number) => {\r\n        card.source = \"tableau-\" + index;\r\n        return card;\r\n    };\r\n\r\n    getTop = (index: number, offset?: number) => {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        return this.stacks[index].stack[this.stacks[index].stack.length - 1 - offset];\r\n    };\r\n\r\n    static copy = (orig: Tableau) => {\r\n        const copy = new Tableau(orig.settings);\r\n        copy.stacks = orig.stacks.map((stack, index) => ({ id: index, stack: Card.copyAll(stack.stack) }));\r\n        return copy;\r\n    };\r\n\r\n    setEntropy = (lvl: number) => {\r\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\r\n        return this;\r\n    };\r\n}\r\n","import Card from \"../Deck/Card\";\r\n\r\nexport default class Waste {\r\n    constructor(settings) {\r\n        this.settings = settings;\r\n        this.stack = [];\r\n        // eslint-disable-next-line no-unused-vars\r\n        this.onClick = (_a, _b, _c) => {};\r\n        this.blinkFor = 0;\r\n        this.unblink = () => {};\r\n    }\r\n\r\n    tryPutDown = (card) => this.canAdd(card) && (this.add(card) || true);\r\n\r\n    add = (card) => card && this.stack.push(this.setCardProperties(card));\r\n\r\n    addAll = (cards) => cards && cards.length && cards.map(this.add);\r\n\r\n    setCardProperties = (card) => {\r\n        card.source = \"waste\";\r\n        card.isHidden = false;\r\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\r\n        return card;\r\n    };\r\n\r\n    wouldAccept = (hand) => hand.isFromWaste() && this.canAdd(hand.currentCard());\r\n\r\n    canAdd = (card) => card && (!this.getTop() || !card.equals(this.getTop()));\r\n\r\n    popTop = (card) => card && card.equals(this.getTop()) && this.stack.pop();\r\n\r\n    recycle = () => this.stack.splice(0, this.stack.length);\r\n\r\n    getTop = () => this.stack[this.stack.length - 1];\r\n\r\n    static copy = (orig) => {\r\n        const copy = new Waste(orig.settings);\r\n        copy.stack = Card.copyAll(orig.stack);\r\n        return copy;\r\n    };\r\n\r\n    setEntropy = (lvl) => {\r\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\r\n        return this;\r\n    };\r\n}\r\n","import { AppState } from \"../Common\";\r\nimport Deck from \"./Deck/Deck\";\r\nimport Foundation from \"./Game/Foundation\";\r\nimport Game from \"./Game/Game\";\r\nimport Hand from \"./Game/Hand\";\r\nimport Settings from \"./Game/Settings\";\r\nimport Stock from \"./Game/Stock\";\r\nimport Tableau from \"./Game/Tableau\";\r\nimport Waste from \"./Game/Waste\";\r\n\r\nexport default class Model {\r\n    stock: Stock;\r\n    waste: Waste;\r\n    foundation: Foundation;\r\n    tableau: Tableau;\r\n    hand: Hand;\r\n    game: Game;\r\n    settings: Settings;\r\n\r\n    constructor(obj: any) {\r\n        this.stock = obj.stock;\r\n        this.waste = obj.waste;\r\n        this.foundation = obj.foundation;\r\n        this.tableau = obj.tableau;\r\n        this.hand = obj.hand;\r\n        this.game = obj.game;\r\n        this.settings = obj.settings;\r\n    }\r\n\r\n    static getInitialState = (launchSettings: AppState) => {\r\n        const deck = new Deck().shuffle();\r\n        const settings = new Settings(launchSettings);\r\n        const state = {\r\n            stock: new Stock([...deck.cards], settings),\r\n            waste: new Waste(settings),\r\n            foundation: new Foundation(settings),\r\n            tableau: new Tableau(settings),\r\n            hand: new Hand(),\r\n            game: new Game(settings),\r\n            settings: settings,\r\n        };\r\n        return state;\r\n    };\r\n\r\n    static copy = (state: Model) => {\r\n        return {\r\n            stock: Stock.copy(state.stock),\r\n            waste: Waste.copy(state.waste),\r\n            foundation: Foundation.copy(state.foundation),\r\n            tableau: Tableau.copy(state.tableau),\r\n            hand: Hand.copy(state.hand),\r\n            game: Game.copy(state.game),\r\n            settings: Settings.copy(state.settings),\r\n        };\r\n    };\r\n}\r\n","import { BlinkFunction, ClickHandler } from \"../Common\";\r\n\r\nimport Blinker from \"./Blinker\";\r\nimport BusinessModel from \"./BusinessModel\";\r\nimport Card from \"../Model/Deck/Card\";\r\n\r\nexport default class Stock implements ClickHandler {\r\n    blink: BlinkFunction;\r\n\r\n    constructor(blinker: Blinker) {\r\n        this.blink = (state: BusinessModel) => blinker.startBlink((s: BusinessModel) => s.stock, state);\r\n    }\r\n\r\n    dispatchPutDown = (card: Card, position: any, state: BusinessModel) => this.blink(state, 0);\r\n\r\n    dispatchPickup = (card: Card, position: any, state: BusinessModel) =>\r\n        card != null ? this.moveToWaste(card, state) : this.recycleWaste(card, state);\r\n\r\n    moveToWaste = (card: Card, state: BusinessModel) =>\r\n        state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\");\r\n\r\n    recycleWaste = (_card: Card, state: BusinessModel) =>\r\n        (!state.stock.getTop() &&\r\n            !!state.waste.getTop() &&\r\n            state.stock.canRecycle() &&\r\n            state.stock.recycle(state.waste.recycle()) &&\r\n            state.game.registerRecycle()) ||\r\n        this.blink(state, 0);\r\n}\r\n","import { BlinkFunction, ClickHandler } from \"../Common\";\r\n\r\nimport Blinker from \"./Blinker\";\r\nimport BusinessModel from \"./BusinessModel\";\r\nimport Card from \"../Model/Deck/Card\";\r\n\r\nexport default class Tableau implements ClickHandler {\r\n    blink: BlinkFunction;\r\n\r\n    constructor(blinker: Blinker) {\r\n        this.blink = (state, index) => blinker.startBlink((s: BusinessModel) => s.tableau.stacks[index], state);\r\n    }\r\n\r\n    dispatchPutDown = (card: Card, position: any, state: BusinessModel, index: number) => {\r\n        if (state.tableau.wouldAccept(index, state.hand)) {\r\n            const src = state.hand.source;\r\n            state.tableau.add(index, state.hand.putDown()) && state.game.registerMove(\"tableau-\" + index, src);\r\n        } else {\r\n            this.blink(state, index);\r\n        }\r\n    };\r\n\r\n    dispatchPickup = (card: Card, position: any, state: BusinessModel, index: number) => {\r\n        if (card && !this.tryUncover(card, index, state) && !card.isHidden) {\r\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\r\n        } else if (!card) {\r\n            this.blink(state, index);\r\n        }\r\n    };\r\n\r\n    tryUncover = (card: Card, index: number, state: BusinessModel) =>\r\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover();\r\n}\r\n","import { BlinkFunction, ClickHandler } from \"../Common\";\r\n\r\nimport Blinker from \"./Blinker\";\r\nimport BusinessModel from \"./BusinessModel\";\r\nimport Card from \"../Model/Deck/Card\";\r\n\r\nexport default class Waste implements ClickHandler {\r\n    blink: BlinkFunction;\r\n\r\n    constructor(blinker: Blinker) {\r\n        this.blink = (state: BusinessModel) => blinker.startBlink((s: BusinessModel) => s.waste, state);\r\n    }\r\n\r\n    dispatchPutDown = (card: Card, position: any, state: BusinessModel) =>\r\n        (state.waste.wouldAccept(state.hand) &&\r\n            state.waste.tryPutDown(state.hand.currentCard()) &&\r\n            state.hand.putDown() &&\r\n            state.game.registerMove(\"waste\", \"waste\")) ||\r\n        this.blink(state, 0);\r\n\r\n    dispatchPickup = (card: Card, position: any, state: BusinessModel) =>\r\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\r\n}\r\n","import BusinessModel from \"./BusinessModel\";\r\nimport Tableau from \"./Tableau\";\r\nimport Waste from \"./Waste\";\r\n\r\nexport default class Suggestions {\r\n    constructor() {\r\n        const nullBlinker = { startBlink: () => {} };\r\n        this.tableau = new Tableau(nullBlinker);\r\n        this.waste = new Waste(nullBlinker);\r\n    }\r\n\r\n    evaluateOptions = (state) => {\r\n        this.disableAllSuggestions(state);\r\n\r\n        if (state.settings.suggestionMode !== \"none\") {\r\n            const foundUncoverOptions = this.getUncoverOptions(state);\r\n\r\n            if (!foundUncoverOptions) {\r\n                const foundAcceptedPutdown = this.getPutdownSuggestions(state);\r\n\r\n                if (!foundAcceptedPutdown && !state.hand.isHoldingCard()) {\r\n                    const foundAny = this.getPickupOptions(state);\r\n\r\n                    if (!foundAny || state.settings.suggestionMode == \"full\") {\r\n                        // @todo only highlight if it's not empty or there are recyclings left\r\n                        state.stock.suggestion = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    getPutdownSuggestions = (state, onlyUseful) => {\r\n        const accepted = [];\r\n        if (state.settings.suggestionMode !== \"none\" && state.hand.isHoldingCard() && state.waste.wouldAccept(state.hand)) {\r\n            if (state.settings.suggestionMode === \"full\" || !state.hand.isFromWaste()) {\r\n                const move = { target: \"waste\", source: state.hand.source };\r\n                if (state.settings.suggestionMode !== \"scored\" || state.game.rateMove(move) > 0) {\r\n                    accepted.push(move);\r\n                    state.waste.suggestion = true;\r\n                }\r\n            }\r\n        }\r\n        state.foundation.stacks.forEach((stack, index) => {\r\n            if (state.settings.suggestionMode !== \"none\" && state.hand.isHoldingCard() && state.foundation.wouldAccept(index, state.hand)) {\r\n                if (state.settings.suggestionMode === \"full\" || !state.hand.isFromFoundation(index)) {\r\n                    const move = { target: \"foundation-\" + index, source: state.hand.source };\r\n                    if (state.settings.suggestionMode !== \"scored\" || state.game.rateMove(move) > 0) {\r\n                        accepted.push(move);\r\n                        stack.suggestion = true;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        state.tableau.stacks.forEach((stack, index) => {\r\n            if (state.settings.suggestionMode != \"none\" && state.hand.isHoldingCard() && state.tableau.wouldAccept(index, state.hand)) {\r\n                if (state.settings.suggestionMode === \"full\" || !state.hand.isFromTableau(index)) {\r\n                    if (\r\n                        !onlyUseful ||\r\n                        state.settings.suggestionMode === \"full\" ||\r\n                        // filter out moves of King from empty slot to empty slot\r\n                        (!(\r\n                            state.hand.isHoldingKing() &&\r\n                            stack.stack.length == 0 &&\r\n                            state.hand.isFromAnyTableau() &&\r\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack.length == 0\r\n                        ) &&\r\n                            // filter out moves between stacks if same (non-hidden) parent card\r\n                            !(\r\n                                stack.stack.length > 0 &&\r\n                                state.hand.isFromAnyTableau() &&\r\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\r\n                                stack.stack[stack.stack.length - 1].face ==\r\n                                    state.tableau.stacks[state.hand.getTableauIndex()].stack[\r\n                                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\r\n                                    ].face &&\r\n                                !state.tableau.getTop(state.hand.getTableauIndex()).isHidden\r\n                            ))\r\n                    ) {\r\n                        const move = { target: \"tableau-\" + index, source: state.hand.source };\r\n                        if (state.settings.suggestionMode !== \"scored\" || state.game.rateMove(move) > 0) {\r\n                            accepted.push(move);\r\n                            stack.suggestion = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return accepted.length;\r\n    };\r\n\r\n    getPickupOptions = (state) => {\r\n        let foundAny = false;\r\n        const wasteState = BusinessModel.copy(state);\r\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\r\n        if (wasteState.game.timemachine.modified) {\r\n            const foundWasteSuggestions = this.getPutdownSuggestions(wasteState, true);\r\n            if (foundWasteSuggestions > (state.settings.suggestionMode == \"full\" ? 1 : 0)) {\r\n                state.waste.suggestion = true;\r\n                foundAny = true;\r\n            }\r\n        }\r\n\r\n        state.tableau.stacks.forEach((tableau, index) => {\r\n            tableau.stack.forEach((card, cardIndex) => {\r\n                if (!card.isHidden) {\r\n                    const tableauState = BusinessModel.copy(state);\r\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\r\n                    if (tableauState.game.timemachine.modified) {\r\n                        const foundTableauSuggestions = this.getPutdownSuggestions(tableauState, true);\r\n                        if (foundTableauSuggestions > (state.settings.suggestionMode == \"full\" ? 1 : 0)) {\r\n                            tableau.stack[cardIndex].suggestion = true;\r\n                            foundAny = true;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        return foundAny;\r\n    };\r\n\r\n    getUncoverOptions = (state) => {\r\n        const options = [];\r\n        if (!state.hand.isHoldingCard()) {\r\n            state.tableau.stacks.forEach((stack, stackindex) => {\r\n                const top = state.tableau.getTop(stackindex);\r\n                if (top && top.isHidden) {\r\n                    top.suggestion = true;\r\n                    options.push(\"tableau-\" + stackindex);\r\n                }\r\n            });\r\n        }\r\n\r\n        return options.length;\r\n    };\r\n\r\n    disableAllSuggestions = (state) => {\r\n        const disableSuggestion = (obj) => {\r\n            obj.suggestion = false;\r\n            obj.stack && obj.stack.forEach(disableSuggestion);\r\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\r\n        };\r\n\r\n        disableSuggestion(state.waste);\r\n        disableSuggestion(state.stock);\r\n        disableSuggestion(state.tableau);\r\n        disableSuggestion(state.foundation);\r\n    };\r\n}\r\n","import { AppState, StateUpdateFunction } from \"../Common\";\r\n\r\nimport Blinker from \"./Blinker\";\r\nimport { ClickHandler } from \"../Common\";\r\nimport Dealer from \"./Dealer\";\r\nimport Dispatcher from \"./Dispatcher\";\r\nimport Foundation from \"./Foundation\";\r\nimport Model from \"../Model/Model\";\r\nimport Stock from \"./Stock\";\r\nimport Suggestions from \"./Suggestions\";\r\nimport Tableau from \"./Tableau\";\r\nimport Waste from \"./Waste\";\r\n\r\nexport default class BusinessModel extends Model {\r\n    suggestor: Suggestions;\r\n    dealer: Dealer;\r\n\r\n    constructor(obj: any) {\r\n        super(obj);\r\n        this.suggestor = new Suggestions();\r\n        this.dealer = new Dealer();\r\n    }\r\n\r\n    suggest = () => this.suggestor.evaluateOptions(this);\r\n\r\n    setEntropy = (lvl: number) => {\r\n        this.settings.baseEntropy = lvl;\r\n        this.stock.setEntropy(lvl);\r\n        this.waste.setEntropy(lvl);\r\n        this.foundation.setEntropy(lvl);\r\n        this.tableau.setEntropy(lvl);\r\n    };\r\n\r\n    assignHandlers = (updateGameContext: StateUpdateFunction) => {\r\n        const blinker = new Blinker(updateGameContext);\r\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler, updateGameContext).getHandler(this.hand);\r\n        this.stock.onClick = getHandler(new Stock(blinker));\r\n        this.waste.onClick = getHandler(new Waste(blinker));\r\n        this.foundation.onClick = getHandler(new Foundation(blinker));\r\n        this.tableau.onClick = getHandler(new Tableau(blinker));\r\n    };\r\n\r\n    static getInitialState = (launchSettings: AppState) => {\r\n        return new BusinessModel(Model.getInitialState(launchSettings));\r\n    };\r\n\r\n    static copy = (state: Model) => {\r\n        return new BusinessModel(Model.copy(state));\r\n    };\r\n}\r\n","import { AppState, StateReplacer, StateUpdater } from \"../../Common\";\r\n\r\nimport Board from \"./Board\";\r\nimport BusinessModel from \"../../Business/BusinessModel\";\r\nimport { Provider } from \"../Context\";\r\nimport React from \"react\";\r\n\r\ninterface BoardWrapProps {\r\n    settings: AppState;\r\n    restart: () => void;\r\n}\r\n\r\nexport default class BoardWrap extends React.Component<BoardWrapProps, BusinessModel> {\r\n    constructor(props: BoardWrapProps) {\r\n        super(props);\r\n        this.state = BusinessModel.getInitialState(props.settings);\r\n    }\r\n\r\n    replaceContext = (a: StateReplacer, b?: any) => this.setState(a, b);\r\n\r\n    updateContext = (modifier: StateUpdater) =>\r\n        this.replaceContext((state) => {\r\n            modifier(state);\r\n            return state;\r\n        });\r\n\r\n    updateGameContext = (modifier: StateUpdater, callback?: any) =>\r\n        this.replaceContext((state) => {\r\n            state.game.timemachine.modified = false;\r\n            const previous = BusinessModel.copy(state);\r\n            modifier(state);\r\n            if (state.game.timemachine.modified) {\r\n                state.game.timemachine.pushPreviousState(previous);\r\n                state.suggest();\r\n                return state;\r\n            }\r\n\r\n            return null;\r\n        }, callback);\r\n\r\n    render = () => {\r\n        this.state.assignHandlers(this.updateGameContext);\r\n        //this.state.suggest(); @todo this will work once hints are implemented differently\r\n        const context = {\r\n            state: this.state,\r\n            replaceContext: this.replaceContext,\r\n            updateContext: this.updateContext,\r\n            restart: this.props.restart,\r\n        };\r\n        return (\r\n            <Provider value={context}>\r\n                <Board />\r\n            </Provider>\r\n        );\r\n    };\r\n}\r\n","import \"../Style/Screens.css\";\r\n\r\nimport React from \"react\";\r\n\r\nconst StartScreen = (props) => {\r\n    //@todo add selector for timed game\r\n    //@todo add selectors for different rating strategies (undo, hint, blink)\r\n    //@todo add and implement custom start button + selectors for draw mode & recycling options\r\n    //@todo add selector for quick dealing\r\n    return !props || !props.start ? null : (\r\n        <div>\r\n            <div className=\"quickstart\">\r\n                <div>\r\n                    <div className=\"title\">Quickstart</div>\r\n                    <div className=\"left\">\r\n                        <button onClick={() => props.start({ drawMode: \"single\", recyclingMode: \"infinite\" })}>\r\n                            🐭\r\n                            <div>Turn 1 card at once.</div>\r\n                            <div>No limit on passes</div>\r\n                            <div>through the deck.</div>\r\n                        </button>\r\n                        <button onClick={() => props.start({ drawMode: \"single\", recyclingMode: \"3-pass\" })}>\r\n                            🐹\r\n                            <div>Turn 1 card at once.</div>\r\n                            <div>Three passes</div>\r\n                            <div>through the deck.</div>\r\n                        </button>\r\n                        <button onClick={() => props.start({ drawMode: \"single\", recyclingMode: \"1-pass\" })}>\r\n                            🐰\r\n                            <div>Turn 1 card at once.</div>\r\n                            <div>Only a single pass</div>\r\n                            <div>through the deck.</div>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        <button onClick={() => props.start({ drawMode: \"triple\", recyclingMode: \"infinite\" })}>\r\n                            🐨\r\n                            <div>Turn 3 cards at once.</div>\r\n                            <div>No limit on passes</div>\r\n                            <div>through the deck.</div>\r\n                        </button>\r\n                        <button onClick={() => props.start({ drawMode: \"triple\", recyclingMode: \"3-pass\" })}>\r\n                            🐼\r\n                            <div>Turn 3 cards at once.</div>\r\n                            <div>Three passes</div>\r\n                            <div>through the deck.</div>\r\n                        </button>\r\n                        <button onClick={() => props.start({ drawMode: \"triple\", recyclingMode: \"1-pass\" })}>\r\n                            🐻\r\n                            <div>Turn 3 cards at once.</div>\r\n                            <div>Only a single pass</div>\r\n                            <div>through the deck.</div>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartScreen;\r\n","import \"./View/Style/App.css\";\r\n\r\nimport {AppState} from \"./Common\";\r\nimport BoardWrap from \"./View/Game/BoardWrap\";\r\nimport React from \"react\";\r\nimport StartScreen from \"./View/UI/StartScreen\";\r\n\r\nconst App = () => {\r\n    const defaultState = { initialized: false, drawMode: \"\", recyclingMode: \"\" };\r\n    const [appState, setAppState] = React.useState(defaultState);\r\n    const start = (settings: AppState) =>\r\n        setAppState({\r\n            ...settings,\r\n            initialized: true,\r\n        });\r\n    const restart = () => setAppState(defaultState);\r\n    return !appState.initialized ? <StartScreen start={start} /> : <BoardWrap settings={appState} restart={restart} />;\r\n};\r\n\r\nexport default App;\r\n","import App from \"./App\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}