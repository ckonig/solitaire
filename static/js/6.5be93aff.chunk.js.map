{"version":3,"sources":["View/Game/Navigation/BoardGamePad.tsx","View/Game/Navigation/BoardKeyboard.tsx","View/Game/Navigation/BoardNavigator.tsx","View/Game/Dealer.tsx","View/Game/StackDescription.ts","View/Game/Card.tsx","View/Game/StackBase.tsx","View/Game/useBlinkEffect.ts","View/Game/Foundation.tsx","View/UI/Header/Clock.tsx","View/UI/Header/Hearts.tsx","View/UI/Header/Hint.tsx","View/UI/Header/Points.tsx","View/UI/Header/ToggleMenu.tsx","View/UI/Header/Undo.tsx","View/UI/Header/Header.tsx","View/UI/Menu.tsx","View/Game/usePrevious.ts","View/Game/Stock.tsx","View/Game/Tableau.tsx","View/Game/Waste.tsx","View/Game/Board.tsx","View/UI/EndScreen.js","Model/Business/Blinker.ts","Model/Business/Tableau.ts","Model/Business/Dealer.ts","Model/Business/Dispatcher.ts","Model/Game/Focus.ts","Model/Game/BasicStack.ts","Model/Game/HandHoldingStack.ts","Model/Game/Foundation.ts","Model/Business/Foundation.ts","Model/Game/Rating.ts","Model/Game/TimeMachine.ts","Model/Game/Game.ts","Model/Game/Hand.ts","Model/Business/Navigator.ts","Model/Game/Settings.ts","Model/Game/Stock.ts","Model/Business/Stock.ts","Model/Business/Waste.ts","Model/Business/Suggestions.ts","Model/Game/Tableau.ts","Model/Game/Waste.ts","Model/Model.ts","View/Game/BoardWrap.tsx"],"names":["BoardGamePad","props","state","React","useContext","GlobalContext","player","BoardContext","isGamePadDriven","settings","launchSettings","inputMode","isSinglePlayer","boardMode","GameModes","SINGLEPLAYER","switchToGamePad","ctx","focus","isKeyBoard","GamePad","gamepadIndex","players","inputLayout","onLeft","onRight","onUp","onDown","onAction","onCancel","onHint","onUndo","onPause","onMenu","BoardKeyboard","isKeyboardDriven","layout","Universal","getKeyboardLayout","switchToKeyboard","Keyboard","BoardNavigator","updateContext","updateGameContext","replaceContext","paused","PauseContext","before","x","navigator","currentIndex","y","z","isPaused","handlers","modifier","moveLeft","moveRight","moveUp","moveDown","handler","pressCurrent","hand","stack","length","onClick","isKeyboard","togglePause","suggestionMode","supportsHints","isTemporary","isVisible","isDisabled","enableHint","_state","previous","game","timemachine","popPreviousState","previousStates","rating","penalize","Dealer","timeouts","quickDeal","dealer","isDealt","dealAll","deal","dealt","push","setTimeout","dealOne","useEffect","forEach","timeout","clearTimeout","getStackLabel","source","names","map","id","label","split","parseInt","Card","pause","inputEl","useRef","isFocused","hasCard","model","useDrag","item","type","text","begin","monitor","console","log","context","dragRef","current","card","isHidden","icon","face","style","pointerEvents","className","onFocus","onBlur","zIndex","offsetTop","top","entropyStyle","offsetLeft","left","getCardStyle","ref","canClick","hasSuggestion","isSuggested","suggestion","isSelected","blink","getClassName","e","preventDefault","clientX","clientY","ele","target","includes","offsetParent","rect","getBoundingClientRect","position","click","ownerDocument","defaultView","pageXOffset","pageYOffset","element","disabled","tabIndex","aria-label","title","StackBase","classname","hasStack","blinkFor","clickEmpty","children","useBlinkEffect","selector","unblink","FoundationStacks","foundation","stacks","index","Foundation","useDrop","accept","drop","cards","Clock","getElapsed","useState","elapsed","setElapsed","interval","setInterval","started","clearInterval","Hearts","recyclingMode","stock","passes","createString","Array","from","keys","join","getHearts","Hint","Points","points","ToggleMenu","Undo","Math","pow","multiplicator","Header","mode","Menu","restart","NavigationContext","navigation","setNavigation","switchToMenu","menu","pos","screeen","mainMenu","showMenu","remaining","allowed","pauses","announcement","keyboardLayout","pausedBy","MenuTitle","MenuTree","MenuButton","sm","SuggestionModes","next","key","setSuggestionMode","val","toggleMainMenu","toggled","EntropyLevels","baseEntropy","lvl","setEntropy","interactionEntropy","skip","_Menu","screen","navigationContext","value","usePrevious","Renderer","speed","waste","isFromWaste","putDownHand","addAll","popTop","canRecycle","recycle","Stock","TableauStacks","tableau","parent","Tableau","s","getOffset","i","Waste","drawMode","isHoldingCard","additionalOffset","Board","DndProvider","backend","TouchDetector","TouchBackend","HTML5Backend","EndScreen","isEnded","getTimePenalty","end","Date","now","getBonusPoints","getTotal","Blinker","startBlink","registerBlink","stopBlink","dispatchPutDown","wouldAcceptHand","src","registerMove","dispatchPickup","pickUp","popWithFollowing","registerPickup","TableauHidden","tryUncover","uncover","registerUncover","dealingAt","callback","newCard","popOne","isFirst","this","Dispatcher","clickHandler","getHandler","Focus","keyboard","validSettings","setCard","unsetCard","equals","unsetStack","setStack","BasicStack","getTop","getClickable","filter","HandHoldingStack","getHandContent","FoundationStack","setOnClick","acceptedCards","usedCards","color","p","sindex","getCurrentAccepted","currentFoundation","hasMoreThanOneCard","accepts","currentCard","add","putDown","currentAccepted","causeEntropy","min","pop","remove","getPreviousUsed","countCards","f","reduce","a","b","Object","Suits","suit","getFoundationOrder","template","copy","orig","origStack","copyAll","tryDetectEnd","_card","Rating","registerHint","disableHint","currentMove","rateMove","registerRecycle","debug","other","undoPenalty","penalty","done","hintPenalty","start","secondsToFinish","trunc","round","on","missPenalty","move","isTableau","obj","substr","isFoundation","TimeMachine","memorable","modified","pushPreviousState","modelEquals","isRequested","popPrevious","stackEquals","every","stacksEqual","Game","Hand","c","splice","_onClick","isHoldingKing","isFromCurrentSource","isFromFoundation","isFromTableau","isFromAnyTableau","substring","getTableauIndex","Navigator","rows","getZindex","elem","targets","update","row","j","finishNav","valid","direction","undefined","clickable","toggleRow","pickLast","last","Settings","suggestionModes","get","getHintMode","allSuggestionModes","recyclings","reverse","setCardProperties","isOnTop","result","_position","moveToWaste","recycleWaste","Suggestions","evaluateOptions","disableAllSuggestions","NONE","getUncoverOptions","getPutdownSuggestions","getPickupOptions","FULL","SCORED","onlyUseful","accepted","isMoveOfKingBetweenEmptySlots","isMoveBetweenSimilarParentCards","isNotLoop","foundAny","wasteState","Model","cardIndex","tableauState","filtered","_stack","disableSuggestion","TableauStack","onClickhidden","canUncover","getStack","canPutDown","range","getTableauOrder","indexOf","getCard","stackEntropy","entropy","concat","offset","canAdd","suggestor","withSuggestions","withHandlers","StockHandler","WasteHandler","FoundationHandler","TableauHandler","getInitialState","deck","createContext","BoardProvider","Provider","BoardWrap","setState","render","Component"],"mappings":"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","file":"static/js/6.5be93aff.chunk.js","sourcesContent":["import { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GamePad from \"../../../common/GamePad\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardGamePad = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isGamePadDriven = state.settings.launchSettings.inputMode == \"gamepad\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n\n    const switchToGamePad = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"gamepad\";\n        }\n    };\n\n    return isSinglePlayer || isGamePadDriven ? (\n        <GamePad\n            gamepadIndex={state.settings.launchSettings.players[player].inputLayout}\n            onLeft={() => props.onLeft(switchToGamePad)}\n            onRight={() => props.onRight(switchToGamePad)}\n            onUp={() => props.onUp(switchToGamePad)}\n            onDown={() => props.onDown(switchToGamePad)}\n            onAction={() => props.onAction(switchToGamePad)}\n            onCancel={() => props.onCancel(switchToGamePad)}\n            onHint={() => props.onHint(switchToGamePad)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToGamePad)}\n            onMenu={() => props.onMenu(switchToGamePad)}\n        />\n    ) : null;\n};\n\nexport default BoardGamePad;\n","import { Universal, getKeyboardLayout } from \"../../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../BoardWrap\";\nimport { CustomInputProps } from \"./CustomInputProps\";\nimport GameModes from \"../../../GameModes\";\nimport GlobalContext from \"../../Context\";\nimport Keyboard from \"../../../common/Keyboard\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst BoardKeyboard = (props: CustomInputProps) => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const { player } = React.useContext(BoardContext);\n    const isKeyboardDriven = state.settings.launchSettings.inputMode === \"keyboard\";\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const layout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    const switchToKeyboard = (ctx: Model) => {\n        ctx.focus.isKeyBoard(true);\n        if (isSinglePlayer) {\n            ctx.settings.launchSettings.inputMode = \"keyboard\";\n        }\n    };\n\n    return isKeyboardDriven || isSinglePlayer ? (\n        <Keyboard\n            layout={layout}\n            onLeft={() => props.onLeft(switchToKeyboard)}\n            onRight={() => props.onRight(switchToKeyboard)}\n            onUp={() => props.onUp(switchToKeyboard)}\n            onDown={() => props.onDown(switchToKeyboard)}\n            onAction={() => props.onAction(switchToKeyboard)}\n            onCancel={() => props.onCancel(switchToKeyboard)}\n            onHint={() => props.onHint(switchToKeyboard)}\n            onUndo={() => props.onUndo()}\n            onPause={() => props.onPause(switchToKeyboard)}\n            onMenu={() => props.onMenu(switchToKeyboard)}\n        />\n    ) : null;\n};\n\nexport default BoardKeyboard;\n","import { BoardContext } from \"../BoardWrap\";\nimport BoardGamePad from \"./BoardGamePad\";\nimport BoardKeyboard from \"./BoardKeyboard\";\nimport GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\ntype _mod = (state: Model) => void;\n\nconst BoardNavigator = () => {\n    const { state, updateContext, updateGameContext, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const before = { x: state.navigator.currentIndex.x, y: state.navigator.currentIndex.y, z: state.navigator.currentIndex.z };\n    const isPaused = !!paused.state.paused;\n\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const handlers = {\n        onLeft: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveLeft(before);\n            }),\n\n        onRight: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveRight(before);\n            }),\n\n        onUp: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveUp(before);\n            }),\n\n        onDown: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.navigator.moveDown(before);\n            }),\n\n        onAction: (modifier: _mod) =>\n            updateGameContext((ctx) => {\n                modifier(ctx);\n                const handler = state?.navigator?.pressCurrent();\n                handler && handler(ctx);\n            }),\n\n        onCancel: (modifier: _mod) =>\n            updateContext((ctx) => {\n                modifier(ctx);\n                ctx.hand.stack.length && ctx.hand.stack[0].onClick({ isKeyboard: true })(ctx);\n            }),\n\n        onPause: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n\n        onHint: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n                if (isVisible(state) && !isDisabled(state)) {\n                    state.settings.enableHint();\n                }\n            });\n        },\n\n        onUndo: () => {\n            replaceContext((_state) => {\n                const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n                if (previous) {\n                    previous.game.rating.penalize(_state.game.rating);\n                    return previous;\n                }\n                return null;\n            });\n        },\n        onMenu: (modifier: _mod) => {\n            updateContext((state) => {\n                modifier(state);\n            });\n            paused.togglePause(isPaused, player);\n        },\n    };\n\n    return isPaused ? null : (\n        <>\n            <BoardKeyboard {...handlers} />\n            <BoardGamePad {...handlers} />\n        </>\n    );\n};\n\nexport default BoardNavigator;\n","import GlobalContext from \"../Context\";\nimport React from \"react\";\n\nconst Dealer: () => any = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const timeouts: any[] = [];\n\n    if (state.settings.launchSettings.quickDeal) {\n        if (state && state.dealer && !state.dealer.isDealt) {\n            replaceContext(state.dealer.dealAll());\n        }\n    } else {\n        const deal = (dealt: number) => {\n            timeouts.push(\n                setTimeout(() => {\n                    if (state && state.dealer && !state.dealer.isDealt) {\n                        replaceContext(state.dealer.dealOne(dealt, deal));\n                    }\n                }, 35)\n            );\n        };\n\n        React.useEffect(() => {\n            deal(state.dealer.dealt);\n            return () =>\n                timeouts.forEach((timeout) => {\n                    clearTimeout(timeout);\n                });\n        }, []);\n        React.useEffect(() => {}, [state.dealer.isDealt]);\n    }\n    return null;\n};\nexport default Dealer;\n","const getStackLabel = (source: string) => {\n    const names = [0, 1, 2, 3, 4, 5, 6].map((id) => \" stack \" + (id + 1));\n    let label = \"\";\n    const split = source.split(\"-\");\n    label += split[0];\n    if (split.length > 1) {\n        label += names[parseInt(split[1])];\n    }\n    return label;\n};\n\nexport default getStackLabel;\n","import CardModel from \"../../Model/Deck/Card\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\nimport { useDrag } from \"react-dnd\";\n\ntype CardProps = {\n    model: CardModel;\n    isSuggested?: boolean;\n    isSelected?: boolean;\n    blink?: number;\n    zIndex?: number;\n    offsetTop?: number;\n    offsetLeft?: number;\n};\n\nconst Card = (props: CardProps) => {\n    //@todo for proper drag & drop of stacks, we need each card to render the following ones\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const pause = React.useContext(PauseContext);\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const isFocused = state.focus.hasCard(props.model);\n    const [, dragRef] = useDrag({\n        item: { type: \"card\", text: \"some text\" },\n\n        begin: (monitor) => {\n            console.log(monitor);\n            if (props.model.onClick) {\n                updateGameContext((context) => {\n                    props.model.onClick({ isKeyboard: false })(context);\n                });\n            }\n        },\n    });\n    const getRef = () => (props.model.canClick() ? dragRef : inputEl);\n    React.useEffect(() => {\n        if (isFocused && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            inputEl && inputEl.current && inputEl.current.focus();\n        }\n    }, [isFocused, state.focus.card]);\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        let ele = e.target;\n\n        while (ele && !ele.className.includes(\"card-base\")) {\n            ele = ele.offsetParent;\n        }\n\n        const rect = ele.getBoundingClientRect();\n        const position = {\n            isKeyBoard,\n            click: {\n                x: e.clientX - ele.ownerDocument.defaultView.pageXOffset,\n                y: e.clientY - ele.ownerDocument.defaultView.pageYOffset,\n            },\n            element: {\n                x: rect.x,\n                y: rect.y,\n            },\n        };\n        const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n        //@todo A11Y allow keyboard actions in singleplayer\n        if (props.model.onClick && !position.isKeyBoard) {\n            updateGameContext((context) => {\n                props.model.onClick(position)(context);\n                if (isSinglePlayer) {\n                    context.settings.launchSettings.inputMode = \"mouse\";\n                }\n            });\n        }\n    };\n\n    const getClassName = () => {\n        const hasSuggestion = props.isSuggested || props.model.suggestion;\n        let className = `card card-base suit-${props.model.type.icon}`;\n        className += !props.isSelected && !isFocused && !hasSuggestion ? ` card-stack-${props.model.source}` : \"\";\n        className += props.isSelected ? \" card-selected\" : \"\";\n        className += props.blink ? \" blink\" : \"\";\n        className += props.model.canClick() ? \" clickable\" : \"\";\n        //@todo onhover, trigger highlight of suggested target card/stack (preview what happens if picked up)\n        className += hasSuggestion && !isFocused ? \" card-suggested\" : \"\";\n        className += isFocused ? \" card-focused\" : \"\";\n        return className;\n    };\n\n    const getCardStyle = () => {\n        const style = {\n            zIndex: (props.zIndex ? props.zIndex : (props.offsetTop ? 1 : 0) * 20) + 1,\n            top: props.offsetTop ? props.offsetTop / 15 + \"em\" : 0,\n            ...props.model.entropyStyle,\n        };\n\n        //move to left on waste (triple draw)\n        if (props.offsetLeft) {\n            style.left = props.offsetLeft * 2 + \"em\";\n        }\n\n        if (!props.model.onClick) {\n            style.pointerEvents = \"none\";\n        }\n\n        return style;\n    };\n\n    const getStackbaseStyle: () => React.CSSProperties = () => {\n        if (!props.model.onClick) {\n            return { pointerEvents: \"none\" };\n        }\n\n        return {};\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": \";\n\n    label += props.model.isHidden ? \"hidden card\" : props.model.type.icon + props.model.face;\n\n    // @todo 3d flip https://3dtransforms.desandro.com/card-flip on unhide\n    // https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\n\n    return (\n        <div style={getStackbaseStyle()} className=\"stack-base\">\n            <button\n                onFocus={() => {\n                    // updateContext((ctx) => {\n                    //     ctx.navigator.update(props.model.source, props.model);\n                    // });\n                }}\n                onBlur={() => {\n                    //updateContext((ctx) => ctx.focus.unsetCard(props.model));\n                }}\n                style={getCardStyle()}\n                // ref={inputEl}\n                ref={getRef()}\n                className={getClassName()}\n                onClick={onClick}\n                disabled={!props.model.canClick() || pause.state.paused}\n                tabIndex={props.model.canClick() ? 0 : -1}\n                aria-label={label}\n                title={label}\n            >\n                <div className=\"card-content\">\n                    {props.model.isHidden || pause.state.paused ? (\n                        <div className=\"card-back\">&nbsp;</div>\n                    ) : (\n                        <div className=\"card-grid-container\">\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-left\">{props.model.face}</div>\n                            </div>\n                            <div>&nbsp;</div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div className=\"mainface\">\n                                <div className=\"align-center\">{props.model.face}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                            <div>&nbsp;</div>\n                            <div>\n                                <div className=\"align-right\">{props.model.face}</div>\n                            </div>\n                            <div>\n                                <div className=\"align-center\">{props.model.type.icon}</div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </button>\n        </div>\n    );\n};\n\nexport default Card;\n","import GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport React from \"react\";\nimport getStackLabel from \"./StackDescription\";\n\nconst StackBase = (props: { model: IStack; children?: any | null }) => {\n    let classname = \"card-base socket\";\n    const inputEl = React.useRef<HTMLButtonElement>(null);\n    const { state, updateGameContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    React.useEffect(() => {\n        if (state.focus.hasStack(props.model.source) && state.settings.launchSettings.boardMode == GameModes.SINGLEPLAYER) {\n            const current = inputEl && inputEl.current ? inputEl.current : null;\n            current && current.focus();\n        }\n    });\n    if (!props.model.stack.length) {\n        if (props.model.blinkFor) {\n            classname += \" socket-blink\";\n        } else if (state.focus.hasStack(props.model.source)) {\n            classname += \" socket-focused\";\n        } else {\n            classname += \" socket-empty\";\n        }\n    } else {\n        classname += \" socket-full\";\n    }\n\n    if (props.model.suggestion && !props.model.stack.length) {\n        classname += \" socket-suggested\";\n    }\n\n    const onClick = (e: any) => {\n        e.preventDefault();\n        const isKeyBoard = e.clientX == 0 && e.clientY == 0;\n        if (!isKeyBoard) {\n            updateGameContext(props.model.clickEmpty({ isKeyBoard }));\n        }\n    };\n\n    let label = getStackLabel(props.model.source);\n    label += \": empty socket\";\n\n    return (\n        <button\n            onFocus={() => {\n                // updateContext((ctx) => {\n                //     ctx.navigator.update(props.model.parent);\n                // });\n            }}\n            onBlur={() => {\n                // updateContext((ctx) => ctx.focus.unsetStack(props.model.parent));\n            }}\n            ref={inputEl}\n            className={classname}\n            onClick={onClick}\n            disabled={!!props.model.stack.length}\n            tabIndex={!props.model.stack.length ? 0 : -1}\n            aria-label={label}\n            title={label}\n        >\n            {props.children}\n        </button>\n    );\n};\nexport default StackBase;\n","import GlobalContext from \"../Context\";\nimport { IStack } from \"../../Model/Game/IStack\";\nimport Model from \"../../Model/Model\";\nimport React from \"react\";\n\ntype _selector = (model: Model) => IStack;\n\nconst useBlinkEffect = (selector: _selector) => {\n    const { updateContext, state } = React.useContext(GlobalContext);\n    if (!state) return;\n    const model = selector(state);\n    let timeout: any = null;\n    React.useEffect(() => {\n        if (state && selector(state).blinkFor) {\n            timeout = setTimeout(\n                () =>\n                    updateContext((state: Model) => {\n                        selector(state).unblink(state);\n                    }),\n                200\n            );\n        }\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [state, model.blinkFor]);\n};\n\nexport default useBlinkEffect;\n","import Card from \"./Card\";\nimport { FoundationStack } from \"../../Model/Game/Foundation\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\ntype FoundationProps = { index: number; model: FoundationStack };\n\nconst FoundationStacks = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    return (\n        <>\n            {state.foundation.stacks.map((foundation, index) => (\n                <Foundation key={index} model={foundation} index={index} />\n            ))}\n        </>\n    );\n};\n\nexport default FoundationStacks;\n\nconst Foundation = (props: FoundationProps) => {\n    useBlinkEffect((model) => model.foundation.stacks[props.index]);\n    const { updateGameContext } = React.useContext(GlobalContext);\n    const model = props.model;\n    const [, drop] = useDrop({\n        accept: \"card\",\n        drop: () => {\n            console.log(\"dropping\", drop);\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n            props.model.clickEmpty({ isKeyboard: false });\n        },\n    });\n    const { state } = React.useContext(GlobalContext);\n    const cards = state?.hand.source == model.source ? [...model.stack, ...state.hand.stack] : [...model.stack];\n    return (\n        <div className=\"board-field\" key={props.index} ref={drop}>\n            <StackBase model={model}>\n                <div className={\"align-center foundation-base suit-\" + model.icon}>{model.icon}</div>\n            </StackBase>\n            {cards.map((card, index) => (\n                <Card\n                    key={index}\n                    model={card}\n                    blink={model.blinkFor}\n                    isSuggested={model.suggestion && model.stack.length - 1 == index}\n                    isSelected={index > model.stack.length - 1}\n                />\n            ))}\n        </div>\n    );\n};\n","import PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst Clock = () => {\n    const { state, getElapsed } = React.useContext(PauseContext);\n    const [elapsed, setElapsed] = React.useState(\"\");\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            if (state.started && !state.paused) {\n                setElapsed(getElapsed());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [state.started, state.paused]);\n\n    return !state.started || !elapsed ? null : (\n        <div className=\"header-clock\">\n            <div className=\"icon-container\">🕒</div>\n            {elapsed}\n        </div>\n    );\n};\n\nexport default Clock;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Hearts = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const getHearts = () => {\n        if (state.settings.launchSettings.recyclingMode == \"infinite\") {\n            return \"🖤\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"1-pass\") {\n            return state.stock.passes > 0 ? \"❤️\" : \"💔\";\n        }\n\n        if (state.settings.launchSettings.recyclingMode == \"3-pass\") {\n            const createString = (length: number, icon: string) =>\n                Array.from(new Array(length).keys())\n                    .map(() => icon)\n                    .join(\"\");\n\n            return createString(state.stock.passes, \"❤️\") + createString(3 - state.stock.passes, \"💔\");\n        }\n        return null;\n    };\n    return <div className=\"heart-container\">{getHearts()}</div>;\n};\nexport default Hearts;\n","import GlobalContext from \"../../Context\";\nimport Model from \"../../../Model/Model\";\nimport React from \"react\";\n\nconst Hint = () => {\n    const { state, updateContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n    const isVisible = (state: Model) => state.settings.suggestionMode.supportsHints || state.settings.suggestionMode.isTemporary;\n\n    const isDisabled = (state: Model) => state.settings.suggestionMode.isTemporary;\n\n    const suggestOnce = () =>\n        updateContext((state) => {\n            if (isVisible(state) && !isDisabled(state)) {\n                state.settings.enableHint();\n            }\n        });\n\n    return !isVisible(state) ? null : (\n        <div>\n            <button title=\"Hint\" onClick={() => suggestOnce()} disabled={isDisabled(state)}>\n                <span className=\"icon\">💡</span>\n            </button>\n        </div>\n    );\n};\nexport default Hint;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Points = () => {\n    const { state } = React.useContext(GlobalContext);\n\n    return (\n        <>\n            <div className=\"icon-container\">🏆</div> {state?.game.rating.points}\n        </>\n    );\n};\n\nexport default Points;\n","import { BoardContext } from \"../../Game/BoardWrap\";\nimport PauseContext from \"../../PauseContext\";\nimport React from \"react\";\n\nconst ToggleMenu = () => {\n    const paused = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n\n    return (\n        <div>\n            <button title=\"Settings\" onClick={() => paused.togglePause(!paused.state.paused, player)}>\n                <span className=\"icon\">☰</span>\n            </button>\n        </div>\n    );\n};\n\nexport default ToggleMenu;\n","import GlobalContext from \"../../Context\";\nimport React from \"react\";\n\nconst Undo = () => {\n    const { state, replaceContext } = React.useContext(GlobalContext);\n    if (!state) return null;\n\n    const undo = () =>\n        replaceContext((_state) => {\n            const previous = _state.game.timemachine.popPreviousState(state.game.timemachine.previousStates.length - 1, state);\n            if (previous) {\n                previous.game.rating.penalize(_state.game.rating);\n                return previous;\n            }\n            return null;\n        });\n\n    if (!state.game.timemachine.previousStates.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <button\n                disabled={!state.game.timemachine.previousStates.length}\n                title={\"Undo (Penalty:\" + Math.pow(2, state.game.rating.multiplicator) + \")\"}\n                onClick={undo}\n            >\n                <span className=\"icon\">⏪</span>\n            </button>\n        </div>\n    );\n};\n\nexport default Undo;\n","import \"../../Style/Header.css\";\n\nimport Clock from \"./Clock\";\nimport Hearts from \"./Hearts\";\nimport Hint from \"./Hint\";\nimport Points from \"./Points\";\nimport React from \"react\";\nimport ToggleMenu from \"./ToggleMenu\";\nimport Undo from \"./Undo\";\n\nconst Header = (props: {mode: string}) => (\n    <div className={\"header \" + props.mode}>\n        <div className=\"header-title\">\n            <Hearts />\n            <Points />\n        </div>\n        <Clock />\n        <div className=\"header-buttons\">\n            <Hint />\n            <Undo />\n            <ToggleMenu />\n        </div>\n    </div>\n);\n\nexport default Header;\n","import \"../Style/Menu.scss\";\n\nimport { NavigationContext, NavigationProvider, NavigationState } from \"./StartScreen/Context\";\nimport { Universal, getKeyboardLayout } from \"../../common/KeyboardLayouts\";\n\nimport { BoardContext } from \"../Game/BoardWrap\";\nimport EntropyLevels from \"../../Model/Game/Settings/EntropyLevels\";\nimport GameModes from \"../../GameModes\";\nimport GlobalContext from \"../Context\";\nimport MenuButton from \"./StartScreen/Menu/MenuButton\";\nimport MenuTitle from \"./StartScreen/Menu/MenuTitle\";\nimport MenuTree from \"./StartScreen/Menu/MenuTree\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport SuggestionModes from \"../../Model/Game/Settings/SuggestionModes\";\nimport { XY } from \"./XY\";\n\nconst _Menu = () => {\n    const [navigation, setNavigation] = React.useState<NavigationState>({\n        menu: {\n            x: 0,\n            y: 0,\n        },\n        screen: {\n            x: 0,\n            y: 0,\n        },\n        focus: \"menu\",\n        mainMenu: \"\",\n        screeen: \"\",\n    });\n    const navigationContext = {\n        navigation,\n        setNavigation,\n    };\n    return (\n        <NavigationProvider value={navigationContext}>\n            <Menu />\n        </NavigationProvider>\n    );\n};\nconst Menu = () => {\n    const { state, updateContext, replaceContext, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    const { player } = React.useContext(BoardContext);\n    const reset = () => {\n        //this is a bad hack?\n        pause.togglePause(true, -1);\n        replaceContext((state) => (state.game.timemachine.previousStates ? state.game.timemachine.previousStates[0] : null));\n    };\n\n    //@todo persist game settings in local storage too if consented and use for initialization\n    const setSuggestionMode = (sm: string) => updateContext((state) => state.settings.setSuggestionMode(sm));\n    const setBaseEntropy = (lvl: number) => updateContext((state) => state.setEntropy(lvl));\n    const setInteractionEntropy = (lvl: number) => updateContext((state) => (state.settings.interactionEntropy = lvl));\n\n    const toggleMenu = () => {\n        pause.togglePause(false, -1);\n    };\n\n    const { navigation, setNavigation } = React.useContext(NavigationContext);\n\n    const switchToMenu = (menu: string, pos: XY) =>\n        setNavigation({ ...navigation, focus: \"menu\", screeen: \"\", mainMenu: menu, menu: { ...pos } });\n\n    const toggleMainMenu = (val: string, pos: XY) => {\n        if (navigation.mainMenu !== val) {\n            switchToMenu(val, pos);\n        } else {\n            switchToMenu(\"\", pos);\n        }\n    };\n\n    if (!pause.state.showMenu) {\n        return null;\n    }\n    if (!state) {\n        return null;\n    }\n\n    const remaining = pause.state.allowed - pause.state.pauses.length - 1;\n\n    let announcement = `You can pause the game ${remaining} more times.`;\n    if (remaining == 1) {\n        announcement = `You can pause the game ${remaining} more time.`;\n    }\n    if (remaining == 0) {\n        announcement = \"This is the last remaining pause. If you continue, no more pause will be possible.\";\n    }\n    if (remaining < 0) [(announcement = \"The game is not paused.\")];\n\n    const isSinglePlayer = state.settings.launchSettings.boardMode === GameModes.SINGLEPLAYER;\n    const keyboardLayout = isSinglePlayer ? Universal : getKeyboardLayout(state.settings.launchSettings.players[player].inputLayout);\n\n    if (pause.state.pausedBy !== player) {\n        return (\n            <div className=\"gamemenu menu\">\n                <div className=\"startscreen-jail\">\n                    <div className=\"innermenu\">\n                        <MenuTitle label=\"😴\" />\n                        {pause.state.pausedBy}\n                        <div className=\"announcement\">{announcement}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"gamemenu menu\">\n            <div className=\"startscreen-jail\">\n                <div className=\"innermenu\">\n                    <MenuTitle label=\"😴\" />\n\n                    <div className=\"announcement\">{announcement}</div>\n                    <MenuTree keyboardLayout={keyboardLayout}>\n                        <MenuButton\n                            icon=\"▶️\"\n                            title=\"Resume\"\n                            onClick={() => {\n                                toggleMenu();\n                            }}\n                        />\n                        <MenuButton\n                            icon={state.settings.suggestionMode.icon}\n                            title={`Suggestions: ${state.settings.suggestionMode.label}`}\n                            onClick={() => {\n                                setSuggestionMode(SuggestionModes.next(state.settings.suggestionMode).key);\n                            }}\n                        />\n                        <MenuButton\n                            icon=\"🌪️\"\n                            title=\"Entropy\"\n                            onClick={(pos: XY) => toggleMainMenu(\"entropy\", pos)}\n                            toggled={navigation.mainMenu == \"entropy\"}\n                        >\n                            <MenuButton\n                                icon=\"🌪️\"\n                                title={`Base Entropy: ${EntropyLevels[state.settings.baseEntropy]}`}\n                                onClick={() => {\n                                    setBaseEntropy(\n                                        state.settings.baseEntropy < EntropyLevels.length - 1 ? state.settings.baseEntropy + 1 : 0\n                                    );\n                                }}\n                            />\n                            <MenuButton\n                                icon=\"🌬️\"\n                                title={`Action Entropy: ${EntropyLevels[state.settings.interactionEntropy]}`}\n                                onClick={() => {\n                                    setInteractionEntropy(\n                                        state.settings.interactionEntropy < EntropyLevels.length - 1\n                                            ? state.settings.interactionEntropy + 1\n                                            : 0\n                                    );\n                                }}\n                            />\n                        </MenuButton>\n                        <MenuButton\n                            icon=\"♻️\"\n                            title=\"Restart Game\"\n                            onClick={() => reset()}\n                            skip={!state.game.timemachine.previousStates.length}\n                        />\n                        <MenuButton icon=\"🗑️\" title=\"Quit Game\" onClick={() => restart()} />\n                    </MenuTree>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default _Menu;\n","import React from \"react\";\n\nconst usePrevious = <T>(value: T) => {\n    const ref = React.useRef<T>();\n    React.useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n","import Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport usePrevious from \"./usePrevious\";\n\nconst Renderer = (props: { length: number; paused: boolean; started: number }) => {\n    const context = React.useContext(GlobalContext);\n\n    const { length, started, paused } = props;\n    const previous = usePrevious({ length, paused, started });\n    React.useEffect(() => {\n        let timeout: any = null;\n        if (\n            context &&\n            context.state &&\n            context.state.settings.launchSettings.speed &&\n            started &&\n            !paused &&\n            previous &&\n            (previous?.length != length || previous?.started != started || previous?.paused != paused)\n        ) {\n            timeout = setTimeout(() => {\n                context.updateContext((state) => {\n                    if (\n                        length == state.stock.stack.length &&\n                        state.stock.passes > 0 &&\n                        (state.stock.stack.length || state.waste.stack.length)\n                    ) {\n                        if (state.hand.isFromWaste()) {\n                            state.waste.putDownHand();\n                        }\n                        if (state.stock.stack.length) {\n                            state.waste.addAll(state.stock.popTop());\n                        } else if (state.stock.canRecycle()) {\n                            state.stock.recycle(state.waste.recycle());\n                        }\n                    }\n                });\n            }, 10000);\n        }\n        return () => clearTimeout(timeout);\n    }, [length, paused, started]);\n\n    if (!context || !context.state) return null;\n\n    return (\n        <div className=\"board-field stock\">\n            <StackBase model={context.state.stock} />\n            {context.state.stock.stack.map((card, index) => (\n                <Card\n                    key={index}\n                    model={card}\n                    offsetTop={(index / 2) * -1}\n                    zIndex={index}\n                    blink={context?.state?.stock.blinkFor}\n                    isSuggested={context?.state?.stock.suggestion && index == context.state.stock.stack.length - 1}\n                />\n            ))}\n        </div>\n    );\n};\n\nconst Stock = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    useBlinkEffect((model) => model.stock);\n    const pause = React.useContext(PauseContext);\n    const { paused, started } = pause.state;\n    return <Renderer length={state.stock.stack.length} paused={paused} started={started} />;\n};\n\nexport default Stock;\n","import TableauModel, { TableauStack } from \"../../Model/Game/Tableau\";\n\nimport Card from \"./Card\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\nimport { useDrop } from \"react-dnd\";\n\ntype TableauProps = { index: number; model: TableauStack; parent: TableauModel };\n\nconst TableauStacks = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    return (\n        <>\n            {state.tableau.stacks.map((tableau, index) => (\n                <Tableau key={index} index={index} model={tableau} parent={state.tableau} />\n            ))}\n        </>\n    );\n};\nexport default TableauStacks;\n\nconst Tableau = (props: TableauProps) => {\n    useBlinkEffect((s) => s.tableau.stacks[props.index]);\n    const { updateGameContext } = React.useContext(GlobalContext);\n    const [, drop] = useDrop({\n        accept: \"card\",\n        drop: () => {\n            console.log(\"dropping\", drop);\n            updateGameContext(props.model.clickEmpty({ isKeyBoard: false }));\n            props.model.clickEmpty({ isKeyboard: false });\n        },\n    });\n    let offset = 1;\n    const getOffset = (index: number) => {\n        for (let i = 0; i <= index; i++) {\n            if (props.model.stack[i] && !props.model.stack[i].isHidden) {\n                offset = i * 12 + (index - i) * 24;\n                return offset;\n            }\n        }\n        offset = index * 12;\n        return offset;\n    };\n\n    const { state } = React.useContext(GlobalContext);\n    const cards = state?.hand.source == props.model.source ? [...props.model.stack, ...state.hand.stack] : [...props.model.stack];\n\n    return (\n        <div className=\"board-field\" ref={drop}>\n            <StackBase model={props.model} />\n            {cards.map((card, index) => (\n                <Card\n                    key={index}\n                    model={card}\n                    blink={props.model.blinkFor}\n                    isSuggested={props.model.suggestion && props.model.stack.length - 1 == index}\n                    offsetTop={getOffset(index)}\n                    isSelected={index > props.model.stack.length - 1}\n                />\n            ))}\n        </div>\n    );\n};\n","import Card from \"./Card\";\nimport CardModel from \"../../Model/Deck/Card\";\nimport GlobalContext from \"../Context\";\nimport React from \"react\";\nimport StackBase from \"./StackBase\";\nimport useBlinkEffect from \"./useBlinkEffect\";\n\nconst Waste = () => {\n    const { state } = React.useContext(GlobalContext);\n    if (!state) return null;\n    useBlinkEffect((model) => model.waste);\n    const getOffset = (index: number) => {\n        if (state.settings.launchSettings.drawMode == \"single\") {\n            return 0;\n        }\n        const length = state.hand.isHoldingCard() && state.hand.isFromWaste() ? state.waste.stack.length + 1 : state.waste.stack.length;\n        let additionalOffset = 2;\n        if (length == 2) {\n            additionalOffset = 1;\n        }\n\n        if (length == 1) {\n            additionalOffset = 0;\n        }\n\n        return ((index - length - 2) % 3) + additionalOffset;\n    };\n\n    const cards = state?.hand.source == state.waste.source ? [...state.waste.stack, ...state.hand.stack] : [...state.waste.stack];\n\n    return (\n        <div className=\"board-field\">\n            <StackBase model={state.waste} />\n            {cards.map((card: CardModel, index: number) => (\n                <Card\n                    key={index}\n                    model={card}\n                    offsetTop={(index / 2) * -1}\n                    offsetLeft={getOffset(index)}\n                    blink={state.waste.blinkFor}\n                    isSuggested={state.waste.suggestion && index == state.waste.stack.length - 1}\n                    isSelected={index > state.waste.stack.length - 1}\n                />\n            ))}\n        </div>\n    );\n};\nexport default Waste;\n","import \"../Style/Board.scss\";\n\nimport BoardNavigator from \"./Navigation/BoardNavigator\";\nimport Dealer from \"./Dealer\";\nimport { DndProvider } from \"react-dnd\";\nimport FoundationStacks from \"./Foundation\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport Header from \"../UI/Header/Header\";\nimport Menu from \"../UI/Menu\";\nimport React from \"react\";\nimport Stock from \"./Stock\";\nimport TableauStacks from \"./Tableau\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport TouchDetector from \"../../common/TouchDetector\";\nimport Waste from \"./Waste\";\n\ntype BoardProps = { mode: string };\nconst Board = (props: BoardProps) => (\n    <DndProvider backend={TouchDetector() ? TouchBackend : HTML5Backend}>\n        <Menu />\n        <Header mode={props.mode} />\n        <div className={\"board-jail \" + props.mode}>\n            <div className={\"board-grid-container \" + props.mode}>\n                <Stock />\n                <Waste />\n                <div className=\"spacer\">&nbsp;</div>\n                <FoundationStacks />\n                <TableauStacks />\n            </div>\n        </div>\n        <Dealer />\n        <BoardNavigator />\n    </DndProvider>\n);\n\nexport default Board;\n","import \"../Style/Screens.scss\";\n\nimport GlobalContext from \"../Context\";\nimport PauseContext from \"../PauseContext\";\nimport React from \"react\";\n\nconst EndScreen = () => {\n    const { state, restart } = React.useContext(GlobalContext);\n    const pause = React.useContext(PauseContext);\n    //@todo show launch settings (draw mode, recycling mode)\n    return !state.game.isEnded ? null : (\n        <div className=\"ui neutral endscreen\">\n            <div className=\"title\">🥳</div>\n            <div className=\"content\">\n                <div>Time: {pause.getElapsed()}</div>\n                <div>Points: {state.game.rating.points}</div>\n                <div>Time Penalty: {state.game.rating.getTimePenalty(state.game.started, state.game.end || Date.now())}</div>\n                <div>Bonus Points: {state.game.rating.getBonusPoints(state.game.started, state.game.end || Date.now())}</div>\n                <div>Total Points: {state.game.rating.getTotal(state.game.started, state.game.end || Date.now())}</div>\n                <div>\n                    <button onClick={restart}>\n                        🗑️<div>New Game</div>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EndScreen;\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Waste from \"../Game/Waste\";\n\nexport type BlinkSelector = (state: Model) => Waste | Stock | any;\n\nexport interface IBlinker {\n    startBlink: (selector: BlinkSelector, state: Model) => void;\n}\n\nexport default class Blinker implements IBlinker {\n    startBlink = (selector: BlinkSelector, state: Model) => {\n        if (selector(state).blinkFor < 10) {\n            selector(state).blinkFor = 10;\n            state.game.registerBlink(true);\n            selector(state).unblink = (s: Model) => this.stopBlink(selector, s);\n        }\n    };\n\n    stopBlink = (selector: BlinkSelector, state: Model) => {\n        selector(state).blinkFor = 0;\n        state.game.registerBlink(false);\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Tableau implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.tableau.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.tableau.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.tableau.putDownHand(index) && state.game.registerMove(\"tableau-\" + index, src);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            state.hand.pickUp(state.tableau.popWithFollowing(card, index), card.source, position) && state.game.registerPickup();\n        } else if (!card) {\n            this.blink(state, index);\n        }\n    };\n}\n\nexport class TableauHidden extends Tableau {\n    dispatchPickup = (card: Card | null, position: any, state: Model, index: number) => {\n        if (card) {\n            this.tryUncover(card, index, state);\n        }\n    };\n\n    tryUncover = (card: Card, index: number, state: Model) =>\n        !state.hand.isHoldingCard() && card.isHidden && state.tableau.uncover(index, card) && state.game.registerUncover();\n}\n","import Model from \"../Model\";\nimport Stock from \"../Game/Stock\";\nimport Tableau from \"../Game/Tableau\";\n\nexport default class Dealer {\n    dealt: number;\n    dealingAt: number;\n    isDealt: boolean;\n\n    constructor() {\n        this.dealt = 0;\n        this.dealingAt = 0;\n        this.isDealt = false;\n    }\n\n    dealOne = (dealt: number, callback: any) => (state: Model) => {\n        if (dealt != state.dealer.dealt) {\n            return null;\n        }\n\n        state.dealer.deal(state.stock, state.tableau);\n        if (state.dealer.isDealt) {\n            state.game.started = Date.now();\n        }\n\n        if (!state.dealer.isDealt) {\n            callback(state.dealer.dealt);\n        }\n\n        return state;\n    };\n\n    dealAll = () => (state: Model) => {\n        if (this.dealt != state.dealer.dealt) {\n            return null;\n        }\n        while (!state.dealer.isDealt) {\n            state.dealer.deal(state.stock, state.tableau);\n        }\n        state.game.started = Date.now();\n        return state;\n    };\n\n    deal = (stock: Stock, tableau: Tableau) => {\n        for (let i = this.dealingAt; i < tableau.stacks.length; i++) {\n            const stack = tableau.stacks[i].stack;\n            if (stack.length <= tableau.stacks.length - i - 1) {\n                const newCard = stock.popOne();\n                if (newCard) {\n                    newCard.source = tableau.stacks[i].source;\n                    if (stack.length == tableau.stacks.length - 1 - i) {\n                        newCard.isHidden = false;\n                    }\n                    tableau.deal(newCard, i);\n                    this.dealt++;\n                    this.dealingAt++;\n                    if (this.dealingAt == tableau.stacks.length) {\n                        this.dealingAt = 0;\n                    }\n                    this.isDealt = false;\n                }\n                return;\n            } else {\n                const isFirst = this.dealingAt == 0;\n                this.dealingAt = 0;\n                this.isDealt = isFirst;\n                return;\n            }\n        }\n\n        this.isDealt = true;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { ClickHandler } from \"../../Common\";\nimport Hand from \"../Game/Hand\";\nimport Model from \"../Model\";\n\nexport default class Dispatcher {\n    clickHandler: ClickHandler;\n\n    constructor(clickHandler: ClickHandler) {\n        this.clickHandler = clickHandler;\n    }\n\n    getHandler = (hand: Hand) => {\n        if (hand && hand.isHoldingCard()) {\n            return this.dispatchPutDown;\n        } else {\n            return this.dispatchPickup;\n        }\n    };\n\n    dispatchPutDown = (card: Card, position: any, index: number) => (state: Model) => {\n        if (state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPutDown(card, position, state, index);\n        }\n    };\n\n    dispatchPickup = (card: Card, position: any, index: number) => (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            this.clickHandler.dispatchPickup(card, position, state, index);\n        }\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Settings from \"./Settings\";\n\nexport default class Focus {\n    settings: Settings;\n    card: Card | null;\n    stack: string;\n    keyboard: boolean;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.card = null;\n        this.stack = \"\";\n        this.keyboard = false;\n    }\n\n    validSettings = () => this.settings.launchSettings.inputMode !== \"mouse\";\n\n    isKeyBoard = (isKeyboard: boolean) => {\n        this.keyboard = isKeyboard;\n    };\n\n    setCard = (card: Card) => {\n        this.card = card;\n        this.stack = \"\";\n    };\n\n    unsetCard = (card: Card) => {\n        if (this.card && card && Card.equals(this.card, card)) {\n            this.card = null;\n        }\n    };\n\n    unsetStack = (stack: string) => {\n        if (this.stack && stack && this.stack == stack) {\n            this.stack = \"\";\n        }\n    };\n\n    setStack = (stack: string) => {\n        this.card = null;\n        this.stack = stack;\n    };\n\n    hasCard = (card: Card) => this.keyboard && this.validSettings() && this.card && card && Card.equals(this.card, card);\n\n    hasStack = (stack: string) => this.keyboard && this.validSettings() && this.stack && stack && this.stack == stack;\n}\n","import Card from \"../Deck/Card\";\n\nexport default class BasicStack {\n    source: string;\n    constructor(source: string) {\n        this.source = source;\n    }\n    stack: Card[] = [];\n    getTop: () => Card | null = () => (this.stack && this.stack.length && this.stack[this.stack.length - 1]) || null;\n    suggestion = false;\n    getClickable = () => this.stack.filter((card) => card.canClick());\n}\n","import BasicStack from \"./BasicStack\";\nimport Hand from \"./Hand\";\n\nexport default class HandHoldingStack extends BasicStack {\n    hand: Hand;\n    constructor(source: string, hand: Hand) {\n        super(source);\n        this.hand = hand;\n    }\n    getHandContent = () => (this.hand.source == this.source ? this.hand.stack : []);\n    getClickable = () => [...this.stack.filter((card) => card.canClick()), ...this.getHandContent().filter((card) => card.canClick())];\n    blinkFor = 0;\n    unblink = () => {};\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport Suits from \"../Deck/Suits\";\nimport { XY } from \"../../View/UI/XY\";\nimport { getFoundationOrder } from \"../Deck/DeckSize\";\n\nexport class FoundationStack extends HandHoldingStack implements IStack {\n    setOnClick: () => void = () => {};\n    acceptedCards: string[] = [];\n    usedCards: any[] = [];\n    icon: string = \"\";\n    color: string = \"\";\n    blinkFor: number = 0;\n    clickEmpty: (p: any) => any = () => {};\n}\nexport default class Foundation {\n    settings: Settings;\n    hand: Hand;\n    stacks: FoundationStack[];\n    blinkFor: number;\n    unblink: () => void;\n    constructor(settings: Settings, hand: Hand) {\n        this.settings = settings;\n        this.hand = hand;\n        const template = (index: number) => {\n            const s = new FoundationStack(\"foundation-\" + index, hand);\n            s.stack = [];\n            s.acceptedCards = [...getFoundationOrder()];\n            s.usedCards = [];\n            s.icon = \"\";\n            s.color = \"\";\n            s.blinkFor = 0;\n            return s;\n        };\n        const stacks = Object.keys(Suits)\n            .map((key: string) => Suits[key])\n            .map((suit, index) => ({ ...template(index), ...suit }));\n        this.stacks = [...stacks];\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, index: number) => (s:any) => void) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                card.onClick = (p: XY) => onClick({ ...card }, p, index);\n                card.canClick = () => sindex == stack.stack.length - 1;\n            });\n            this.hand.setOnClick(stack);\n        });\n    };\n\n    getCurrentAccepted = (index: number) => {\n        const currentFoundation = this.stacks[index].acceptedCards;\n        return currentFoundation[currentFoundation.length - 1];\n    };\n\n    wouldAcceptHand = (index: number) => !this.hand.hasMoreThanOneCard() && this.accepts(index, this.hand.currentCard());\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    accepts = (index: number, card: Card | null) => {\n        if (!card) return false;\n        const currentAccepted = this.getCurrentAccepted(index);\n        return this.stacks[index].icon == card.type.icon && currentAccepted == card.face;\n    };\n\n    add = (index: number, cards: Card[]) => {\n        const card = cards[0];\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 3));\n        card.source = this.stacks[index].source;\n        this.stacks[index].stack.push(card);\n        return this.stacks[index].usedCards.push(this.stacks[index].acceptedCards.pop());\n    };\n\n    remove = (index: number, card: Card) => {\n        this.stacks[index].acceptedCards.push(this.stacks[index].usedCards.pop());\n        return (card && card.equals(this.getTop(index)) && this.stacks[index].stack.pop()) || null;\n    };\n\n    getPreviousUsed = (index: number) => [...this.stacks[index].usedCards].pop();\n\n    countCards = () => this.stacks.map((f) => f.stack.length).reduce((a, b) => a + b, 0);\n\n    getTop = (index: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1];\n\n    static copy = (orig: Foundation, hand: Hand) => {\n        const copy = new Foundation(orig.settings, hand);\n        copy.stacks = orig.stacks.map((origStack) => {\n            const s = new FoundationStack(origStack.source, hand);\n            s.stack = Card.copyAll(origStack.stack);\n            s.acceptedCards = [...origStack.acceptedCards];\n            s.usedCards = [...origStack.usedCards];\n            s.icon = origStack.icon;\n            s.color = origStack.color;\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(3, lvl))));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Foundation implements ClickHandler {\n    blink: BlinkFunction = (state, index) => new Blinker().startBlink((s: Model) => s.foundation.stacks[index], state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model, index: number) => {\n        if (state.foundation.wouldAcceptHand(index)) {\n            const src = state.hand.source;\n            state.foundation.putDownHand(index) && state.game.registerMove(\"foundation-\" + index, src);\n            this.tryDetectEnd(state);\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    dispatchPickup = (_card: Card | null, position: any, state: Model, index: number) => {\n        const card = state.foundation.getTop(index);\n        if (card && state.foundation.getPreviousUsed(index) === card.face) {\n            state.hand.pickUp([state.foundation.remove(index, card)], card.source, position) && state.game.registerPickup();\n        } else {\n            this.blink(state, index);\n        }\n    };\n\n    //@todo move this to a generic place, also detect failure\n    tryDetectEnd(state: Model) {\n        const nrofCards = state.foundation.countCards();\n        if (nrofCards === 52) {\n            state.game.isEnded = true;\n            state.game.end = Date.now();\n        }\n    }\n}\n","import Settings from \"./Settings\";\n\nexport default class Rating {\n    settings: Settings;\n    points: number;\n    multiplicator: number;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.points = 0;\n        this.multiplicator = 1;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.registerHint(this.settings.disableHint());\n        const currentMove = {\n            source: source,\n            target: target,\n        };\n        this.points += this.rateMove(currentMove);\n    };\n\n    registerRecycle = () => {\n        this.registerHint(this.settings.disableHint());\n        if (this.settings.launchSettings.drawMode == \"single\" && this.settings.launchSettings.recyclingMode == \"infinite\") {\n            if (this.points > 0) {\n                if (this.points < 100) {\n                    this.points = 0;\n                } else {\n                    this.points -= 100;\n                }\n            }\n            console.debug(\"RATING: subtract (max) 100 points for RECYCLE\");\n        }\n    };\n\n    registerUncover = () => {\n        this.registerHint(this.settings.disableHint());\n        this.points += 5;\n        console.debug(\"RATING: add 5 points for UNCOVER\");\n    };\n\n    registerBlink(on: boolean) {\n        if (on && this.settings.launchSettings.missPenalty) {\n            this.points -= 10;\n            console.debug(\"RATING: subtract 10 points for invalid action\");\n        }\n    }\n\n    penalize = (other: Rating) => {\n        if (this.settings.launchSettings.undoPenalty) {\n            const penalty = Math.pow(2, other.multiplicator);\n            console.debug(`RATING: applying penalty of ${penalty} points for UNDO`);\n            this.points = Math.min(this.points, other.points) - penalty;\n            this.multiplicator = other.multiplicator + 1;\n        }\n    };\n\n    registerHint = (done: boolean) => {\n        if (done && this.settings.launchSettings.hintPenalty) {\n            this.points -= 10;\n            console.debug(`RATING: applying penalty of 10 points for HINT`);\n        }\n    };\n\n    rateMove(move: { source: string; target: string }) {\n        const isTableau = (obj: string) => obj.substr(0, 7) == \"tableau\";\n        const isFoundation = (obj: string) => obj.substr(0, 10) == \"foundation\";\n        if (isTableau(move.source)) {\n            if (isFoundation(move.target)) {\n                console.debug(\"RATING: add 10 points for MOVE tableau -> foundation\");\n                return 10;\n            }\n        } else if (move.source == \"waste\") {\n            if (isFoundation(move.target)) {\n                console.debug(\"RATING: add 10 points for MOVE waste -> foundation\");\n                return 10;\n            }\n            if (isTableau(move.target)) {\n                console.debug(\"RATING: add 5 points for MOVE waste -> tableau\");\n                return 5;\n            }\n        } else if (isFoundation(move.source)) {\n            if (isTableau(move.target)) {\n                console.debug(\"RATING: subtract 15 points for MOVE foundation -> tableau\");\n                return -15;\n            }\n        }\n\n        return 0;\n    }\n\n    getTimePenalty = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        return Math.trunc(secondsToFinish / 5) * -2;\n    };\n\n    getBonusPoints = (start: number, end: number) => {\n        const secondsToFinish = (end - start) / 1000;\n        if (secondsToFinish < 30) {\n            return 0;\n        }\n        return Math.round((20000 / secondsToFinish) * 35);\n    };\n\n    getTotal = (start: number, end: number) => {\n        return this.points + this.getBonusPoints(start, end) - this.getTimePenalty(start, end);\n    };\n\n    static copy = (orig: Rating) => {\n        const copy = new Rating(orig.settings);\n        copy.points = orig.points;\n        copy.multiplicator = orig.multiplicator;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Model from \"../Model\";\n\nexport default class TimeMachine {\n    previousStates: any[];\n    memorable: boolean;\n    modified: boolean;\n    constructor() {\n        this.previousStates = [];\n        this.memorable = true;\n        this.modified = false;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.memorable = true;\n        this.modified = true;\n\n        if (source == target) {\n            this.memorable = false;\n        }\n    };\n\n    pushPreviousState = (state: any) => {\n        const previous = this.previousStates[this.previousStates.length - 1];\n        if (!previous || !this.modelEquals(state, previous)) {\n            this.previousStates.push(state);\n        }\n    };\n\n    registerPickup = () => {\n        this.modified = true;\n        this.memorable = false;\n    };\n\n    popPreviousState = (id: number, current: any) => {\n        const isRequested = this.previousStates.length - 1 == id;\n        const popPrevious = () => isRequested && this.previousStates && this.previousStates.pop();\n        let previous = popPrevious();\n        while (previous && (!previous.game.timemachine.memorable || this.modelEquals(previous, current)) && this.previousStates.length) {\n            previous = popPrevious();\n        }\n        return previous;\n    };\n\n    registerRecycle = () => {\n        this.memorable = true;\n        this.modified = true;\n    };\n\n    registerUncover = () => {\n        this.memorable = true;\n        this.modified = true;\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        if (on) {\n            this.modified = true;\n            this.memorable = false;\n        }\n    }\n\n    stackEquals = (a: IStack, b: IStack) => {\n        return a.stack.every((card, i) => Card.equals(card, b.stack[i]) && card.isHidden == b.stack[i].isHidden);\n    };\n\n    stacksEqual = (a: { stacks: IStack[] }, b: { stacks: IStack[] }) => {\n        return a.stacks.every((stack, i) => this.stackEquals(stack, b.stacks[i]));\n    };\n\n    modelEquals = (a: Model, b: Model) => {\n        return (\n            this.stackEquals(a.stock, b.stock) &&\n            this.stackEquals(a.waste, b.waste) &&\n            this.stacksEqual(a.tableau, b.tableau) &&\n            this.stacksEqual(a.foundation, b.foundation)\n        );\n    };\n\n    static copy = (orig: TimeMachine) => {\n        const copy = new TimeMachine();\n        copy.previousStates = [...orig.previousStates];\n        copy.memorable = orig.memorable;\n        copy.modified = orig.modified;\n        return copy;\n    };\n}\n","import Rating from \"./Rating\";\nimport Settings from \"./Settings\";\nimport TimeMachine from \"./TimeMachine\";\n\nexport default class Game {\n    settings: Settings;\n    rating: Rating;\n    timemachine: TimeMachine;\n    started: number;\n    isEnded: boolean;\n    end: number;\n    paused: any;\n    constructor(settings: Settings) {\n        this.settings = settings;\n        this.rating = new Rating(settings);\n        this.timemachine = new TimeMachine();\n        //@todo move to context:\n        this.started = 0;\n        this.isEnded = false;\n        this.end = 0;\n    }\n\n    registerMove = (target: string, source: string) => {\n        this.rating.registerMove(target, source);\n        this.timemachine.registerMove(target, source);\n        return true;\n    };\n\n    registerPickup = () => {\n        this.timemachine.registerPickup();\n        return true;\n    };\n\n    registerRecycle = () => {\n        this.rating.registerRecycle();\n        this.timemachine.registerRecycle();\n        return true;\n    };\n\n    registerUncover = () => {\n        this.rating.registerUncover();\n        this.timemachine.registerUncover();\n        return true;\n    };\n\n    registerBlink(on: boolean) {\n        this.rating.registerBlink(on);\n        this.timemachine.registerBlink(on);\n        return true;\n    }\n\n    static copy = (orig: Game) => {\n        const copy = new Game(orig.settings);\n        copy.timemachine = TimeMachine.copy(orig.timemachine);\n        copy.rating = Rating.copy(orig.rating);\n        copy.paused = orig.paused;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Hand {\n    stack: Card[];\n    source: string;\n    position: XY | null;\n    constructor() {\n        this.stack = [];\n        this.source = \"\";\n        this.position = null;\n    }\n\n    filter: (stack: any[]) => Card[] = (stack) => {\n        return stack.filter((c) => c);\n    };\n\n    pickUp = (stack: (Card | null)[], source: string, position: XY) => {\n        if (stack && stack[0]) {\n            this.stack = this.filter(stack).map((c) => {\n                c.suggestion = false;\n                return c;\n            });\n            this.source = source;\n            this.position = position;\n        }\n\n        return stack;\n    };\n\n    putDown = () => {\n        this.source = \"\";\n        const result = this.stack.splice(0, this.stack.length);\n        return result;\n    };\n\n    setOnClick = (model: IStack) => {\n        if (this.source && this.source == model.source) {\n            let _onClick = model.clickEmpty;\n            if (model.stack.length) {\n                _onClick = model.stack[model.stack.length - 1].onClick;\n            }\n            this.stack.forEach((card) => {\n                card.onClick = _onClick;\n                card.canClick = () => true;\n            });\n        }\n    };\n\n    isHoldingCard = () => !!this.stack.length;\n\n    isHoldingKing = () => this.isHoldingCard() && this.currentCard() && this.currentCard()?.face == \"K\";\n\n    currentCard: () => Card | null = () => (this.isHoldingCard() && this.stack[0]) || null;\n\n    hasMoreThanOneCard = () => this.stack.length > 1;\n\n    isFromCurrentSource = (card: Card) => (this.source && card.source == this.source) || null;\n\n    isFromWaste = () => this.source && this.source == \"waste\";\n\n    isFromFoundation = (index: number) => this.source && this.source == `foundation-${index}`;\n\n    isFromTableau = (index: number) => this.source && this.source == `tableau-${index}`;\n\n    isFromAnyTableau = () => this.source && this.source.substring(0, 8) == \"tableau-\";\n\n    getTableauIndex: () => number = () => (this.source && parseInt(this.source.substring(8))) || 0;\n\n    static copy = (orig: Hand) => {\n        const copy = new Hand();\n        copy.stack = Card.copyAll(orig.stack);\n        copy.source = orig.source;\n        copy.position = orig.position;\n        return copy;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport { IStack } from \"../Game/IStack\";\nimport Model from \"../Model\";\n\ninterface NavIndex {\n    x: number;\n    y: number;\n    z: number;\n}\n\nexport default class Navigator {\n    model: Model;\n    currentIndex: NavIndex;\n    rows: (IStack | undefined)[][];\n    constructor(model: Model) {\n        this.model = model;\n        this.currentIndex = { x: 0, y: 0, z: 0 };\n        this.rows = [[this.model.stock, this.model.waste, undefined, ...this.model.foundation.stacks], [...this.model.tableau.stacks]];\n    }\n\n    getZindex = (elem: IStack, card: Card) => {\n        const targets = elem.getClickable();\n        for (let i = 0; i < targets.length; i++) {\n            if (Card.equals(card, targets[i])) {\n                return i;\n            }\n        }\n        return 0;\n    };\n\n    update = (pos: string, card: Card) => {\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            for (let j = 0; j < row.length; j++) {\n                const elem = row[j];\n                if (elem && elem.source == pos) {\n                    const zIndex = this.getZindex(elem, card);\n                    this.currentIndex = { x: j, y: i, z: zIndex };\n                    this.finishNav();\n                    return;\n                }\n            }\n        }\n    };\n\n    valid = (pos: NavIndex) => pos.x === this.currentIndex.x && pos.y === this.currentIndex.y && pos.z === this.currentIndex.z;\n\n    moveLeft = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x--;\n            if (this.currentIndex.x == -1) {\n                this.currentIndex.x = 6;\n            }\n        });\n\n    moveRight = (pos: NavIndex) =>\n        this.move(pos, () => {\n            this.currentIndex.x++;\n            if (this.currentIndex.x == 7) {\n                this.currentIndex.x = 0;\n            }\n        });\n\n    move = (pos: NavIndex, direction: () => void) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        direction();\n        const current = this.current();\n        if (current == undefined) {\n            this.move(this.currentIndex, direction);\n        } else {\n            this.currentIndex.z = current.getClickable().length - 1;\n            this.finishNav();\n        }\n    };\n\n    moveUp = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z > 0) {\n            this.currentIndex.z--;\n            this.finishNav();\n        } else {\n            this.toggleRow(true);\n        }\n    };\n\n    moveDown = (pos: NavIndex) => {\n        if (!this.valid(pos)) {\n            return;\n        }\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable.length && this.currentIndex.z < clickable.length - 1) {\n            this.currentIndex.z++;\n            this.finishNav();\n        } else {\n            this.toggleRow(false);\n        }\n    };\n\n    toggleRow = (pickLast: boolean) => {\n        if (this.currentIndex.y == 0) {\n            this.currentIndex.y = 1;\n        } else {\n            this.currentIndex.y = 0;\n        }\n        const current = this.current();\n        const last: number = current ? current.getClickable().length - 1 : 0;\n        this.currentIndex.z = pickLast ? last : 0;\n        if (!current) {\n            this.moveLeft(this.currentIndex);\n        } else {\n            this.finishNav();\n        }\n    };\n\n    finishNav = () => {\n        const clickable = this.current()?.getClickable();\n        if (clickable && clickable[this.currentIndex.z]) {\n            this.model.focus.setCard(clickable[this.currentIndex.z]);\n        } else {\n            this.model.focus.setStack(this.current()?.source || \"\");\n        }\n        return true;\n    };\n\n    current = () => {\n        return this.rows[this.currentIndex.y][this.currentIndex.x];\n    };\n\n    pressCurrent = () => {\n        if (this.model.focus.card && this.model.focus.card.canClick()) {\n            return this.model.focus.card.onClick({ isKeyboard: true });\n        } else if (this.model.focus.stack) {\n            return this.current()?.clickEmpty({ isKeyboard: true });\n        } else {\n            return (ctx: Model) => {\n                ctx.navigator.finishNav();\n                ctx.game.timemachine.modified = true;\n            };\n        }\n    };\n}\n","import SuggestionModes, { SuggestionMode } from \"./Settings/SuggestionModes\";\n\nimport { LaunchSettings } from \"../../Common\";\n\nexport default class Settings {\n    launchSettings: LaunchSettings;\n    baseEntropy: number;\n    interactionEntropy: number;\n    suggestionModes: SuggestionMode[];\n    suggestionMode: SuggestionMode;\n\n    constructor(launchSettings: LaunchSettings) {\n        this.launchSettings = launchSettings;\n        this.baseEntropy = launchSettings.baseEntropy;\n        this.interactionEntropy = launchSettings.interactionEntropy;\n        this.suggestionModes = SuggestionModes.allSuggestionModes();\n        this.suggestionMode = SuggestionModes.get(launchSettings.suggestionMode);\n    }\n\n    setSuggestionMode = (sm: string) => {\n        if (this.suggestionMode.key !== sm) {\n            this.suggestionMode = SuggestionModes.get(sm);\n        }\n    };\n\n    enableHint = () => {\n        this.suggestionMode = SuggestionModes.getHintMode();\n    };\n\n    disableHint = () => {\n        if (this.suggestionMode.isTemporary && this.suggestionMode.next) {\n            this.suggestionMode = SuggestionModes.get(this.suggestionMode.next);\n            return true;\n        }\n        return false;\n    };\n\n    static copy = (orig: Settings) => {\n        const copy = new Settings(orig.launchSettings);\n        copy.suggestionMode = orig.suggestionMode;\n        copy.baseEntropy = orig.baseEntropy;\n        copy.interactionEntropy = orig.interactionEntropy;\n        return copy;\n    };\n}\n","import BasicStack from \"./BasicStack\";\nimport Card from \"../Deck/Card\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Stock extends BasicStack implements IStack {\n    settings: Settings;\n    recyclings: number;\n    passes: number;\n    blinkFor: number;\n    unblink: () => void;\n    clickEmpty: (p: any) => (s: any) => void;\n    constructor(stack: Card[], settings: Settings) {\n        super(\"stock\");\n        this.settings = settings;\n        this.stack = stack.map(this.setCardProperties);\n        this.recyclings = 0;\n        this.passes = -1;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        this.clickEmpty = () => () => {};\n        if (this.settings.launchSettings.recyclingMode == \"1-pass\") {\n            this.passes = 1;\n        }\n        if (this.settings.launchSettings.recyclingMode == \"3-pass\") {\n            this.passes = 3;\n        }\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: XY) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n    };\n\n    popOne = () => {\n        const result = this.stack.pop();\n        return result;\n    };\n\n    canRecycle() {\n        return (\n            this.settings.launchSettings.recyclingMode == \"infinite\" ||\n            (this.settings.launchSettings.recyclingMode == \"3-pass\" && this.recyclings < 2)\n        );\n    }\n\n    recycle = (waste: Card[]) => {\n        if (waste.length) {\n            this.stack = waste.reverse().map(this.setCardProperties);\n            this.stack[this.stack.length - 1].canClick = () => true;\n            this.recyclings++;\n            return true;\n        }\n\n        return false;\n    };\n\n    setCardProperties = (card: Card) => {\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        card.isHidden = true;\n        card.source = this.source;\n        return card;\n    };\n\n    isOnTop = (card: Card) => card && card.equals(this.getTop());\n\n    popTop = () => {\n        let result: Card[] = [];\n        if (this.settings.launchSettings.drawMode == \"single\") {\n            const top = this.stack.pop();\n            if (top) result = [top];\n        }\n        if (this.settings.launchSettings.drawMode == \"triple\") {\n            result = this.stack.splice(this.stack.length - 3);\n        }\n        if (this.stack.length == 0) {\n            this.passes--;\n        }\n\n        return result;\n    };\n\n    static copy = (orig: Stock) => {\n        const copy = new Stock([], orig.settings);\n        copy.stack = Card.copyAll(orig.stack);\n        copy.passes = orig.passes;\n        copy.recyclings = orig.recyclings;\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\nimport Navigator from \"./Navigator\";\n\nexport default class Stock implements ClickHandler {\n    navigator: Navigator;\n    constructor(navigator: Navigator) {\n        this.navigator = navigator;\n    }\n\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.stock, state);\n\n    dispatchPutDown = (_card: Card, _position: any, state: Model) => this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, _position: any, state: Model) => {\n        return card != null ? this.moveToWaste(card, state) : this.recycleWaste(state);\n    };\n\n    moveToWaste = (card: Card, state: Model) => {\n        return state.stock.isOnTop(card) && state.waste.addAll(state.stock.popTop()) && state.game.registerMove(\"waste\", \"stock\");\n    };\n\n    recycleWaste = (state: Model) => {\n        if (!state.stock.getTop()) {\n            return (\n                (!!state.waste.getTop() &&\n                    state.stock.canRecycle() &&\n                    state.stock.recycle(state.waste.recycle()) &&\n                    state.game.registerRecycle() &&\n                    this.navigator.finishNav()) ||\n                this.blink(state, 0)\n            );\n        }\n    };\n}\n","import { BlinkFunction, ClickHandler } from \"../../Common\";\n\nimport Blinker from \"./Blinker\";\nimport Card from \"../Deck/Card\";\nimport Model from \"../Model\";\n\nexport default class Waste implements ClickHandler {\n    blink: BlinkFunction = (state: Model) => new Blinker().startBlink((s: Model) => s.waste, state);\n\n    dispatchPutDown = (card: Card, position: any, state: Model) =>\n        (state.waste.wouldAcceptHand() && state.waste.putDownHand() && state.game.registerMove(\"waste\", \"waste\")) || this.blink(state, 0);\n\n    dispatchPickup = (card: Card | null, position: any, state: Model) =>\n        (card && state.hand.pickUp([state.waste.popTop(card)], \"waste\", position) && state.game.registerPickup()) || this.blink(state, 0);\n}\n","import Model from \"../Model\";\nimport SuggestionModes from \"../Game/Settings/SuggestionModes\";\nimport Tableau from \"./Tableau\";\nimport Waste from \"./Waste\";\n\nexport default class Suggestions {\n    tableau: Tableau;\n    waste: Waste;\n\n    constructor() {\n        this.tableau = new Tableau();\n        this.waste = new Waste();\n    }\n\n    evaluateOptions = (state: Model) => {\n        this.disableAllSuggestions(state);\n        if (\n            state.settings.suggestionMode.key !== SuggestionModes.NONE &&\n            !this.getUncoverOptions(state) &&\n            !this.getPutdownSuggestions(state) &&\n            !state.hand.isHoldingCard() &&\n            (!this.getPickupOptions(state) || state.settings.suggestionMode.key == SuggestionModes.FULL) &&\n            (state.stock.getTop() || state.stock.canRecycle()) &&\n            state.settings.suggestionMode.key !== SuggestionModes.SCORED\n        ) {\n            state.stock.suggestion = true;\n        }\n    };\n\n    getPutdownSuggestions = (state: Model, onlyUseful?: boolean) => {\n        if (!state.hand.isHoldingCard() || state.settings.suggestionMode.key == SuggestionModes.NONE) {\n            return 0;\n        }\n\n        const accepted = [];\n        if (state.waste.wouldAcceptHand()) {\n            if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromWaste()) {\n                const move = { target: \"waste\", source: state.hand.source };\n                if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                    accepted.push(move);\n                    state.waste.suggestion = true;\n                }\n            }\n        }\n\n        state.foundation.stacks.forEach((stack, index) => {\n            if (state.foundation.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromFoundation(index)) {\n                    const move = { target: stack.source, source: state.hand.source };\n                    if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                        accepted.push(move);\n                        stack.suggestion = true;\n                    }\n                }\n            }\n        });\n\n        state.tableau.stacks.forEach((stack, index) => {\n            if (state.tableau.wouldAcceptHand(index)) {\n                if (state.settings.suggestionMode.key === SuggestionModes.FULL || !state.hand.isFromTableau(index)) {\n                    const isMoveOfKingBetweenEmptySlots =\n                        state.hand.isHoldingKing() &&\n                        stack.stack.length == 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length == 0;\n\n                    const isMoveBetweenSimilarParentCards =\n                        stack.stack.length > 0 &&\n                        state.hand.isFromAnyTableau() &&\n                        state.tableau.stacks[state.hand.getTableauIndex()].stack.length > 0 &&\n                        stack.stack[stack.stack.length - 1].face ==\n                            state.tableau.stacks[state.hand.getTableauIndex()].stack[\n                                state.tableau.stacks[state.hand.getTableauIndex()].stack.length - 1\n                            ].face &&\n                        !state.tableau.getTop(state.hand.getTableauIndex()).isHidden;\n\n                    const isNotLoop = !isMoveOfKingBetweenEmptySlots && !isMoveBetweenSimilarParentCards;\n\n                    if (!onlyUseful || state.settings.suggestionMode.key === SuggestionModes.FULL || isNotLoop) {\n                        const move = { target: stack.source, source: state.hand.source };\n                        if (state.settings.suggestionMode.key !== SuggestionModes.SCORED || state.game.rating.rateMove(move) > 0) {\n                            accepted.push(move);\n                            stack.suggestion = true;\n                        }\n                    }\n                }\n            }\n        });\n\n        return accepted.length;\n    };\n\n    getPickupOptions = (state: Model) => {\n        let foundAny = false;\n        const wasteState = Model.copy(state);\n        this.waste.dispatchPickup(wasteState.waste.getTop(), null, wasteState);\n        if (wasteState.game.timemachine.modified) {\n            if (this.getPutdownSuggestions(wasteState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                state.waste.suggestion = true;\n                foundAny = true;\n            }\n        }\n\n        state.tableau.stacks.forEach((tableau, index) =>\n            tableau.stack\n                .map((card, cardIndex) => ({ cardIndex, card }))\n                .filter(({ card }) => !card.isHidden)\n                .forEach(({ card, cardIndex }) => {\n                    const tableauState = Model.copy(state);\n                    this.tableau.dispatchPickup(card, null, tableauState, index);\n                    if (tableauState.game.timemachine.modified) {\n                        if (this.getPutdownSuggestions(tableauState, true) > (state.settings.suggestionMode.key == SuggestionModes.FULL ? 1 : 0)) {\n                            tableau.stack[cardIndex].suggestion = true;\n                            foundAny = true;\n                        }\n                    }\n                })\n        );\n        return foundAny;\n    };\n\n    getUncoverOptions = (state: Model) => {\n        if (!state.hand.isHoldingCard()) {\n            const filtered = state.tableau.stacks\n                .map((_stack, index) => index)\n                .filter((index) => state.tableau.getTop(index) && state.tableau.getTop(index).isHidden);\n            filtered.forEach((index) => {\n                state.tableau.getTop(index).suggestion = true;\n            });\n            return filtered.length;\n        }\n\n        return 0;\n    };\n\n    disableAllSuggestions = (state: Model) => {\n        const disableSuggestion = (obj: any) => {\n            obj.suggestion = false;\n            obj.stack && obj.stack.forEach(disableSuggestion);\n            obj.stacks && obj.stacks.forEach(disableSuggestion);\n        };\n\n        disableSuggestion(state.waste);\n        disableSuggestion(state.stock);\n        disableSuggestion(state.tableau);\n        disableSuggestion(state.foundation);\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport { IStack } from \"./IStack\";\nimport Settings from \"./Settings\";\nimport { getTableauOrder } from \"../Deck/DeckSize\";\n\nexport class TableauStack extends HandHoldingStack implements IStack {\n    //@todo move to IStack, make boolean\n    blinkFor = 0;\n    id = 0;\n    // eslint-disable-next-line no-unused-vars\n    onClick = (a: any) => (s: any) => {};\n    // eslint-disable-next-line no-unused-vars\n    clickEmpty = (a: any) => (s: any) => {};\n    setOnClick = () => {};\n}\nexport default class Tableau {\n    stacks: TableauStack[];\n    settings: Settings;\n    hand: Hand;\n\n    constructor(settings: Settings, hand: Hand) {\n        const ids = [0, 1, 2, 3, 4, 5, 6];\n        this.hand = hand;\n        this.stacks = ids.map((id) => {\n            const s = new TableauStack(\"tableau-\" + id, hand);\n            s.stack = [];\n            s.blinkFor = 0;\n            s.id = id;\n            return s;\n        });\n        this.settings = settings;\n    }\n\n    setOnClick = (\n        onClick: (a: any, b: any, index: number) => (s: any) => void,\n        onClickhidden: (a: any, b: any, index: number) => (s: any) => void,\n        hand: Hand\n    ) => {\n        this.stacks.forEach((stack, index) => {\n            stack.clickEmpty = (p: any) => onClick(null, p, index);\n            stack.stack.forEach((card, sindex) => {\n                const click = card.isHidden && sindex == stack.stack.length - 1 ? onClickhidden : onClick;\n                card.onClick = (p: any) => click({ ...card }, p, index);\n                card.canClick = () => !card.isHidden || this.canUncover(index, card) || false;\n            });\n            hand.setOnClick(stack);\n        });\n    };\n\n    getStack = (index: number) => this.stacks[index];\n\n    wouldAcceptHand = (index: number) => this.canPutDown(this.getTop(index), this.hand, index);\n\n    putDownHand = (index: number) => this.add(index, this.hand.putDown());\n\n    canPutDown = (card: Card, hand: Hand, index: number) =>\n        (card && card.isHidden && hand.isFromCurrentSource(card)) ||\n        this.accepts(index, hand.currentCard()) ||\n        (!card && hand.isFromTableau(index));\n\n    accepts = (index: number, current?: Card | null) => {\n        const top = this.getTop(index);\n        if (!top) {\n            return current && current.face === \"K\";\n        }\n        if (top.isHidden) {\n            return false;\n        }\n        const range = [...getTableauOrder()];\n        const currentIndex = current ? range.indexOf(current.face) : 0;\n        const topIndex = range.indexOf(top.face);\n        return currentIndex + 1 == topIndex && current?.type.color !== top.type.color && top.face !== \"A\";\n    };\n\n    getCard = (index: number, card: Card) => {\n        for (let j = 0; j < this.stacks[index].stack.length; j++) {\n            if (card && card.equals(this.stacks[index].stack[j]) && card.isHidden === this.stacks[index].stack[j].isHidden) {\n                return this.stacks[index].stack[j];\n            }\n        }\n        return false;\n    };\n\n    popWithFollowing = (card: Card, i: number) => {\n        for (let j = 0; j < this.stacks[i].stack.length; j++) {\n            if (card && card.equals(this.stacks[i].stack[j])) {\n                const result = this.stacks[i].stack.splice(j, this.stacks[i].stack.length);\n                this.stackEntropy(i);\n                return result;\n            }\n        }\n\n        return [];\n    };\n\n    deal = (card: Card, index: number) => {\n        this.stacks[index].stack.push(card);\n    };\n\n    canUncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        return top.isHidden && card && card.equals(this.getTop(index));\n    };\n\n    uncover = (index: number, card: Card) => {\n        const top = this.getTop(index);\n        if (this.canUncover(index, card)) {\n            top.isHidden = false;\n            this.stackEntropy(index);\n            return true;\n        }\n\n        return false;\n    };\n\n    stackEntropy = (index: number) => {\n        let entropy = this.settings.interactionEntropy;\n        let next = 1;\n        let top = this.getTop(index);\n        while (entropy && entropy != 0 && top) {\n            top.causeEntropy(entropy);\n            entropy--;\n            top = this.getTop(index, next);\n            next++;\n        }\n    };\n\n    add = (index: number, cards: Card[]) => {\n        this.stacks[index].stack = this.stacks[index].stack.concat(cards.map((c) => this.setCardProperties(c, index)));\n        this.stackEntropy(index);\n        return cards;\n    };\n\n    setCardProperties = (card: Card, index: number) => {\n        card.source = this.stacks[index].source;\n        return card;\n    };\n\n    getTop = (index: number, offset?: number) => this.stacks[index].stack[this.stacks[index].stack.length - 1 - (offset || 0)];\n\n    static copy = (orig: Tableau, hand: Hand) => {\n        const copy = new Tableau(orig.settings, hand);\n        copy.stacks = orig.stacks.map((stack, index) => {\n            const s = new TableauStack(stack.source, hand);\n            s.id = index;\n            s.stack = Card.copyAll(stack.stack);\n            return s;\n        });\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stacks.forEach((stack) => stack.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 4))));\n        return this;\n    };\n}\n","import Card from \"../Deck/Card\";\nimport Hand from \"./Hand\";\nimport HandHoldingStack from \"./HandHoldingStack\";\nimport Settings from \"./Settings\";\nimport { XY } from \"../../View/UI/XY\";\n\nexport default class Waste extends HandHoldingStack {\n    settings: Settings;\n    blinkFor: number;\n    unblink: () => void;\n    clickEmpty: (p: any) => (s: any) => void;\n    constructor(settings: Settings, hand: Hand) {\n        super(\"waste\", hand);\n        this.settings = settings;\n        // eslint-disable-next-line no-unused-vars\n        this.blinkFor = 0;\n        this.unblink = () => {};\n        this.clickEmpty = () => () => {};\n    }\n\n    setOnClick = (onClick: (c: any, p: XY, i: any) => (s: any) => void) => {\n        this.clickEmpty = (p) => onClick(null, p, null);\n        this.stack.forEach((card, index) => {\n            card.onClick = (p: XY) => onClick({ ...card }, p, null);\n            card.canClick = () => index == this.stack.length - 1;\n        });\n        this.hand.setOnClick(this);\n    };\n\n    putDownHand = () => this.addAll(this.hand.putDown());\n\n    add = (card: Card) => card && this.stack.push(this.setCardProperties(card));\n\n    addAll = (cards: Card[]) => cards && cards.length && cards.map(this.add);\n\n    setCardProperties = (card: Card) => {\n        card.source = this.source;\n        card.isHidden = false;\n        card.causeEntropy(Math.min(this.settings.interactionEntropy, 1));\n        return card;\n    };\n\n    wouldAcceptHand = () => this.hand.isFromWaste() && this.canAdd(this.hand.currentCard());\n\n    canAdd = (card: Card | null) => card && (!this.getTop() || !card.equals(this.getTop()));\n\n    popTop = (card: Card) => (card && card.equals(this.getTop()) && this.stack.pop()) || null;\n\n    recycle = () => this.stack.splice(0, this.stack.length);\n\n    static copy = (orig: Waste, hand: Hand) => {\n        const copy = new Waste(orig.settings, hand);\n        copy.stack = Card.copyAll(orig.stack);\n        return copy;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.stack.forEach((element) => element.causeEntropy(Math.min(lvl, 1)));\n        return this;\n    };\n}\n","import { ClickHandler, LaunchSettings } from \"../Common\";\nimport TableauHandler, { TableauHidden } from \"./Business/Tableau\";\n\nimport Dealer from \"./Business/Dealer\";\nimport Deck from \"./Deck/Deck\";\nimport Dispatcher from \"./Business/Dispatcher\";\nimport Focus from \"./Game/Focus\";\nimport Foundation from \"./Game/Foundation\";\nimport FoundationHandler from \"./Business/Foundation\";\nimport Game from \"./Game/Game\";\nimport Hand from \"./Game/Hand\";\nimport Navigator from \"./Business/Navigator\";\nimport Settings from \"./Game/Settings\";\nimport Stock from \"./Game/Stock\";\nimport StockHandler from \"./Business/Stock\";\nimport Suggestions from \"./Business/Suggestions\";\nimport Tableau from \"./Game/Tableau\";\nimport Waste from \"./Game/Waste\";\nimport WasteHandler from \"./Business/Waste\";\n\nexport default class Model {\n    stock: Stock;\n    waste: Waste;\n    foundation: Foundation;\n    tableau: Tableau;\n    hand: Hand;\n    game: Game;\n    settings: Settings;\n    focus: Focus;\n    suggestor: Suggestions;\n    dealer: Dealer;\n    navigator: Navigator;\n\n    constructor(obj: any) {\n        this.stock = obj.stock;\n        this.waste = obj.waste;\n        this.foundation = obj.foundation;\n        this.tableau = obj.tableau;\n        this.hand = obj.hand;\n        this.game = obj.game;\n        this.settings = obj.settings;\n        this.focus = obj.focus;\n        this.suggestor = new Suggestions();\n        this.dealer = new Dealer();\n        this.navigator = new Navigator(this);\n    }\n\n    withSuggestions = () => {\n        this.suggestor.evaluateOptions(this);\n        return this;\n    };\n\n    setEntropy = (lvl: number) => {\n        this.settings.baseEntropy = lvl;\n        this.stock.setEntropy(lvl);\n        this.waste.setEntropy(lvl);\n        this.foundation.setEntropy(lvl);\n        this.tableau.setEntropy(lvl);\n    };\n\n    withHandlers = () => {\n        const getHandler = (clickHandler: ClickHandler) => new Dispatcher(clickHandler).getHandler(this.hand);\n        this.stock.setOnClick(getHandler(new StockHandler(this.navigator)));\n        this.waste.setOnClick(getHandler(new WasteHandler()));\n        this.foundation.setOnClick(getHandler(new FoundationHandler()));\n        this.tableau.setOnClick(getHandler(new TableauHandler()), getHandler(new TableauHidden()), this.hand);\n        return this;\n    };\n\n    static getInitialState = (launchSettings: LaunchSettings, deck: Deck) => {\n        const settings = new Settings(launchSettings);\n        const hand = new Hand();\n        const state = {\n            stock: new Stock([...deck.cards], settings),\n            waste: new Waste(settings, hand),\n            foundation: new Foundation(settings, hand),\n            tableau: new Tableau(settings, hand),\n            hand: hand,\n            game: new Game(settings),\n            settings: settings,\n            focus: new Focus(settings),\n        };\n        return new Model(state);\n    };\n\n    static copy = (state: Model) => {\n        const hand = Hand.copy(state.hand);\n        return new Model({\n            stock: Stock.copy(state.stock),\n            waste: Waste.copy(state.waste, hand),\n            foundation: Foundation.copy(state.foundation, hand),\n            tableau: Tableau.copy(state.tableau, hand),\n            hand: hand,\n            game: Game.copy(state.game),\n            settings: Settings.copy(state.settings),\n            focus: state.focus,\n        });\n    };\n}\n","import { LaunchSettings, StateReplacer, StateUpdater } from \"../../Common\";\n\nimport Board from \"./Board\";\nimport Deck from \"../../Model/Deck/Deck\";\nimport EndScreen from \"../UI/EndScreen\";\nimport Model from \"../../Model/Model\";\nimport { Provider } from \"../Context\";\nimport React from \"react\";\n\nexport const BoardContext = React.createContext({\n    player: 0,\n});\n\nconst BoardProvider = BoardContext.Provider;\n\ninterface BoardWrapProps {\n    settings: LaunchSettings;\n    restart: () => void;\n    deck: Deck;\n    player: number;\n}\n\n//We use class component here because setState allows partial updates \nexport default class BoardWrap extends React.Component<BoardWrapProps, Model> {\n    constructor(props: BoardWrapProps) {\n        super(props);\n        this.state = Model.getInitialState(props.settings, props.deck);\n    }\n\n    //replacecontext is hard replacement, for restart and undo\n    replaceContext = (modifier: StateReplacer) => this.setState(modifier);\n\n    //updatecontext is soft replacement used for navigation.\n    updateContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            modifier(state);\n            return state;\n        });\n\n    //updateGameContext is for undo-able game actions\n    updateGameContext = (modifier: StateUpdater) =>\n        this.replaceContext((state) => {\n            state.game.timemachine.modified = false;\n            const previous = Model.copy(state);\n            modifier(state);\n            if (state.game.timemachine.modified) {\n                state.game.timemachine.pushPreviousState(previous);\n                return state;\n            }\n\n            return null;\n        });\n\n    //on every render, we refresh the click handlers in the model and the suggestions\n    render = () => {\n        const context = {\n            state: this.state.withHandlers().withSuggestions(),\n            replaceContext: this.replaceContext,\n            updateContext: this.updateContext,\n            updateGameContext: this.updateGameContext,\n            restart: this.props.restart,\n        };\n        return (\n            <Provider value={context}>\n                <BoardProvider value={{ player: this.props.player }}>\n                    <Board mode={this.props.settings.boardMode} />\n                </BoardProvider>\n                <EndScreen />\n            </Provider>\n        );\n    };\n}\n"],"sourceRoot":""}